sambla_legacy_integration_legacy|applications_sambq_p|WITH data_with_ssn_rules AS (SELECT *, CASE WHEN market= "SE" THEN LEFT(REGEXP_REPLACE(CAST(raw.national_id AS STRING), "[^0-9]", ""), 12) WHEN market= "NO" THEN LEFT(REGEXP_REPLACE(CAST(raw.national_id AS STRING), "[^0-9]", ""), 11) WHEN market= "DK" THEN LEFT(REGEXP_REPLACE(CAST(raw.national_id AS STRING), "[^0-9]", ""), 10) WHEN market= "FI" THEN LEFT(REGEXP_REPLACE(UPPER(CAST(raw.national_id AS STRING)), "[^0-9-+A-Z]", ""), 11) END AS ssn_clean FROM`sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_sambq_p` raw) SELECT ARRAY(SELECT STRUCT(f_partnerComments.date, CASE WHEN f_partnerComments.text IS NOT NULL  AND f_partnerComments.text <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(f_partnerComments.text AS STRING), VAULT.uuid)) ELSE CAST(f_partnerComments.text AS STRING) END AS text, f_partnerComments._id, CASE WHEN f_partnerComments.userName IS NOT NULL  AND f_partnerComments.userName <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(f_partnerComments.userName AS STRING), VAULT.uuid)) ELSE CAST(f_partnerComments.userName AS STRING) END AS userName, f_partnerComments.removalReason, f_partnerComments.user) FROM UNNEST(partnerComments) AS f_partnerComments) AS partnerComments, ARRAY(SELECT CASE WHEN f_comments IS NOT NULL AND f_comments <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(f_comments AS STRING), VAULT.uuid)) ELSE CAST(f_comments AS STRING) END  FROM UNNEST(comments) AS f_comments) AS comments, CASE WHEN raw.bank IS NOT NULL  AND raw.bank <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.bank AS STRING), VAULT.uuid)) ELSE CAST(raw.bank AS STRING) END AS bank, CASE WHEN raw.originIPAddress IS NOT NULL  AND raw.originIPAddress <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.originIPAddress AS STRING), VAULT.uuid)) ELSE CAST(raw.originIPAddress AS STRING) END AS originIPAddress, CASE WHEN raw.address IS NOT NULL  AND raw.address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.address AS STRING), VAULT.uuid)) ELSE CAST(raw.address AS STRING) END AS address, CASE WHEN raw.postalCode IS NOT NULL  AND raw.postalCode <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.postalCode AS STRING), VAULT.uuid)) ELSE CAST(raw.postalCode AS STRING) END AS postalCode, CASE WHEN raw.organizationNumber IS NOT NULL  AND raw.organizationNumber <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.organizationNumber AS STRING), VAULT.uuid)) ELSE CAST(raw.organizationNumber AS STRING) END AS organizationNumber, CASE WHEN raw.postalArea IS NOT NULL  AND raw.postalArea <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.postalArea AS STRING), VAULT.uuid)) ELSE CAST(raw.postalArea AS STRING) END AS postalArea, CASE WHEN raw.name IS NOT NULL  AND raw.name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.name AS STRING), VAULT.uuid)) ELSE CAST(raw.name AS STRING) END AS name, CASE WHEN raw.person IS NOT NULL  AND raw.person <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.person AS STRING), VAULT.uuid)) ELSE CAST(raw.person AS STRING) END AS person, CASE WHEN raw.national_id IS NOT NULL  AND raw.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.national_id AS STRING) END AS national_id, raw.* EXCEPT(bank, comments, originIPAddress, allPaidOutByAdvisa, partnerComments, address, postalCode, organizationNumber, postalArea, name, person, national_id),CASE WHEN (CAST(raw.national_id AS STRING) IS NOT NULL AND CAST(raw.national_id AS STRING) <> "" AND CAST(raw.national_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.national_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_legacy_integration_legacy|applications_invites_sambq_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_invites_sambq_p`
advisa_history_integration_legacy|applications_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.applications_adhis_r`
advisa_history_integration_legacy|applicants_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.applicants_adhis_r`
advisa_history_integration_legacy|payment_insurance_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.payment_insurance_adhis_r`
advisa_history_integration_legacy|insurance_repayments_mutual_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.insurance_repayments_mutual_adhis_r`
advisa_history_integration_legacy|tags_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.tags_adhis_r`
advisa_history_integration_legacy|invites_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.invites_adhis_r`
advisa_history_integration_legacy|insurance_partners_mdn_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.insurance_partners_mdn_adhis_r`
advisa_history_integration_legacy|subscription_month_invoice_items_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.subscription_month_invoice_items_adhis_r`
advisa_history_integration_legacy|insurance_invoice_lines_mutual_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.insurance_invoice_lines_mutual_adhis_r`
advisa_history_integration_legacy|payments_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.payments_adhis_r`
advisa_history_integration_legacy|insurance_payment_insurances_mutual_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.insurance_payment_insurances_mutual_adhis_r`
advisa_history_integration_legacy|insurance_policy_products_mdn_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.insurance_policy_products_mdn_adhis_r`
advisa_history_integration_legacy|invoices_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.invoices_adhis_r`
advisa_history_integration_legacy|insurance_invoices_mutual_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.insurance_invoices_mutual_adhis_r`
advisa_history_integration_legacy|insurance_insurance_invoices_mutual_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.insurance_insurance_invoices_mutual_adhis_r`
advisa_history_integration_legacy|insurance_cancellations_mdn_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.insurance_cancellations_mdn_adhis_r`
advisa_history_integration_legacy|payment_insurance_levels_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.payment_insurance_levels_adhis_r`
advisa_history_integration_legacy|pageviews_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.pageviews_adhis_r`
advisa_history_integration_legacy|credit_report_groups_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.credit_report_groups_adhis_r`
advisa_history_integration_legacy|insurance_invoice_items_mutual_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.insurance_invoice_items_mutual_adhis_r`
advisa_history_integration_legacy|interactions_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.interactions_adhis_r`
advisa_history_integration_legacy|credit_report_group_items_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.credit_report_group_items_adhis_r`
advisa_history_integration_legacy|bids_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.bids_adhis_r`
advisa_history_integration_legacy|people_adhis_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(CAST(raw.national_id_sensitive AS STRING), "[^0-9]", ""), 12) AS ssn_clean FROM`sambla-data-staging-compliance.advisa_history_integration_legacy.people_adhis_r` raw) SELECT CASE WHEN raw.national_id_sensitive IS NOT NULL  AND raw.national_id_sensitive <> 0 AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.national_id_sensitive AS STRING), VAULT.uuid)) ELSE CAST(raw.national_id_sensitive AS STRING) END AS national_id_sensitive, raw.* EXCEPT(national_id_sensitive),CASE WHEN (CAST(raw.national_id_sensitive AS STRING) IS NOT NULL AND CAST(raw.national_id_sensitive AS STRING) <> "" AND CAST(raw.national_id_sensitive AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.national_id_sensitive AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
advisa_history_integration_legacy|creditors_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.creditors_adhis_r`
advisa_history_integration_legacy|insurance_customers_mdn_adhis_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(CAST(raw.customer_ssn AS STRING), "[^0-9]", ""), 12) AS ssn_clean FROM`sambla-data-staging-compliance.advisa_history_integration_legacy.insurance_customers_mdn_adhis_r` raw) SELECT CASE WHEN raw.customer_organisation_name IS NOT NULL  AND raw.customer_organisation_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.customer_organisation_name AS STRING), VAULT.uuid)) ELSE CAST(raw.customer_organisation_name AS STRING) END AS customer_organisation_name, CASE WHEN raw.customer_organisation_number IS NOT NULL  AND raw.customer_organisation_number <> 0 AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.customer_organisation_number AS STRING), VAULT.uuid)) ELSE CAST(raw.customer_organisation_number AS STRING) END AS customer_organisation_number, CASE WHEN raw.customer_first_name IS NOT NULL  AND raw.customer_first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.customer_first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.customer_first_name AS STRING) END AS customer_first_name, CASE WHEN raw.customer_last_name IS NOT NULL  AND raw.customer_last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.customer_last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.customer_last_name AS STRING) END AS customer_last_name, CASE WHEN raw.customer_address IS NOT NULL  AND raw.customer_address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.customer_address AS STRING), VAULT.uuid)) ELSE CAST(raw.customer_address AS STRING) END AS customer_address, CASE WHEN raw.customer_address2 IS NOT NULL  AND raw.customer_address2 <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.customer_address2 AS STRING), VAULT.uuid)) ELSE CAST(raw.customer_address2 AS STRING) END AS customer_address2, CASE WHEN raw.customer_postal_code IS NOT NULL  AND raw.customer_postal_code <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.customer_postal_code AS STRING), VAULT.uuid)) ELSE CAST(raw.customer_postal_code AS STRING) END AS customer_postal_code, CASE WHEN raw.customer_city IS NOT NULL  AND raw.customer_city <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.customer_city AS STRING), VAULT.uuid)) ELSE CAST(raw.customer_city AS STRING) END AS customer_city, CASE WHEN raw.customer_state IS NOT NULL  AND raw.customer_state <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.customer_state AS STRING), VAULT.uuid)) ELSE CAST(raw.customer_state AS STRING) END AS customer_state, CASE WHEN raw.customer_country_name IS NOT NULL  AND raw.customer_country_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.customer_country_name AS STRING), VAULT.uuid)) ELSE CAST(raw.customer_country_name AS STRING) END AS customer_country_name, CASE WHEN raw.customer_ssn IS NOT NULL  AND raw.customer_ssn <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.customer_ssn AS STRING), VAULT.uuid)) ELSE CAST(raw.customer_ssn AS STRING) END AS customer_ssn, CASE WHEN raw.customer_phone IS NOT NULL  AND raw.customer_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.customer_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.customer_phone AS STRING) END AS customer_phone, CASE WHEN raw.customer_email IS NOT NULL  AND raw.customer_email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.customer_email AS STRING), VAULT.uuid)) ELSE CAST(raw.customer_email AS STRING) END AS customer_email, CASE WHEN raw.customer_passport_number IS NOT NULL  AND raw.customer_passport_number <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.customer_passport_number AS STRING), VAULT.uuid)) ELSE CAST(raw.customer_passport_number AS STRING) END AS customer_passport_number, CASE WHEN raw.customer_passport_issuance_country_name IS NOT NULL  AND raw.customer_passport_issuance_country_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.customer_passport_issuance_country_name AS STRING), VAULT.uuid)) ELSE CAST(raw.customer_passport_issuance_country_name AS STRING) END AS customer_passport_issuance_country_name, raw.* EXCEPT(customer_organisation_name, customer_organisation_number, customer_first_name, customer_last_name, customer_address, customer_address2, customer_postal_code, customer_city, customer_state, customer_country_name, customer_ssn, customer_phone, customer_email, customer_passport_number, customer_passport_issuance_country_name),CASE WHEN (CAST(raw.customer_ssn AS STRING) IS NOT NULL AND CAST(raw.customer_ssn AS STRING) <> "" AND CAST(raw.customer_ssn AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.customer_ssn AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
advisa_history_integration_legacy|insurance_users_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.insurance_users_adhis_r`
advisa_history_integration_legacy|advisor_users_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.advisor_users_adhis_r`
advisa_history_integration_legacy|credit_report_details_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.credit_report_details_adhis_r`
advisa_history_integration_legacy|archived_ssn|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(CAST(raw.national_id AS STRING), "[^0-9]", ""), 12) AS ssn_clean FROM`sambla-data-staging-compliance.advisa_history_integration_legacy.archived_ssn` raw) SELECT CASE WHEN raw.national_id IS NOT NULL  AND raw.national_id <> 0 AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.national_id AS STRING) END AS national_id, raw.* EXCEPT(national_id),CASE WHEN (CAST(raw.national_id AS STRING) IS NOT NULL AND CAST(raw.national_id AS STRING) <> "" AND CAST(raw.national_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.national_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
advisa_history_integration_legacy|cookies_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.cookies_adhis_r`
advisa_history_integration_legacy|insurance_payment_insurance_levels_mutual_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.insurance_payment_insurance_levels_mutual_adhis_r`
advisa_history_integration_legacy|insurance_partners_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.insurance_partners_adhis_r`
advisa_history_integration_legacy|insurance_payments_mutual_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.insurance_payments_mutual_adhis_r`
advisa_history_integration_legacy|insurance_transactions_mdn_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.insurance_transactions_mdn_adhis_r`
advisa_history_integration_legacy|credit_reports_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.credit_reports_adhis_r`
advisa_history_integration_legacy|insurance_policies_mdn_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.insurance_policies_mdn_adhis_r`
advisa_history_integration_legacy|payment_insurances_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.payment_insurances_adhis_r`
advisa_history_integration_legacy|subscriptions_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.subscriptions_adhis_r`
advisa_history_integration_legacy|insurance_users_mdn_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.insurance_users_mdn_adhis_r`
advisa_history_integration_legacy|insurance_payment_insurance_logs_mutual_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.insurance_payment_insurance_logs_mutual_adhis_r`
advisa_history_integration_legacy|insurance_policy_types_mdn_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.insurance_policy_types_mdn_adhis_r`
advisa_history_integration_legacy|invoice_items_adhis_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.advisa_history_integration_legacy.invoice_items_adhis_r`
salus_group_integration|applicants_salus_incremental_r|WITH data_with_ssn_rules AS (SELECT *, CASE WHEN country_code= "SE" THEN LEFT(REGEXP_REPLACE(CAST(raw.ssn AS STRING), "[^0-9]", ""), 12) WHEN country_code= "NO" THEN LEFT(REGEXP_REPLACE(CAST(raw.ssn AS STRING), "[^0-9]", ""), 11) WHEN country_code= "DK" THEN LEFT(REGEXP_REPLACE(CAST(raw.ssn AS STRING), "[^0-9]", ""), 10) WHEN country_code= "FI" THEN LEFT(REGEXP_REPLACE(UPPER(CAST(raw.ssn AS STRING)), "[^0-9-+A-Z]", ""), 11) END AS ssn_clean FROM`data-domain-data-warehouse.salus_group_integration.applicants_salus_incremental_r` raw) SELECT CASE WHEN raw.firstname IS NOT NULL  AND raw.firstname <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.firstname AS STRING), VAULT.uuid)) ELSE CAST(raw.firstname AS STRING) END AS firstname, CASE WHEN raw.lastname IS NOT NULL  AND raw.lastname <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.lastname AS STRING), VAULT.uuid)) ELSE CAST(raw.lastname AS STRING) END AS lastname, CASE WHEN raw.email IS NOT NULL  AND raw.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.email AS STRING), VAULT.uuid)) ELSE CAST(raw.email AS STRING) END AS email, CASE WHEN raw.phone IS NOT NULL  AND raw.phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.phone AS STRING), VAULT.uuid)) ELSE CAST(raw.phone AS STRING) END AS phone, CASE WHEN raw.ssn IS NOT NULL  AND raw.ssn <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.ssn AS STRING), VAULT.uuid)) ELSE CAST(raw.ssn AS STRING) END AS ssn, CASE WHEN raw.address IS NOT NULL  AND raw.address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.address AS STRING), VAULT.uuid)) ELSE CAST(raw.address AS STRING) END AS address, CASE WHEN raw.city IS NOT NULL  AND raw.city <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.city AS STRING), VAULT.uuid)) ELSE CAST(raw.city AS STRING) END AS city, CASE WHEN raw.zip IS NOT NULL  AND raw.zip <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.zip AS STRING), VAULT.uuid)) ELSE CAST(raw.zip AS STRING) END AS zip, raw.* EXCEPT(firstname, lastname, email, phone, ssn, address, city, zip),CASE WHEN (CAST(raw.ssn AS STRING) IS NOT NULL AND CAST(raw.ssn AS STRING) <> "" AND CAST(raw.ssn AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.ssn AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
salus_group_integration|bids_salus_incremental_r|SELECT *, False AS is_anonymised FROM `data-domain-data-warehouse.salus_group_integration.bids_salus_incremental_r`
salus_group_integration|clicks_salus_incremental_r|SELECT *, False AS is_anonymised FROM `data-domain-data-warehouse.salus_group_integration.clicks_salus_incremental_r`
salus_group_integration|credit_reports_salus_incremental_r|SELECT *, False AS is_anonymised FROM `data-domain-data-warehouse.salus_group_integration.credit_reports_salus_incremental_r`
salus_group_integration|applicant-accommodations_salus_incremental_r|SELECT *, False AS is_anonymised FROM `data-domain-data-warehouse.salus_group_integration.applicant-accommodations_salus_incremental_r`
salus_group_integration|commision-rules_salus_incremental_r|SELECT *, False AS is_anonymised FROM `data-domain-data-warehouse.salus_group_integration.commision-rules_salus_incremental_r`
salus_group_integration|applications_salus_incremental_r|SELECT *, False AS is_anonymised FROM `data-domain-data-warehouse.salus_group_integration.applications_salus_incremental_r`
salus_group_integration|accounts_salus_incremental_r|SELECT *, False AS is_anonymised FROM `data-domain-data-warehouse.salus_group_integration.accounts_salus_incremental_r`
salus_group_integration|whitelabels_salus_incremental_r|SELECT *, False AS is_anonymised FROM `data-domain-data-warehouse.salus_group_integration.whitelabels_salus_incremental_r`
salus_group_integration|tracking_salus_incremental_r|SELECT *, False AS is_anonymised FROM `data-domain-data-warehouse.salus_group_integration.tracking_salus_incremental_r`
salus_group_integration|applicant-jobs_salus_incremental_r|SELECT *, False AS is_anonymised FROM `data-domain-data-warehouse.salus_group_integration.applicant-jobs_salus_incremental_r`
salus_group_integration|applicant-loans_salus_incremental_r|SELECT *, False AS is_anonymised FROM `data-domain-data-warehouse.salus_group_integration.applicant-loans_salus_incremental_r`
salus_group_integration|clicks-applications_salus_incremental_r|SELECT *, False AS is_anonymised FROM `data-domain-data-warehouse.salus_group_integration.clicks-applications_salus_incremental_r`
salus_group_integration|invitations_salus_incremental_r|SELECT *, False AS is_anonymised FROM `data-domain-data-warehouse.salus_group_integration.invitations_salus_incremental_r`
salus_integration_legacy|invitations_salus_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.salus_integration_legacy.invitations_salus_r`
salus_integration_legacy|accounts_salus_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.salus_integration_legacy.accounts_salus_r`
salus_integration_legacy|whitelabels_salus_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.salus_integration_legacy.whitelabels_salus_r`
salus_integration_legacy|credit_reports_salus_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.salus_integration_legacy.credit_reports_salus_r`
salus_integration_legacy|commision-rules_salus_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.salus_integration_legacy.commision-rules_salus_r`
salus_integration_legacy|clicks_salus_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.salus_integration_legacy.clicks_salus_r`
salus_integration_legacy|applicants_salus_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.salus_integration_legacy.applicants_salus_r`
salus_integration_legacy|tracking_salus_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.salus_integration_legacy.tracking_salus_r`
salus_integration_legacy|applicant-loans_salus_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.salus_integration_legacy.applicant-loans_salus_r`
salus_integration_legacy|applicant-jobs_salus_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.salus_integration_legacy.applicant-jobs_salus_r`
salus_integration_legacy|bids_salus_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.salus_integration_legacy.bids_salus_r`
salus_integration_legacy|applicant-accommodations_salus_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.salus_integration_legacy.applicant-accommodations_salus_r`
salus_integration_legacy|clicks-applications_salus_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.salus_integration_legacy.clicks-applications_salus_r`
salus_integration_legacy|applications_salus_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.salus_integration_legacy.applications_salus_r`
sambla_legacy_integration_legacy|applications_past_report_requests_sambq_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_past_report_requests_sambq_p`
sambla_legacy_integration_legacy|applications_utmhistory_sambq_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_utmhistory_sambq_p`
sambla_legacy_integration_legacy|applications_estates_sambq_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_estates_sambq_p`
sambla_legacy_integration_legacy|users_sambq_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.users_sambq_p`
sambla_legacy_integration_legacy|applications_all_versions_sambq_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_all_versions_sambq_p`
sambla_legacy_integration_legacy|applications_excludebanks_sambq_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_excludebanks_sambq_p`
sambla_legacy_integration_legacy|applications_customers_sambq_p|WITH data_with_ssn_rules AS (SELECT *, CASE WHEN coalesce(market, citizenship)= "SE" THEN LEFT(REGEXP_REPLACE(CAST(raw.idNumber AS STRING), "[^0-9]", ""), 12) WHEN coalesce(market, citizenship)= "NO" THEN LEFT(REGEXP_REPLACE(CAST(raw.idNumber AS STRING), "[^0-9]", ""), 11) WHEN coalesce(market, citizenship)= "DK" THEN LEFT(REGEXP_REPLACE(CAST(raw.idNumber AS STRING), "[^0-9]", ""), 10) WHEN coalesce(market, citizenship)= "FI" THEN LEFT(REGEXP_REPLACE(UPPER(CAST(raw.idNumber AS STRING)), "[^0-9-+A-Z]", ""), 11) END AS ssn_clean FROM`sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_customers_sambq_p` raw) SELECT CASE WHEN raw.first_name IS NOT NULL  AND raw.first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.first_name AS STRING) END AS first_name, CASE WHEN raw.last_name IS NOT NULL  AND raw.last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.last_name AS STRING) END AS last_name, CASE WHEN raw.postalArea IS NOT NULL  AND raw.postalArea <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.postalArea AS STRING), VAULT.uuid)) ELSE CAST(raw.postalArea AS STRING) END AS postalArea, CASE WHEN raw.address IS NOT NULL  AND raw.address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.address AS STRING), VAULT.uuid)) ELSE CAST(raw.address AS STRING) END AS address, CASE WHEN raw.email IS NOT NULL  AND raw.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.email AS STRING), VAULT.uuid)) ELSE CAST(raw.email AS STRING) END AS email, CASE WHEN raw.idNumber IS NOT NULL  AND raw.idNumber <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.idNumber AS STRING), VAULT.uuid)) ELSE CAST(raw.idNumber AS STRING) END AS idNumber, CASE WHEN raw.employerPhone IS NOT NULL  AND raw.employerPhone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.employerPhone AS STRING), VAULT.uuid)) ELSE CAST(raw.employerPhone AS STRING) END AS employerPhone, CASE WHEN raw.employer IS NOT NULL  AND raw.employer <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.employer AS STRING), VAULT.uuid)) ELSE CAST(raw.employer AS STRING) END AS employer, CASE WHEN raw.business_organization_number IS NOT NULL  AND raw.business_organization_number <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.business_organization_number AS STRING), VAULT.uuid)) ELSE CAST(raw.business_organization_number AS STRING) END AS business_organization_number, CASE WHEN raw.phoneNumber IS NOT NULL  AND raw.phoneNumber <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.phoneNumber AS STRING), VAULT.uuid)) ELSE CAST(raw.phoneNumber AS STRING) END AS phoneNumber, CASE WHEN raw.postalCode IS NOT NULL  AND raw.postalCode <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.postalCode AS STRING), VAULT.uuid)) ELSE CAST(raw.postalCode AS STRING) END AS postalCode, CASE WHEN raw.accountNumber IS NOT NULL  AND raw.accountNumber <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.accountNumber AS STRING), VAULT.uuid)) ELSE CAST(raw.accountNumber AS STRING) END AS accountNumber, CASE WHEN raw.clearingNumber IS NOT NULL  AND raw.clearingNumber <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.clearingNumber AS STRING), VAULT.uuid)) ELSE CAST(raw.clearingNumber AS STRING) END AS clearingNumber, raw.* EXCEPT(first_name, last_name, postalArea, address, email, idNumber, employerPhone, employer, business_organization_number, phoneNumber, postalCode, accountNumber, clearingNumber),CASE WHEN (CAST(raw.idNumber AS STRING) IS NOT NULL AND CAST(raw.idNumber AS STRING) <> "" AND CAST(raw.idNumber AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.idNumber AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_legacy_integration_legacy|applications_bids_sambq_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_bids_sambq_p`
sambla_legacy_integration_legacy|applications_loans_sambq_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_loans_sambq_p`
sambla_legacy_integration_legacy|applications_credit_reports_sambq_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_credit_reports_sambq_p`
sambla_legacy_integration_legacy|applications_allpaidoutbysambla_sambq_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_allpaidoutbysambla_sambq_p`
sambla_legacy_integration_legacy|applications_scheduledcalls_sambq_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_scheduledcalls_sambq_p`
sambla_legacy_integration_legacy|applications_internalcomments_sambq_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_internalcomments_sambq_p`
sambla_legacy_integration_legacy|banks_sambq_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.banks_sambq_p`
sambla_legacy_integration_legacy|applications_version_sambq_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_version_sambq_p`
sambla_legacy_integration_legacy|unsubscriptions_sambq_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.unsubscriptions_sambq_p`
rahalaitos_integration_legacy|marketing_marketing_ban_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.marketing_marketing_ban_raha_r`
rahalaitos_integration_legacy|insurance_agreement_type_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_agreement_type_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_decision_data_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_decision_data_raha_r`
rahalaitos_integration_legacy|insurance_insurance_details_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_insurance_details_raha_r`
rahalaitos_integration_legacy|rahalaitos_campaign_bing_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_campaign_bing_raha_r`
rahalaitos_integration_legacy|insurance_insurance_product_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_insurance_product_raha_r`
rahalaitos_integration_legacy|insurance_history_type_priority_level_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_history_type_priority_level_raha_r`
rahalaitos_integration_legacy|insurance_insurance_response_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_insurance_response_raha_r`
rahalaitos_integration_legacy|rahalaitos_campaign_whitelabel_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_campaign_whitelabel_raha_r`
rahalaitos_integration_legacy|rahalaitos_campaign_bing_sent_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_campaign_bing_sent_raha_r`
rahalaitos_integration_legacy|marketing_applicant_business_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.marketing_applicant_business_raha_r`
rahalaitos_integration_legacy|marketing_applicant_raha_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.sotu AS STRING)), "[^0-9-+A-Z]", ""), 11) AS ssn_clean FROM`sambla-data-staging-compliance.rahalaitos_integration_legacy.marketing_applicant_raha_r` raw) SELECT CASE WHEN raw.sotu IS NOT NULL  AND raw.sotu <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.sotu AS STRING), VAULT.uuid)) ELSE CAST(raw.sotu AS STRING) END AS sotu, CASE WHEN raw.etunimi IS NOT NULL  AND raw.etunimi <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.etunimi AS STRING), VAULT.uuid)) ELSE CAST(raw.etunimi AS STRING) END AS etunimi, CASE WHEN raw.sukunimi IS NOT NULL  AND raw.sukunimi <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.sukunimi AS STRING), VAULT.uuid)) ELSE CAST(raw.sukunimi AS STRING) END AS sukunimi, CASE WHEN raw.puhelin IS NOT NULL  AND raw.puhelin <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.puhelin AS STRING), VAULT.uuid)) ELSE CAST(raw.puhelin AS STRING) END AS puhelin, CASE WHEN raw.email IS NOT NULL  AND raw.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.email AS STRING), VAULT.uuid)) ELSE CAST(raw.email AS STRING) END AS email, CASE WHEN raw.osoite IS NOT NULL  AND raw.osoite <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.osoite AS STRING), VAULT.uuid)) ELSE CAST(raw.osoite AS STRING) END AS osoite, CASE WHEN raw.kaupunki IS NOT NULL  AND raw.kaupunki <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.kaupunki AS STRING), VAULT.uuid)) ELSE CAST(raw.kaupunki AS STRING) END AS kaupunki, CASE WHEN raw.postinro IS NOT NULL  AND raw.postinro <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.postinro AS STRING), VAULT.uuid)) ELSE CAST(raw.postinro AS STRING) END AS postinro, CASE WHEN raw.tili IS NOT NULL  AND raw.tili <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.tili AS STRING), VAULT.uuid)) ELSE CAST(raw.tili AS STRING) END AS tili, raw.* EXCEPT(sotu, etunimi, sukunimi, puhelin, email, osoite, kaupunki, postinro, tili),CASE WHEN (CAST(raw.sotu AS STRING) IS NOT NULL AND CAST(raw.sotu AS STRING) <> "" AND CAST(raw.sotu AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.sotu AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
rahalaitos_integration_legacy|rahalaitos_laina_yv_candidate_loans_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_yv_candidate_loans_raha_r`
rahalaitos_integration_legacy|rahalaitos_company_external_id_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_company_external_id_raha_r`
rahalaitos_integration_legacy|insurance_person_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_person_raha_r`
rahalaitos_integration_legacy|insurance_insurance_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_insurance_raha_r`
rahalaitos_integration_legacy|insurance_log_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_log_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_kieltolista_sms_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_kieltolista_sms_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_tags_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_tags_raha_r`
rahalaitos_integration_legacy|insurance_person_identify_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_person_identify_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_brands_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_brands_raha_r`
rahalaitos_integration_legacy|crm_user_roles_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.crm_user_roles_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_tag_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_tag_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_outpayment_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_outpayment_raha_r`
rahalaitos_integration_legacy|insurance_history_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_history_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_bankinfo_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_bankinfo_raha_r`
rahalaitos_integration_legacy|marketing_marketing_outpayment_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.marketing_marketing_outpayment_raha_r`
rahalaitos_integration_legacy|rahalaitos_company_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_company_raha_r`
rahalaitos_integration_legacy|rahalaitos_citizenShip_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_citizenShip_raha_r`
rahalaitos_integration_legacy|rahalaitos_company_types_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_company_types_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_decision_history_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_decision_history_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_rahoistuspaatos_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_rahoistuspaatos_raha_r`
rahalaitos_integration_legacy|rahalaitos_campaigninfo_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_campaigninfo_raha_r`
rahalaitos_integration_legacy|rahalaitos_loan_refinance_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_loan_refinance_raha_r`
rahalaitos_integration_legacy|crm_user_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.crm_user_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_send_queue_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_send_queue_raha_r`
rahalaitos_integration_legacy|insurance_agreement_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_agreement_raha_r`
rahalaitos_integration_legacy|rahalaitos_customer_preferences_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_customer_preferences_raha_r`
rahalaitos_integration_legacy|rahalaitos_application_page_origin_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_application_page_origin_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_companyinfo_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_companyinfo_raha_r`
rahalaitos_integration_legacy|rahalaitos_application_ispep_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_application_ispep_raha_r`
rahalaitos_integration_legacy|rahalaitos_campaign_groups_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_campaign_groups_raha_r`
rahalaitos_integration_legacy|insurance_postal_code_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_postal_code_raha_r`
rahalaitos_integration_legacy|insurance_person_information_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_person_information_raha_r`
rahalaitos_integration_legacy|rahalaitos_loan_application_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_loan_application_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_gallup_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_gallup_raha_r`
rahalaitos_integration_legacy|rahalaitos_campaign_facebook_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_campaign_facebook_raha_r`
rahalaitos_integration_legacy|rahalaitos_loan_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_loan_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_workinfo_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_workinfo_raha_r`
rahalaitos_integration_legacy|insurance_history_details_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_history_details_raha_r`
rahalaitos_integration_legacy|rahalaitos_customer_raha_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.ssn AS STRING)), "[^0-9-+A-Z]", ""), 11) AS ssn_clean FROM`sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_customer_raha_r` raw) SELECT CASE WHEN raw.ssn IS NOT NULL  AND raw.ssn <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.ssn AS STRING), VAULT.uuid)) ELSE CAST(raw.ssn AS STRING) END AS ssn, raw.* EXCEPT(ssn),CASE WHEN (CAST(raw.ssn AS STRING) IS NOT NULL AND CAST(raw.ssn AS STRING) <> "" AND CAST(raw.ssn AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.ssn AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
rahalaitos_integration_legacy|rahalaitos_incomplete_applications_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_incomplete_applications_r`
rahalaitos_integration_legacy|rahalaitos_all_customers_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_all_customers_r`
rahalaitos_integration_legacy|insurance_insurance_language_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_insurance_language_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_yv_candidateinfo_raha_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.yv_sotu AS STRING)), "[^0-9-+A-Z]", ""), 11) AS ssn_clean FROM`sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_yv_candidateinfo_raha_r` raw) SELECT CASE WHEN raw.yv_etunimi IS NOT NULL  AND raw.yv_etunimi <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.yv_etunimi AS STRING), VAULT.uuid)) ELSE CAST(raw.yv_etunimi AS STRING) END AS yv_etunimi, CASE WHEN raw.yv_sukunimi IS NOT NULL  AND raw.yv_sukunimi <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.yv_sukunimi AS STRING), VAULT.uuid)) ELSE CAST(raw.yv_sukunimi AS STRING) END AS yv_sukunimi, CASE WHEN raw.yv_osoite IS NOT NULL  AND raw.yv_osoite <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.yv_osoite AS STRING), VAULT.uuid)) ELSE CAST(raw.yv_osoite AS STRING) END AS yv_osoite, CASE WHEN raw.yv_postinro IS NOT NULL  AND raw.yv_postinro <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.yv_postinro AS STRING), VAULT.uuid)) ELSE CAST(raw.yv_postinro AS STRING) END AS yv_postinro, CASE WHEN raw.yv_kaupunki IS NOT NULL  AND raw.yv_kaupunki <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.yv_kaupunki AS STRING), VAULT.uuid)) ELSE CAST(raw.yv_kaupunki AS STRING) END AS yv_kaupunki, CASE WHEN raw.yv_puhelin IS NOT NULL  AND raw.yv_puhelin <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.yv_puhelin AS STRING), VAULT.uuid)) ELSE CAST(raw.yv_puhelin AS STRING) END AS yv_puhelin, CASE WHEN raw.yv_tyopuhelin IS NOT NULL  AND raw.yv_tyopuhelin <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.yv_tyopuhelin AS STRING), VAULT.uuid)) ELSE CAST(raw.yv_tyopuhelin AS STRING) END AS yv_tyopuhelin, CASE WHEN raw.yv_asuu IS NOT NULL  AND raw.yv_asuu <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.yv_asuu AS STRING), VAULT.uuid)) ELSE CAST(raw.yv_asuu AS STRING) END AS yv_asuu, CASE WHEN raw.yv_sotu IS NOT NULL  AND raw.yv_sotu <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.yv_sotu AS STRING), VAULT.uuid)) ELSE CAST(raw.yv_sotu AS STRING) END AS yv_sotu, CASE WHEN raw.yv_tyonantaja IS NOT NULL  AND raw.yv_tyonantaja <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.yv_tyonantaja AS STRING), VAULT.uuid)) ELSE CAST(raw.yv_tyonantaja AS STRING) END AS yv_tyonantaja, CASE WHEN raw.yv_tyonantajapuh IS NOT NULL  AND raw.yv_tyonantajapuh <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.yv_tyonantajapuh AS STRING), VAULT.uuid)) ELSE CAST(raw.yv_tyonantajapuh AS STRING) END AS yv_tyonantajapuh, CASE WHEN raw.yv_ytunnus IS NOT NULL  AND raw.yv_ytunnus <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.yv_ytunnus AS STRING), VAULT.uuid)) ELSE CAST(raw.yv_ytunnus AS STRING) END AS yv_ytunnus, CASE WHEN raw.yv_email IS NOT NULL  AND raw.yv_email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.yv_email AS STRING), VAULT.uuid)) ELSE CAST(raw.yv_email AS STRING) END AS yv_email, raw.* EXCEPT(yv_etunimi, yv_sukunimi, yv_osoite, yv_postinro, yv_kaupunki, yv_puhelin, yv_tyopuhelin, yv_asuu, yv_sotu, yv_tyonantaja, yv_tyonantajapuh, yv_ytunnus, yv_email),CASE WHEN (CAST(raw.yv_sotu AS STRING) IS NOT NULL AND CAST(raw.yv_sotu AS STRING) <> "" AND CAST(raw.yv_sotu AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.yv_sotu AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
rahalaitos_integration_legacy|insurance_insurance_status_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_insurance_status_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_orders_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_orders_raha_r`
rahalaitos_integration_legacy|insurance_insurance_application_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_insurance_application_raha_r`
rahalaitos_integration_legacy|rahalaitos_campaign_affiliate_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_campaign_affiliate_raha_r`
rahalaitos_integration_legacy|rahalaitos_loan_details_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_loan_details_raha_r`
rahalaitos_integration_legacy|rahalaitos_company_type_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_company_type_raha_r`
rahalaitos_integration_legacy|insurance_history_type_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_history_type_raha_r`
rahalaitos_integration_legacy|rahalaitos_marketing_email_temp_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_marketing_email_temp_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_login_persons_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_login_persons_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_contactinfo_raha_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.sotu AS STRING)), "[^0-9-+A-Z]", ""), 11) AS ssn_clean FROM`sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_contactinfo_raha_r` raw) SELECT CASE WHEN raw.etunimi IS NOT NULL  AND raw.etunimi <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.etunimi AS STRING), VAULT.uuid)) ELSE CAST(raw.etunimi AS STRING) END AS etunimi, CASE WHEN raw.sukunimi IS NOT NULL  AND raw.sukunimi <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.sukunimi AS STRING), VAULT.uuid)) ELSE CAST(raw.sukunimi AS STRING) END AS sukunimi, CASE WHEN raw.osoite IS NOT NULL  AND raw.osoite <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.osoite AS STRING), VAULT.uuid)) ELSE CAST(raw.osoite AS STRING) END AS osoite, CASE WHEN raw.postinro IS NOT NULL  AND raw.postinro <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.postinro AS STRING), VAULT.uuid)) ELSE CAST(raw.postinro AS STRING) END AS postinro, CASE WHEN raw.kaupunki IS NOT NULL  AND raw.kaupunki <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.kaupunki AS STRING), VAULT.uuid)) ELSE CAST(raw.kaupunki AS STRING) END AS kaupunki, CASE WHEN raw.puhelin IS NOT NULL  AND raw.puhelin <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.puhelin AS STRING), VAULT.uuid)) ELSE CAST(raw.puhelin AS STRING) END AS puhelin, CASE WHEN raw.tyopuhelin IS NOT NULL  AND raw.tyopuhelin <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.tyopuhelin AS STRING), VAULT.uuid)) ELSE CAST(raw.tyopuhelin AS STRING) END AS tyopuhelin, CASE WHEN raw.email IS NOT NULL  AND raw.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.email AS STRING), VAULT.uuid)) ELSE CAST(raw.email AS STRING) END AS email, CASE WHEN raw.sotu IS NOT NULL  AND raw.sotu <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.sotu AS STRING), VAULT.uuid)) ELSE CAST(raw.sotu AS STRING) END AS sotu, raw.* EXCEPT(etunimi, sukunimi, osoite, postinro, kaupunki, puhelin, tyopuhelin, email, sotu),CASE WHEN (CAST(raw.sotu AS STRING) IS NOT NULL AND CAST(raw.sotu AS STRING) <> "" AND CAST(raw.sotu AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.sotu AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
rahalaitos_integration_legacy|insurance_insurance_personal_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_insurance_personal_raha_r`
rahalaitos_integration_legacy|insurance_person_agent_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_person_agent_raha_r`
rahalaitos_integration_legacy|insurance_history_user_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_history_user_raha_r`
rahalaitos_integration_legacy|crm_role_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.crm_role_raha_r`
rahalaitos_integration_legacy|rahalaitos_campaign_google_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_campaign_google_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_loanorg_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_loanorg_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_gallup_fields_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_gallup_fields_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_adservicemedia_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_adservicemedia_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_businessinfo_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_businessinfo_raha_r`
rahalaitos_integration_legacy|insurance_insurance_gender_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_insurance_gender_raha_r`
rahalaitos_integration_legacy|rahalaitos_campaign_defaults_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_campaign_defaults_raha_r`
rahalaitos_integration_legacy|rahalaitos_campaign_groups_name_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_campaign_groups_name_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_generalinfo_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_generalinfo_raha_r`
rahalaitos_integration_legacy|marketing_external_marketing_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.marketing_external_marketing_raha_r`
rahalaitos_integration_legacy|insurance_insurance_sent_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_insurance_sent_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_decision_data_types_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_decision_data_types_raha_r`
rahalaitos_integration_legacy|rahalaitos_loan_applicant_type_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_loan_applicant_type_raha_r`
rahalaitos_integration_legacy|rahalaitos_loan_type_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_loan_type_raha_r`
rahalaitos_integration_legacy|rahalaitos_customer_counter_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_customer_counter_raha_r`
rahalaitos_integration_legacy|rahalaitos_marketing_sms_temp_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_marketing_sms_temp_raha_r`
rahalaitos_integration_legacy|insurance_history_username_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_history_username_raha_r`
maxwell_integration_legacy|query_params_sgmw_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.maxwell_integration_legacy.query_params_sgmw_p`
maxwell_integration_legacy|loan_application_drafts_sgmw_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.maxwell_integration_legacy.loan_application_drafts_sgmw_p`
maxwell_integration_legacy|customers_sgmw_p|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(CAST(raw.national_id AS STRING), "[^0-9]", ""), 12) AS ssn_clean FROM`sambla-data-staging-compliance.maxwell_integration_legacy.customers_sgmw_p` raw) SELECT CASE WHEN raw.street_address IS NOT NULL  AND raw.street_address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.street_address AS STRING), VAULT.uuid)) ELSE CAST(raw.street_address AS STRING) END AS street_address, CASE WHEN raw.mobile_phone IS NOT NULL  AND raw.mobile_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.mobile_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.mobile_phone AS STRING) END AS mobile_phone, CASE WHEN raw.email IS NOT NULL  AND raw.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.email AS STRING), VAULT.uuid)) ELSE CAST(raw.email AS STRING) END AS email, CASE WHEN raw.postal_code IS NOT NULL  AND raw.postal_code <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.postal_code AS STRING), VAULT.uuid)) ELSE CAST(raw.postal_code AS STRING) END AS postal_code, CASE WHEN raw.last_name IS NOT NULL  AND raw.last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.last_name AS STRING) END AS last_name, CASE WHEN raw.city IS NOT NULL  AND raw.city <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.city AS STRING), VAULT.uuid)) ELSE CAST(raw.city AS STRING) END AS city, CASE WHEN raw.national_id IS NOT NULL  AND raw.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.national_id AS STRING) END AS national_id, CASE WHEN raw.first_name IS NOT NULL  AND raw.first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.first_name AS STRING) END AS first_name, raw.* EXCEPT(street_address, mobile_phone, email, postal_code, last_name, city, national_id, first_name),CASE WHEN (CAST(raw.national_id AS STRING) IS NOT NULL AND CAST(raw.national_id AS STRING) <> "" AND CAST(raw.national_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.national_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
maxwell_integration_legacy|cookie_mappings_sgmw_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.maxwell_integration_legacy.cookie_mappings_sgmw_p`
maxwell_integration_legacy|bid_additional_requirements_sgmw_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.maxwell_integration_legacy.bid_additional_requirements_sgmw_p`
maxwell_integration_legacy|invite_logs_sgmw_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.maxwell_integration_legacy.invite_logs_sgmw_p`
maxwell_integration_legacy|current_loan_drafts_sgmw_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.maxwell_integration_legacy.current_loan_drafts_sgmw_p`
maxwell_integration_legacy|cookies_sgmw_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.maxwell_integration_legacy.cookies_sgmw_p`
maxwell_integration_legacy|policies_sgmw_p|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(CAST(raw.national_id AS STRING), "[^0-9]", ""), 12) AS ssn_clean FROM`sambla-data-staging-compliance.maxwell_integration_legacy.policies_sgmw_p` raw) SELECT CASE WHEN raw.national_id IS NOT NULL  AND raw.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.national_id AS STRING) END AS national_id, raw.* EXCEPT(national_id),CASE WHEN (CAST(raw.national_id AS STRING) IS NOT NULL AND CAST(raw.national_id AS STRING) <> "" AND CAST(raw.national_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.national_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
maxwell_integration_legacy|bid_accepts_sgmw_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.maxwell_integration_legacy.bid_accepts_sgmw_p`
maxwell_integration_legacy|sent_events_sgmw_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.maxwell_integration_legacy.sent_events_sgmw_p`
maxwell_integration_legacy|bids_sgmw_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.maxwell_integration_legacy.bids_sgmw_p`
maxwell_integration_legacy|bid_logs_sgmw_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.maxwell_integration_legacy.bid_logs_sgmw_p`
maxwell_integration_legacy|pageviews_sgmw_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.maxwell_integration_legacy.pageviews_sgmw_p`
maxwell_integration_legacy|loan_applications_sgmw_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.maxwell_integration_legacy.loan_applications_sgmw_p`
maxwell_integration_legacy|current_loans_sgmw_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.maxwell_integration_legacy.current_loans_sgmw_p`
maxwell_integration_legacy|loan_application_versions_sgmw_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.maxwell_integration_legacy.loan_application_versions_sgmw_p`
maxwell_integration_legacy|credit_report_latest_inquiries_sgmw_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.maxwell_integration_legacy.credit_report_latest_inquiries_sgmw_p`
maxwell_integration_legacy|credit_reports_sgmw_p|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(CAST(raw.national_id AS STRING), "[^0-9]", ""), 12) AS ssn_clean FROM`sambla-data-staging-compliance.maxwell_integration_legacy.credit_reports_sgmw_p` raw) SELECT CASE WHEN raw.national_id IS NOT NULL  AND raw.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.national_id AS STRING) END AS national_id, CASE WHEN raw.postal_code IS NOT NULL  AND raw.postal_code <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.postal_code AS STRING), VAULT.uuid)) ELSE CAST(raw.postal_code AS STRING) END AS postal_code, CASE WHEN raw.secret_address IS NOT NULL  AND raw.secret_address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.secret_address AS STRING), VAULT.uuid)) ELSE CAST(raw.secret_address AS STRING) END AS secret_address, CASE WHEN raw.temporary_address IS NOT NULL  AND raw.temporary_address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.temporary_address AS STRING), VAULT.uuid)) ELSE CAST(raw.temporary_address AS STRING) END AS temporary_address, CASE WHEN raw.street_address IS NOT NULL  AND raw.street_address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.street_address AS STRING), VAULT.uuid)) ELSE CAST(raw.street_address AS STRING) END AS street_address, CASE WHEN raw.city IS NOT NULL  AND raw.city <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.city AS STRING), VAULT.uuid)) ELSE CAST(raw.city AS STRING) END AS city, CASE WHEN raw.xml IS NOT NULL  AND raw.xml <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.xml AS STRING), VAULT.uuid)) ELSE CAST(raw.xml AS STRING) END AS xml, CASE WHEN raw.first_name IS NOT NULL  AND raw.first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.first_name AS STRING) END AS first_name, CASE WHEN raw.last_name IS NOT NULL  AND raw.last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.last_name AS STRING) END AS last_name, raw.* EXCEPT(national_id, postal_code, secret_address, temporary_address, street_address, city, xml, first_name, last_name),CASE WHEN (CAST(raw.national_id AS STRING) IS NOT NULL AND CAST(raw.national_id AS STRING) <> "" AND CAST(raw.national_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.national_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
maxwell_integration_legacy|credit_report_xml_extract_sgmw_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.maxwell_integration_legacy.credit_report_xml_extract_sgmw_p`
maxwell_integration_legacy|creditors_sgmw_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.maxwell_integration_legacy.creditors_sgmw_p`
maxwell_integration_legacy|applicant_drafts_sgmw_p|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(CAST(raw.national_id AS STRING), "[^0-9]", ""), 12) AS ssn_clean FROM`sambla-data-staging-compliance.maxwell_integration_legacy.applicant_drafts_sgmw_p` raw) SELECT CASE WHEN raw.national_id IS NOT NULL  AND raw.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.national_id AS STRING) END AS national_id, CASE WHEN raw.employer_name IS NOT NULL  AND raw.employer_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.employer_name AS STRING), VAULT.uuid)) ELSE CAST(raw.employer_name AS STRING) END AS employer_name, CASE WHEN raw.employer_phone IS NOT NULL  AND raw.employer_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.employer_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.employer_phone AS STRING) END AS employer_phone, CASE WHEN raw.first_name IS NOT NULL  AND raw.first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.first_name AS STRING) END AS first_name, CASE WHEN raw.postal_code IS NOT NULL  AND raw.postal_code <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.postal_code AS STRING), VAULT.uuid)) ELSE CAST(raw.postal_code AS STRING) END AS postal_code, CASE WHEN raw.email IS NOT NULL  AND raw.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.email AS STRING), VAULT.uuid)) ELSE CAST(raw.email AS STRING) END AS email, CASE WHEN raw.city IS NOT NULL  AND raw.city <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.city AS STRING), VAULT.uuid)) ELSE CAST(raw.city AS STRING) END AS city, CASE WHEN raw.last_name IS NOT NULL  AND raw.last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.last_name AS STRING) END AS last_name, CASE WHEN raw.street_address IS NOT NULL  AND raw.street_address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.street_address AS STRING), VAULT.uuid)) ELSE CAST(raw.street_address AS STRING) END AS street_address, CASE WHEN raw.mobile_phone IS NOT NULL  AND raw.mobile_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.mobile_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.mobile_phone AS STRING) END AS mobile_phone, raw.* EXCEPT(national_id, employer_name, employer_phone, first_name, postal_code, email, city, last_name, street_address, mobile_phone),CASE WHEN (CAST(raw.national_id AS STRING) IS NOT NULL AND CAST(raw.national_id AS STRING) <> "" AND CAST(raw.national_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.national_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
maxwell_integration_legacy|applicants_sgmw_p|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(CAST(raw.national_id AS STRING), "[^0-9]", ""), 12) AS ssn_clean FROM`sambla-data-staging-compliance.maxwell_integration_legacy.applicants_sgmw_p` raw) SELECT CASE WHEN raw.national_id IS NOT NULL  AND raw.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.national_id AS STRING) END AS national_id, CASE WHEN raw.employer_name IS NOT NULL  AND raw.employer_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.employer_name AS STRING), VAULT.uuid)) ELSE CAST(raw.employer_name AS STRING) END AS employer_name, CASE WHEN raw.employer_phone IS NOT NULL  AND raw.employer_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.employer_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.employer_phone AS STRING) END AS employer_phone, CASE WHEN raw.first_name IS NOT NULL  AND raw.first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.first_name AS STRING) END AS first_name, CASE WHEN raw.postal_code IS NOT NULL  AND raw.postal_code <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.postal_code AS STRING), VAULT.uuid)) ELSE CAST(raw.postal_code AS STRING) END AS postal_code, CASE WHEN raw.email IS NOT NULL  AND raw.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.email AS STRING), VAULT.uuid)) ELSE CAST(raw.email AS STRING) END AS email, CASE WHEN raw.city IS NOT NULL  AND raw.city <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.city AS STRING), VAULT.uuid)) ELSE CAST(raw.city AS STRING) END AS city, CASE WHEN raw.last_name IS NOT NULL  AND raw.last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.last_name AS STRING) END AS last_name, CASE WHEN raw.street_address IS NOT NULL  AND raw.street_address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.street_address AS STRING), VAULT.uuid)) ELSE CAST(raw.street_address AS STRING) END AS street_address, CASE WHEN raw.mobile_phone IS NOT NULL  AND raw.mobile_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.mobile_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.mobile_phone AS STRING) END AS mobile_phone, raw.* EXCEPT(national_id, employer_name, employer_phone, first_name, postal_code, email, city, last_name, street_address, mobile_phone),CASE WHEN (CAST(raw.national_id AS STRING) IS NOT NULL AND CAST(raw.national_id AS STRING) <> "" AND CAST(raw.national_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.national_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
maxwell_integration_legacy|invites_sgmw_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.maxwell_integration_legacy.invites_sgmw_p`
maxwell_integration_legacy|creditor_products_sgmw_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.maxwell_integration_legacy.creditor_products_sgmw_p`
lvs_integration_legacy|applicant_financials_lvs_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.lvs_integration_legacy.applicant_financials_lvs_p`
lvs_integration_legacy|applicant_consents_lvs_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.lvs_integration_legacy.applicant_consents_lvs_p`
lvs_integration_legacy|application_commissions_lvs_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.lvs_integration_legacy.application_commissions_lvs_p`
lvs_integration_legacy|credit_remarks_lvs_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.lvs_integration_legacy.credit_remarks_lvs_p`
lvs_integration_legacy|offer_states_lvs_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.lvs_integration_legacy.offer_states_lvs_p`
lvs_integration_legacy|providers_lvs_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.lvs_integration_legacy.providers_lvs_p`
lvs_integration_legacy|applications_lvs_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.lvs_integration_legacy.applications_lvs_p`
lvs_integration_legacy|applicant_cards_lvs_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.lvs_integration_legacy.applicant_cards_lvs_p`
lvs_integration_legacy|offers_lvs_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.lvs_integration_legacy.offers_lvs_p`
lvs_integration_legacy|clients_lvs_p|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.national_id AS STRING)), "[^0-9-+A-Z]", ""), 11) AS ssn_clean FROM`sambla-data-staging-compliance.lvs_integration_legacy.clients_lvs_p` raw) SELECT CASE WHEN raw.email IS NOT NULL  AND raw.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.email AS STRING), VAULT.uuid)) ELSE CAST(raw.email AS STRING) END AS email, CASE WHEN raw.phone IS NOT NULL  AND raw.phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.phone AS STRING), VAULT.uuid)) ELSE CAST(raw.phone AS STRING) END AS phone, CASE WHEN raw.post_code IS NOT NULL  AND raw.post_code <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.post_code AS STRING), VAULT.uuid)) ELSE CAST(raw.post_code AS STRING) END AS post_code, CASE WHEN raw.address IS NOT NULL  AND raw.address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.address AS STRING), VAULT.uuid)) ELSE CAST(raw.address AS STRING) END AS address, CASE WHEN raw.city IS NOT NULL  AND raw.city <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.city AS STRING), VAULT.uuid)) ELSE CAST(raw.city AS STRING) END AS city, CASE WHEN raw.last_name IS NOT NULL  AND raw.last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.last_name AS STRING) END AS last_name, CASE WHEN raw.first_name IS NOT NULL  AND raw.first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.first_name AS STRING) END AS first_name, CASE WHEN raw.national_id IS NOT NULL  AND raw.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.national_id AS STRING) END AS national_id, raw.* EXCEPT(email, phone, post_code, address, city, last_name, first_name, national_id),CASE WHEN (CAST(raw.national_id AS STRING) IS NOT NULL AND CAST(raw.national_id AS STRING) <> "" AND CAST(raw.national_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.national_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
lvs_integration_legacy|provider_commissions_lvs_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.lvs_integration_legacy.provider_commissions_lvs_p`
lvs_integration_legacy|applicants_lvs_p|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.ssn AS STRING)), "[^0-9-+A-Z]", ""), 11) AS ssn_clean FROM`sambla-data-staging-compliance.lvs_integration_legacy.applicants_lvs_p` raw) SELECT CASE WHEN raw.first_name IS NOT NULL  AND raw.first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.first_name AS STRING) END AS first_name, CASE WHEN raw.last_name IS NOT NULL  AND raw.last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.last_name AS STRING) END AS last_name, CASE WHEN raw.phone IS NOT NULL  AND raw.phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.phone AS STRING), VAULT.uuid)) ELSE CAST(raw.phone AS STRING) END AS phone, CASE WHEN raw.email IS NOT NULL  AND raw.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.email AS STRING), VAULT.uuid)) ELSE CAST(raw.email AS STRING) END AS email, CASE WHEN raw.ssn IS NOT NULL  AND raw.ssn <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.ssn AS STRING), VAULT.uuid)) ELSE CAST(raw.ssn AS STRING) END AS ssn, CASE WHEN raw.city IS NOT NULL  AND raw.city <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.city AS STRING), VAULT.uuid)) ELSE CAST(raw.city AS STRING) END AS city, CASE WHEN raw.post_code IS NOT NULL  AND raw.post_code <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.post_code AS STRING), VAULT.uuid)) ELSE CAST(raw.post_code AS STRING) END AS post_code, CASE WHEN raw.address IS NOT NULL  AND raw.address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.address AS STRING), VAULT.uuid)) ELSE CAST(raw.address AS STRING) END AS address, CASE WHEN raw.bank_bic IS NOT NULL  AND raw.bank_bic <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.bank_bic AS STRING), VAULT.uuid)) ELSE CAST(raw.bank_bic AS STRING) END AS bank_bic, CASE WHEN raw.bank_iban IS NOT NULL  AND raw.bank_iban <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.bank_iban AS STRING), VAULT.uuid)) ELSE CAST(raw.bank_iban AS STRING) END AS bank_iban, CASE WHEN raw.employment_business_id IS NOT NULL  AND raw.employment_business_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.employment_business_id AS STRING), VAULT.uuid)) ELSE CAST(raw.employment_business_id AS STRING) END AS employment_business_id, CASE WHEN raw.employer IS NOT NULL  AND raw.employer <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.employer AS STRING), VAULT.uuid)) ELSE CAST(raw.employer AS STRING) END AS employer, raw.* EXCEPT(first_name, last_name, phone, email, ssn, city, post_code, address, bank_bic, bank_iban, employment_business_id, employer),CASE WHEN (CAST(raw.ssn AS STRING) IS NOT NULL AND CAST(raw.ssn AS STRING) <> "" AND CAST(raw.ssn AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.ssn AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
