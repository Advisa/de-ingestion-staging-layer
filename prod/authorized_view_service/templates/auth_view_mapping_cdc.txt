sambla_group_data_stream|exp_loan_application_service_current_loan_drafts_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream.exp_loan_application_service_current_loan_drafts_sgds_r`
sambla_group_data_stream|exp_loan_application_service_current_loans_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream.exp_loan_application_service_current_loans_sgds_r`
sambla_group_data_stream|exp_loan_application_service_loan_applications_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream.exp_loan_application_service_loan_applications_sgds_r`
sambla_group_data_stream|exp_tracking_service_application_cookie_mappings_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream.exp_tracking_service_application_cookie_mappings_sgds_r`
sambla_group_data_stream|exp_tracking_service_cookies_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream.exp_tracking_service_cookies_sgds_r`
sambla_group_data_stream|exp_tracking_service_pageviews_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream.exp_tracking_service_pageviews_sgds_r`
sambla_group_data_stream|marketing_contact_service_cart_abandonment_contacts_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(CAST(raw.payload.national_id AS STRING), "[^0-9]", ""), 12) AS ssn_clean FROM`data-domain-data-warehouse.sambla_group_data_stream.marketing_contact_service_cart_abandonment_contacts_sgds_r` raw) SELECT STRUCT(raw.payload.citizenship, raw.payload.accept_news_letter, raw.payload.occupation_category, raw.payload.consolidation_amount, raw.payload.employment_to_month, raw.payload.employment_type, raw.payload.loan_purpose, raw.payload.employment_since, raw.payload.other_income_source, raw.payload.created_at, raw.payload.home_type_category, raw.payload.is_cart_abandonment, raw.payload.move_in_date, raw.payload.merge_loan, raw.payload.site_origin, raw.payload.id, raw.payload.other_monthly_income_after_tax, raw.payload.civil_status, CASE WHEN raw.payload.email IS NOT NULL  AND raw.payload.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.email AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.email AS STRING) END AS email, raw.payload.updated_at, raw.payload.home_cost, raw.payload.repayment_time, CASE WHEN raw.payload.business_organization_number IS NOT NULL  AND raw.payload.business_organization_number <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.business_organization_number AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.business_organization_number AS STRING) END AS business_organization_number, raw.payload.employment_to, raw.payload.military_service_status, raw.payload.monthly_income_after_tax, raw.payload.total_amount, raw.payload.education_level, CASE WHEN raw.payload.employer_name IS NOT NULL  AND raw.payload.employer_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.employer_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.employer_name AS STRING) END AS employer_name, raw.payload.rental_monthly_income_before_tax, raw.payload.occupation_title, raw.payload.bloomreach_cookie, raw.payload.business_registration_date, raw.payload.home_type, raw.payload.page, raw.payload.num_dependants, raw.payload.query_params, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, raw.payload.monthly_income_before_tax, raw.payload.monthly_salary, CASE WHEN raw.payload.mobile_phone IS NOT NULL  AND raw.payload.mobile_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.mobile_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.mobile_phone AS STRING) END AS mobile_phone, CASE WHEN raw.payload.employment_industry IS NOT NULL  AND raw.payload.employment_industry <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.employment_industry AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.employment_industry AS STRING) END AS employment_industry, raw.payload.prefill_token, raw.payload.other_income, raw.payload.employment_since_month, raw.payload.other_monthly_income_before_tax, raw.payload.spouse_monthly_income_before_tax, raw.payload.internal_cookie) AS payload, raw.* EXCEPT(payload),CASE WHEN (raw.payload.national_id IS NOT NULL AND raw.payload.national_id <> "" AND VAULT.uuid IS NOT NULL) OR LOWER(raw.payload.national_id) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream|payments_api_Invoice_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream.payments_api_Invoice_sgds_r`
sambla_group_data_stream|payments_api_PaymentDetail_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream.payments_api_PaymentDetail_sgds_r`
sambla_group_data_stream|payments_api_Payment_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream.payments_api_Payment_sgds_r`
sambla_group_data_stream|payments_api_Price_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream.payments_api_Price_sgds_r`
sambla_group_data_stream|payments_api_Product_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream.payments_api_Product_sgds_r`
sambla_group_data_stream|payments_api__PaymentToProduct_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream.payments_api__PaymentToProduct_sgds_r`
sambla_group_data_stream|uc_service_credit_reports_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(CAST(raw.payload.national_id AS STRING), "[^0-9]", ""), 12) AS ssn_clean FROM`data-domain-data-warehouse.sambla_group_data_stream.uc_service_credit_reports_sgds_r` raw) SELECT STRUCT(CASE WHEN raw.payload.street_address IS NOT NULL  AND raw.payload.street_address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.street_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.street_address AS STRING) END AS street_address, raw.payload.template_code, raw.payload.taxed_year, raw.payload.blocked_code, raw.payload.minor, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, raw.payload.creditor_code, raw.payload.country, raw.payload.previous_taxed_year, CASE WHEN raw.payload.temporary_address IS NOT NULL  AND raw.payload.temporary_address <> 0 AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.temporary_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.temporary_address AS STRING) END AS temporary_address, CASE WHEN raw.payload.last_name IS NOT NULL  AND raw.payload.last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_name AS STRING) END AS last_name, raw.payload.capital_deficit, raw.payload.id, raw.payload.number_of_payment_complaints, raw.payload.major_city_inhabitant, raw.payload.template_passed, raw.payload.previous_taxed_annual_income, raw.payload.product_type, raw.payload.debt_reconciliation_date, CASE WHEN raw.payload.secret_address IS NOT NULL  AND raw.payload.secret_address <> 0 AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.secret_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.secret_address AS STRING) END AS secret_address, raw.payload.no_visit_address, CASE WHEN raw.payload.xml IS NOT NULL  AND raw.payload.xml <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.xml AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.xml AS STRING) END AS xml, raw.payload.customer_id, raw.payload.latest_payment_complaint, CASE WHEN raw.payload.postal_code IS NOT NULL  AND raw.payload.postal_code <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.postal_code AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.postal_code AS STRING) END AS postal_code, raw.payload.number_of_reports_12_months, raw.payload.fetched_at, raw.payload.applicant_draft_id, raw.payload.payment_complaint, raw.payload.trustee_appointed, raw.payload.has_debt_reconstruction, raw.payload.unregistered, raw.payload.blocked_description, raw.payload.previous_capital_deficit, raw.payload.uc_registration_date, CASE WHEN raw.payload.city IS NOT NULL  AND raw.payload.city <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.city AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.city AS STRING) END AS city, raw.payload.taxed_annual_income, CASE WHEN raw.payload.first_name IS NOT NULL  AND raw.payload.first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.first_name AS STRING) END AS first_name, raw.payload.score, raw.payload.debt_balance) AS payload, raw.* EXCEPT(payload),CASE WHEN (raw.payload.national_id IS NOT NULL AND raw.payload.national_id <> "" AND VAULT.uuid IS NOT NULL) OR LOWER(raw.payload.national_id) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream_fi|asiakastieto_service_credit_defaults_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.asiakastieto_service_credit_defaults_sgds_r`
sambla_group_data_stream|credit_report_service_credit_reports_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(CAST(raw.payload.national_id AS STRING), "[^0-9]", ""), 12) AS ssn_clean FROM`data-domain-data-warehouse.sambla_group_data_stream.credit_report_service_credit_reports_sgds_r` raw) SELECT STRUCT(raw.payload.product_type, raw.payload.score, raw.payload.taxed_annual_income, CASE WHEN raw.payload.street_address IS NOT NULL  AND raw.payload.street_address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.street_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.street_address AS STRING) END AS street_address, raw.payload.blocked_description, raw.payload.move_in_date, CASE WHEN raw.payload.last_name IS NOT NULL  AND raw.payload.last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_name AS STRING) END AS last_name, raw.payload.previous_taxed_annual_income, raw.payload.major_city_inhabitant, CASE WHEN raw.payload.temporary_address IS NOT NULL  AND raw.payload.temporary_address <> 0 AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.temporary_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.temporary_address AS STRING) END AS temporary_address, raw.payload.template_code, raw.payload.uc_registration_date, CASE WHEN raw.payload.xml IS NOT NULL  AND raw.payload.xml <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.xml AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.xml AS STRING) END AS xml, raw.payload.number_of_reports_12_months, raw.payload.debt_balance, raw.payload.number_of_payment_complaints, CASE WHEN raw.payload.city IS NOT NULL  AND raw.payload.city <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.city AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.city AS STRING) END AS city, raw.payload.blocked_code, raw.payload.id, raw.payload.no_visit_address, raw.payload.capital_deficit, raw.payload.previous_taxed_year, raw.payload.debt_reconciliation_date, raw.payload.template_passed, CASE WHEN raw.payload.secret_address IS NOT NULL  AND raw.payload.secret_address <> 0 AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.secret_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.secret_address AS STRING) END AS secret_address, raw.payload.creditor_code, CASE WHEN raw.payload.first_name IS NOT NULL  AND raw.payload.first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.first_name AS STRING) END AS first_name, raw.payload.applicant_draft_id, raw.payload.taxed_year, raw.payload.trustee_appointed, raw.payload.minor, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, raw.payload.previous_capital_deficit, raw.payload.fetched_at, raw.payload.has_debt_reconstruction, raw.payload.payment_complaint, raw.payload.country, raw.payload.customer_id, raw.payload.latest_payment_complaint, CASE WHEN raw.payload.postal_code IS NOT NULL  AND raw.payload.postal_code <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.postal_code AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.postal_code AS STRING) END AS postal_code, raw.payload.unregistered) AS payload, raw.* EXCEPT(payload),CASE WHEN (raw.payload.national_id IS NOT NULL AND raw.payload.national_id <> "" AND VAULT.uuid IS NOT NULL) OR LOWER(raw.payload.national_id) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream|exp_bidding_service_bid_accepts_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream.exp_bidding_service_bid_accepts_sgds_r`
sambla_group_data_stream|exp_bidding_service_bidding_logs_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream.exp_bidding_service_bidding_logs_sgds_r`
sambla_group_data_stream|exp_bidding_service_bids_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream.exp_bidding_service_bids_sgds_r`
sambla_group_data_stream_fi|exp_bidding_service_creditor_products_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.exp_bidding_service_creditor_products_sgds_r`
sambla_group_data_stream_fi|exp_bidding_service_invites_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.exp_bidding_service_invites_sgds_r`
sambla_group_data_stream_fi|exp_customer_service_customers_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.payload.national_id AS STRING)), "[^0-9-+A-Z]", ""), 11) AS ssn_clean FROM`data-domain-data-warehouse.sambla_group_data_stream_fi.exp_customer_service_customers_sgds_r` raw) SELECT STRUCT(raw.payload.latest_credit_check_done_at, raw.payload.valid_national_id, CASE WHEN raw.payload.postal_code IS NOT NULL  AND raw.payload.postal_code <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.postal_code AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.postal_code AS STRING) END AS postal_code, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, CASE WHEN raw.payload.email IS NOT NULL  AND raw.payload.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.email AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.email AS STRING) END AS email, raw.payload.birth_date, CASE WHEN raw.payload.last_name IS NOT NULL  AND raw.payload.last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_name AS STRING) END AS last_name, raw.payload.created_at, CASE WHEN raw.payload.mobile_phone IS NOT NULL  AND raw.payload.mobile_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.mobile_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.mobile_phone AS STRING) END AS mobile_phone, CASE WHEN raw.payload.first_name IS NOT NULL  AND raw.payload.first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.first_name AS STRING) END AS first_name, raw.payload.move_in_date, raw.payload.country, CASE WHEN raw.payload.street_address IS NOT NULL  AND raw.payload.street_address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.street_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.street_address AS STRING) END AS street_address, raw.payload.id, raw.payload.updated_at, CASE WHEN raw.payload.city IS NOT NULL  AND raw.payload.city <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.city AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.city AS STRING) END AS city, raw.payload.marked_for_delete) AS payload, raw.* EXCEPT(payload),CASE WHEN (raw.payload.national_id IS NOT NULL AND raw.payload.national_id <> "" AND VAULT.uuid IS NOT NULL) OR LOWER(raw.payload.national_id) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream_fi|exp_loan_application_service_applicants_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.payload.national_id AS STRING)), "[^0-9-+A-Z]", ""), 11) AS ssn_clean FROM`data-domain-data-warehouse.sambla_group_data_stream_fi.exp_loan_application_service_applicants_sgds_r` raw) SELECT STRUCT(CASE WHEN raw.payload.street_address IS NOT NULL  AND raw.payload.street_address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.street_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.street_address AS STRING) END AS street_address, raw.payload.id, raw.payload.num_household_adults_employed, raw.payload.monthly_rental_income, raw.payload.has_foreign_currency_income, raw.payload.birth_date, raw.payload.home_cost, raw.payload.monthly_income_before_tax, CASE WHEN raw.payload.city IS NOT NULL  AND raw.payload.city <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.city AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.city AS STRING) END AS city, raw.payload.employment_since, raw.payload.customer_id, raw.payload.other_monthly_income_before_tax, raw.payload.citizenship, raw.payload.is_politically_exposed, CASE WHEN raw.payload.mobile_phone IS NOT NULL  AND raw.payload.mobile_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.mobile_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.mobile_phone AS STRING) END AS mobile_phone, raw.payload.spouse_monthly_income_before_tax, raw.payload.move_in_date, raw.payload.employment_type, raw.payload.latest_credit_default, raw.payload.rental_monthly_income_before_tax, raw.payload.spouse_monthly_income_after_tax, raw.payload.occupation_title, CASE WHEN raw.payload.last_name IS NOT NULL  AND raw.payload.last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_name AS STRING) END AS last_name, raw.payload.num_dependants, CASE WHEN raw.payload.postal_code IS NOT NULL  AND raw.payload.postal_code <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.postal_code AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.postal_code AS STRING) END AS postal_code, raw.payload.country, raw.payload.home_type_category, CASE WHEN raw.payload.email IS NOT NULL  AND raw.payload.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.email AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.email AS STRING) END AS email, raw.payload.num_household_adults, CASE WHEN raw.payload.first_name IS NOT NULL  AND raw.payload.first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.first_name AS STRING) END AS first_name, CASE WHEN raw.payload.employer_name IS NOT NULL  AND raw.payload.employer_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.employer_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.employer_name AS STRING) END AS employer_name, CASE WHEN raw.payload.business_organization_number IS NOT NULL  AND raw.payload.business_organization_number <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.business_organization_number AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.business_organization_number AS STRING) END AS business_organization_number, CASE WHEN raw.payload.bank_account IS NOT NULL  AND raw.payload.bank_account <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.bank_account AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.bank_account AS STRING) END AS bank_account, raw.payload.civil_status, raw.payload.eu_sanction_validated_at, CASE WHEN raw.payload.employment_industry IS NOT NULL  AND raw.payload.employment_industry <> 0 AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.employment_industry AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.employment_industry AS STRING) END AS employment_industry, raw.payload.updated_at, raw.payload.home_type, CASE WHEN raw.payload.employer_phone IS NOT NULL  AND raw.payload.employer_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.employer_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.employer_phone AS STRING) END AS employer_phone, raw.payload.created_at, raw.payload.military_service_status, raw.payload.other_monthly_income_after_tax, raw.payload.education_level, raw.payload.monthly_child_alimony_cost, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, raw.payload.applicant_draft_id, raw.payload.has_credit_card, raw.payload.employment_to, raw.payload.business_registration_date, raw.payload.monthly_income_after_tax, raw.payload.other_income_source, raw.payload.other_living_cost, raw.payload.occupation_category, raw.payload.home_type_other_description) AS payload, raw.* EXCEPT(payload),CASE WHEN (raw.payload.national_id IS NOT NULL AND raw.payload.national_id <> "" AND VAULT.uuid IS NOT NULL) OR LOWER(raw.payload.national_id) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream|exp_bidding_service_creditor_products_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream.exp_bidding_service_creditor_products_sgds_r`
sambla_group_data_stream|exp_bidding_service_creditors_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream.exp_bidding_service_creditors_sgds_r`
sambla_group_data_stream|exp_bidding_service_invite_logs_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream.exp_bidding_service_invite_logs_sgds_r`
sambla_group_data_stream|exp_customer_service_customers_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(CAST(raw.payload.national_id AS STRING), "[^0-9]", ""), 12) AS ssn_clean FROM`data-domain-data-warehouse.sambla_group_data_stream.exp_customer_service_customers_sgds_r` raw) SELECT STRUCT(raw.payload.move_in_date, raw.payload.marked_for_delete, raw.payload.country, CASE WHEN raw.payload.postal_code IS NOT NULL  AND raw.payload.postal_code <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.postal_code AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.postal_code AS STRING) END AS postal_code, raw.payload.updated_at, raw.payload.birth_date, raw.payload.created_at, CASE WHEN raw.payload.city IS NOT NULL  AND raw.payload.city <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.city AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.city AS STRING) END AS city, CASE WHEN raw.payload.email IS NOT NULL  AND raw.payload.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.email AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.email AS STRING) END AS email, CASE WHEN raw.payload.mobile_phone IS NOT NULL  AND raw.payload.mobile_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.mobile_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.mobile_phone AS STRING) END AS mobile_phone, raw.payload.valid_national_id, raw.payload.id, CASE WHEN raw.payload.street_address IS NOT NULL  AND raw.payload.street_address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.street_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.street_address AS STRING) END AS street_address, CASE WHEN raw.payload.first_name IS NOT NULL  AND raw.payload.first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.first_name AS STRING) END AS first_name, raw.payload.latest_credit_check_done_at, CASE WHEN raw.payload.last_name IS NOT NULL  AND raw.payload.last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_name AS STRING) END AS last_name, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id) AS payload, raw.* EXCEPT(payload),CASE WHEN (raw.payload.national_id IS NOT NULL AND raw.payload.national_id <> "" AND VAULT.uuid IS NOT NULL) OR LOWER(raw.payload.national_id) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream|exp_loan_application_service_applicant_drafts_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(CAST(raw.payload.national_id AS STRING), "[^0-9]", ""), 12) AS ssn_clean FROM`data-domain-data-warehouse.sambla_group_data_stream.exp_loan_application_service_applicant_drafts_sgds_r` raw) SELECT STRUCT(raw.payload.monthly_rental_income, raw.payload.civil_status, raw.payload.other_income_source, raw.payload.occupation_title, raw.payload.employment_type, raw.payload.rental_monthly_income_before_tax, raw.payload.monthly_child_alimony_cost, CASE WHEN raw.payload.business_organization_number IS NOT NULL  AND raw.payload.business_organization_number <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.business_organization_number AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.business_organization_number AS STRING) END AS business_organization_number, raw.payload.other_monthly_income_before_tax, CASE WHEN raw.payload.employment_industry IS NOT NULL  AND raw.payload.employment_industry <> 0 AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.employment_industry AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.employment_industry AS STRING) END AS employment_industry, raw.payload.home_type, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, raw.payload.citizenship, raw.payload.num_dependants, raw.payload.employment_to, raw.payload.home_cost, raw.payload.other_living_cost, raw.payload.created_at, raw.payload.occupation_category, raw.payload.spouse_monthly_income_after_tax, raw.payload.other_monthly_income_after_tax, raw.payload.monthly_income_after_tax, raw.payload.education_level, raw.payload.monthly_income_before_tax, raw.payload.move_in_date, CASE WHEN raw.payload.employer_name IS NOT NULL  AND raw.payload.employer_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.employer_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.employer_name AS STRING) END AS employer_name, raw.payload.num_household_adults, raw.payload.business_registration_date, raw.payload.spouse_monthly_income_before_tax, raw.payload.has_foreign_currency_income, CASE WHEN raw.payload.bank_account IS NOT NULL  AND raw.payload.bank_account <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.bank_account AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.bank_account AS STRING) END AS bank_account, raw.payload.has_credit_card, raw.payload.id, CASE WHEN raw.payload.mobile_phone IS NOT NULL  AND raw.payload.mobile_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.mobile_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.mobile_phone AS STRING) END AS mobile_phone, CASE WHEN raw.payload.employer_phone IS NOT NULL  AND raw.payload.employer_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.employer_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.employer_phone AS STRING) END AS employer_phone, raw.payload.home_type_other_description, raw.payload.num_household_adults_employed, raw.payload.updated_at, raw.payload.home_type_category, CASE WHEN raw.payload.email IS NOT NULL  AND raw.payload.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.email AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.email AS STRING) END AS email, raw.payload.military_service_status, raw.payload.employment_since) AS payload, raw.* EXCEPT(payload),CASE WHEN (raw.payload.national_id IS NOT NULL AND raw.payload.national_id <> "" AND VAULT.uuid IS NOT NULL) OR LOWER(raw.payload.national_id) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream|exp_loan_application_service_applicants_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(CAST(raw.payload.national_id AS STRING), "[^0-9]", ""), 12) AS ssn_clean FROM`data-domain-data-warehouse.sambla_group_data_stream.exp_loan_application_service_applicants_sgds_r` raw) SELECT STRUCT(raw.payload.other_income_source, raw.payload.id, raw.payload.spouse_monthly_income_after_tax, CASE WHEN raw.payload.last_name IS NOT NULL  AND raw.payload.last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_name AS STRING) END AS last_name, raw.payload.latest_credit_default, raw.payload.rental_monthly_income_before_tax, raw.payload.num_household_adults_employed, raw.payload.home_type_category, raw.payload.has_foreign_currency_income, raw.payload.birth_date, raw.payload.monthly_rental_income, raw.payload.eu_sanction_validated_at, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, raw.payload.num_dependants, raw.payload.spouse_monthly_income_before_tax, raw.payload.other_living_cost, CASE WHEN raw.payload.email IS NOT NULL  AND raw.payload.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.email AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.email AS STRING) END AS email, raw.payload.move_in_date, raw.payload.education_level, raw.payload.monthly_income_before_tax, CASE WHEN raw.payload.street_address IS NOT NULL  AND raw.payload.street_address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.street_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.street_address AS STRING) END AS street_address, raw.payload.country, raw.payload.civil_status, CASE WHEN raw.payload.city IS NOT NULL  AND raw.payload.city <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.city AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.city AS STRING) END AS city, raw.payload.other_monthly_income_before_tax, raw.payload.monthly_child_alimony_cost, raw.payload.home_type_other_description, raw.payload.employment_since, raw.payload.updated_at, raw.payload.military_service_status, raw.payload.employment_to, CASE WHEN raw.payload.first_name IS NOT NULL  AND raw.payload.first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.first_name AS STRING) END AS first_name, raw.payload.other_monthly_income_after_tax, CASE WHEN raw.payload.employer_phone IS NOT NULL  AND raw.payload.employer_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.employer_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.employer_phone AS STRING) END AS employer_phone, raw.payload.occupation_title, raw.payload.has_credit_card, raw.payload.citizenship, CASE WHEN raw.payload.employment_industry IS NOT NULL  AND raw.payload.employment_industry <> 0 AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.employment_industry AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.employment_industry AS STRING) END AS employment_industry, raw.payload.is_politically_exposed, raw.payload.home_type, CASE WHEN raw.payload.mobile_phone IS NOT NULL  AND raw.payload.mobile_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.mobile_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.mobile_phone AS STRING) END AS mobile_phone, raw.payload.applicant_draft_id, CASE WHEN raw.payload.postal_code IS NOT NULL  AND raw.payload.postal_code <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.postal_code AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.postal_code AS STRING) END AS postal_code, raw.payload.employment_type, CASE WHEN raw.payload.business_organization_number IS NOT NULL  AND raw.payload.business_organization_number <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.business_organization_number AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.business_organization_number AS STRING) END AS business_organization_number, raw.payload.business_registration_date, CASE WHEN raw.payload.employer_name IS NOT NULL  AND raw.payload.employer_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.employer_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.employer_name AS STRING) END AS employer_name, raw.payload.num_household_adults, CASE WHEN raw.payload.bank_account IS NOT NULL  AND raw.payload.bank_account <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.bank_account AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.bank_account AS STRING) END AS bank_account, raw.payload.occupation_category, raw.payload.created_at, raw.payload.customer_id, raw.payload.home_cost, raw.payload.monthly_income_after_tax) AS payload, raw.* EXCEPT(payload),CASE WHEN (raw.payload.national_id IS NOT NULL AND raw.payload.national_id <> "" AND VAULT.uuid IS NOT NULL) OR LOWER(raw.payload.national_id) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream|exp_loan_application_service_loan_application_drafts_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream.exp_loan_application_service_loan_application_drafts_sgds_r`
sambla_group_data_stream|exp_loan_application_service_loan_application_versions_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream.exp_loan_application_service_loan_application_versions_sgds_r`
sambla_group_data_stream|exp_bidding_service_bid_additional_requirements_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream.exp_bidding_service_bid_additional_requirements_sgds_r`
sambla_group_data_stream|exp_bidding_service_bid_logs_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream.exp_bidding_service_bid_logs_sgds_r`
sambla_group_data_stream|exp_bidding_service_invites_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream.exp_bidding_service_invites_sgds_r`
sambla_group_data_stream|marketing_contact_service_contacts_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(CAST(raw.payload.national_id AS STRING), "[^0-9]", ""), 12) AS ssn_clean FROM`data-domain-data-warehouse.sambla_group_data_stream.marketing_contact_service_contacts_sgds_r` raw) SELECT STRUCT(raw.payload.last_application_other_monthly_income_before_tax, CASE WHEN raw.payload.postal_code IS NOT NULL  AND raw.payload.postal_code <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.postal_code AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.postal_code AS STRING) END AS postal_code, raw.payload.last_application_payment_complaint, raw.payload.has_been_primary_applicant, raw.payload.last_application_employment_industry, CASE WHEN raw.payload.last_application_employer_name IS NOT NULL  AND raw.payload.last_application_employer_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_application_employer_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_application_employer_name AS STRING) END AS last_application_employer_name, raw.payload.last_accepted_at, raw.payload.last_application_other_income_source, raw.payload.last_application_id, raw.payload.interest_watch, raw.payload.last_application_employment_to, raw.payload.last_application_num_invited_creditors, raw.payload.last_application_occupation_title, raw.payload.last_application_granted, raw.payload.last_application_num_dependants, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, raw.payload.last_application_education_level, raw.payload.last_application_business_registration_date, raw.payload.last_application_move_in_date, raw.payload.last_application_employment_since, raw.payload.last_application_has_co_applicant, raw.payload.last_application_monthly_income_before_tax, raw.payload.last_application_uc_score, raw.payload.last_application_is_co_applicant, raw.payload.last_paid_creditor_product, CASE WHEN raw.payload.email IS NOT NULL  AND raw.payload.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.email AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.email AS STRING) END AS email, raw.payload.last_application_occupation_category, raw.payload.marketing_consent_expires_at, raw.payload.id, raw.payload.last_application_employment_type, raw.payload.last_application_num_bids, raw.payload.last_application_rental_monthly_income_before_tax, raw.payload.last_application_granted_amount, raw.payload.last_application_other_monthly_income_after_tax, CASE WHEN raw.payload.last_application_employer_phone IS NOT NULL  AND raw.payload.last_application_employer_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_application_employer_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_application_employer_phone AS STRING) END AS last_application_employer_phone, raw.payload.last_application_total_loan, raw.payload.last_application_initial_marketing_consent, raw.payload.last_application_paid, raw.payload.last_application_military_service_status, raw.payload.last_application_monthly_income_after_tax, raw.payload.last_application_citizenship, raw.payload.last_application_debt_balance, raw.payload.online_interest_watch, raw.payload.last_application_purpose, raw.payload.last_application_home_type, raw.payload.last_application_lowest_apr, CASE WHEN raw.payload.last_name IS NOT NULL  AND raw.payload.last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_name AS STRING) END AS last_name, raw.payload.last_application_completed, CASE WHEN raw.payload.first_name IS NOT NULL  AND raw.payload.first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.first_name AS STRING) END AS first_name, raw.payload.last_paid_at, raw.payload.last_application_civil_status, raw.payload.last_application_accepted, raw.payload.customer_sendouts_block_until, raw.payload.ppi_deactivated_at, raw.payload.last_application_spouse_monthly_income_before_tax, raw.payload.last_application_business_organization_number, raw.payload.last_application_created_at, raw.payload.last_application_new_loan, raw.payload.total_num_applications, raw.payload.last_application_home_type_category, raw.payload.infocom_consent, raw.payload.last_application_desired_repayment_time, raw.payload.site_origin, raw.payload.updated_at, CASE WHEN raw.payload.mobile_phone IS NOT NULL  AND raw.payload.mobile_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.mobile_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.mobile_phone AS STRING) END AS mobile_phone, raw.payload.creditor_block_until, CASE WHEN raw.payload.city IS NOT NULL  AND raw.payload.city <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.city AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.city AS STRING) END AS city, raw.payload.ppi, raw.payload.created_at, raw.payload.last_application_home_cost) AS payload, raw.* EXCEPT(payload),CASE WHEN (raw.payload.national_id IS NOT NULL AND raw.payload.national_id <> "" AND VAULT.uuid IS NOT NULL) OR LOWER(raw.payload.national_id) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream|marketing_contact_service_fully_blocked_contacts_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(CAST(raw.payload.national_id AS STRING), "[^0-9]", ""), 12) AS ssn_clean FROM`data-domain-data-warehouse.sambla_group_data_stream.marketing_contact_service_fully_blocked_contacts_sgds_r` raw) SELECT STRUCT(CASE WHEN raw.payload.telemarketing IS NOT NULL  AND raw.payload.telemarketing <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.telemarketing AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.telemarketing AS STRING) END AS telemarketing, raw.payload.block_expiration, raw.payload.block_reason, raw.payload.id, raw.payload.created_at, raw.payload.updated_at, CASE WHEN raw.payload.push_notifications IS NOT NULL  AND raw.payload.push_notifications <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.push_notifications AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.push_notifications AS STRING) END AS push_notifications, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, CASE WHEN raw.payload.email IS NOT NULL  AND raw.payload.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.email AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.email AS STRING) END AS email, raw.payload.other_info, CASE WHEN raw.payload.mobile_phone IS NOT NULL  AND raw.payload.mobile_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.mobile_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.mobile_phone AS STRING) END AS mobile_phone) AS payload, raw.* EXCEPT(payload),CASE WHEN (raw.payload.national_id IS NOT NULL AND raw.payload.national_id <> "" AND VAULT.uuid IS NOT NULL) OR LOWER(raw.payload.national_id) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream|marketing_contact_service_mortgage_cart_abandonment_contacts_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream.marketing_contact_service_mortgage_cart_abandonment_contacts_sgds_r`
sambla_group_data_stream|payments_api_Customer_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(CAST(raw.payload.nationalId AS STRING), "[^0-9]", ""), 12) AS ssn_clean FROM`data-domain-data-warehouse.sambla_group_data_stream.payments_api_Customer_sgds_r` raw) SELECT STRUCT(CASE WHEN raw.payload.postcode IS NOT NULL  AND raw.payload.postcode <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.postcode AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.postcode AS STRING) END AS post_code, CASE WHEN raw.payload.nationalId IS NOT NULL  AND raw.payload.nationalId <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.nationalId AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.nationalId AS STRING) END AS national_id, raw.payload.market, CASE WHEN raw.payload.phoneNumber IS NOT NULL  AND raw.payload.phoneNumber <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.phoneNumber AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.phoneNumber AS STRING) END AS phonenumber, raw.payload.migratedFromInsivoAt, CASE WHEN raw.payload.address IS NOT NULL  AND raw.payload.address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.address AS STRING) END AS address, raw.payload.id, CASE WHEN raw.payload.postalArea IS NOT NULL  AND raw.payload.postalArea <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.postalArea AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.postalArea AS STRING) END AS postal_area, CASE WHEN raw.payload.email IS NOT NULL  AND raw.payload.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.email AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.email AS STRING) END AS email, raw.payload.payerNumber, raw.payload.updatedAt, CASE WHEN raw.payload.name IS NOT NULL  AND raw.payload.name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.name AS STRING) END AS name, raw.payload.createdAt) AS payload, raw.* EXCEPT(payload),CASE WHEN (raw.payload.nationalId IS NOT NULL AND raw.payload.nationalId <> "" AND VAULT.uuid IS NOT NULL) OR LOWER(raw.payload.nationalId) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream|payments_api_InvoiceFile_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream.payments_api_InvoiceFile_sgds_r`
sambla_group_data_stream|payments_api_InvoiceItem_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream.payments_api_InvoiceItem_sgds_r`
sambla_group_data_stream|payments_api_PaymentEvent_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream.payments_api_PaymentEvent_sgds_r`
sambla_group_data_stream|payments_api_RecurringPayment_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream.payments_api_RecurringPayment_sgds_r`
sambla_group_data_stream_fi|asiakastieto_service_credit_default_rows_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.asiakastieto_service_credit_default_rows_sgds_r`
sambla_group_data_stream_fi|bisnode_service_credit_reports_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.payload.national_id AS STRING)), "[^0-9-+A-Z]", ""), 11) AS ssn_clean FROM`data-domain-data-warehouse.sambla_group_data_stream_fi.bisnode_service_credit_reports_sgds_r` raw) SELECT STRUCT(raw.payload.previous_capital_deficit, raw.payload.move_in_date, CASE WHEN raw.payload.secret_address IS NOT NULL  AND raw.payload.secret_address <> 0 AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.secret_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.secret_address AS STRING) END AS secret_address, raw.payload.number_of_payment_complaints, raw.payload.previous_taxed_annual_income, raw.payload.capital_deficit, raw.payload.taxed_year, raw.payload.latest_payment_complaint, raw.payload.id, raw.payload.customer_id, raw.payload.country, raw.payload.uc_registration_date, raw.payload.applicant_draft_id, CASE WHEN raw.payload.first_name IS NOT NULL  AND raw.payload.first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.first_name AS STRING) END AS first_name, CASE WHEN raw.payload.last_name IS NOT NULL  AND raw.payload.last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_name AS STRING) END AS last_name, raw.payload.blocked_code, raw.payload.payment_complaint, raw.payload.debt_reconciliation_date, raw.payload.blocked_description, CASE WHEN raw.payload.xml IS NOT NULL  AND raw.payload.xml <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.xml AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.xml AS STRING) END AS xml, raw.payload.score, raw.payload.template_passed, raw.payload.taxed_annual_income, raw.payload.debt_balance, raw.payload.no_visit_address, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, CASE WHEN raw.payload.postal_code IS NOT NULL  AND raw.payload.postal_code <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.postal_code AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.postal_code AS STRING) END AS postal_code, raw.payload.number_of_reports_12_months, raw.payload.product_type, raw.payload.unregistered, raw.payload.fetched_at, CASE WHEN raw.payload.temporary_address IS NOT NULL  AND raw.payload.temporary_address <> 0 AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.temporary_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.temporary_address AS STRING) END AS temporary_address, CASE WHEN raw.payload.city IS NOT NULL  AND raw.payload.city <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.city AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.city AS STRING) END AS city, CASE WHEN raw.payload.street_address IS NOT NULL  AND raw.payload.street_address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.street_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.street_address AS STRING) END AS street_address, raw.payload.minor, raw.payload.has_debt_reconstruction, raw.payload.previous_taxed_year, raw.payload.major_city_inhabitant, raw.payload.template_code) AS payload, raw.* EXCEPT(payload),CASE WHEN (raw.payload.national_id IS NOT NULL AND raw.payload.national_id <> "" AND VAULT.uuid IS NOT NULL) OR LOWER(raw.payload.national_id) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream_fi|credit_report_service_credit_reports_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.payload.national_id AS STRING)), "[^0-9-+A-Z]", ""), 11) AS ssn_clean FROM`data-domain-data-warehouse.sambla_group_data_stream_fi.credit_report_service_credit_reports_sgds_r` raw) SELECT STRUCT(raw.payload.score, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, raw.payload.trustee_appointed, CASE WHEN raw.payload.secret_address IS NOT NULL  AND raw.payload.secret_address <> 0 AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.secret_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.secret_address AS STRING) END AS secret_address, CASE WHEN raw.payload.temporary_address IS NOT NULL  AND raw.payload.temporary_address <> 0 AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.temporary_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.temporary_address AS STRING) END AS temporary_address, CASE WHEN raw.payload.street_address IS NOT NULL  AND raw.payload.street_address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.street_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.street_address AS STRING) END AS street_address, raw.payload.number_of_reports_12_months, raw.payload.taxed_annual_income, raw.payload.blocked_description, raw.payload.fetched_at, raw.payload.no_visit_address, raw.payload.previous_taxed_year, raw.payload.template_code, raw.payload.major_city_inhabitant, raw.payload.product_type, raw.payload.id, raw.payload.latest_payment_complaint, raw.payload.applicant_draft_id, CASE WHEN raw.payload.xml IS NOT NULL  AND raw.payload.xml <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.xml AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.xml AS STRING) END AS xml, raw.payload.uc_registration_date, CASE WHEN raw.payload.first_name IS NOT NULL  AND raw.payload.first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.first_name AS STRING) END AS first_name, raw.payload.debt_reconciliation_date, raw.payload.payment_complaint, raw.payload.country, raw.payload.debt_balance, raw.payload.minor, raw.payload.has_debt_reconstruction, raw.payload.blocked_code, raw.payload.unregistered, CASE WHEN raw.payload.city IS NOT NULL  AND raw.payload.city <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.city AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.city AS STRING) END AS city, raw.payload.move_in_date, raw.payload.template_passed, raw.payload.customer_id, raw.payload.taxed_year, raw.payload.capital_deficit, CASE WHEN raw.payload.last_name IS NOT NULL  AND raw.payload.last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_name AS STRING) END AS last_name, raw.payload.previous_capital_deficit, CASE WHEN raw.payload.postal_code IS NOT NULL  AND raw.payload.postal_code <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.postal_code AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.postal_code AS STRING) END AS postal_code, raw.payload.previous_taxed_annual_income, raw.payload.creditor_code, raw.payload.number_of_payment_complaints) AS payload, raw.* EXCEPT(payload),CASE WHEN (raw.payload.national_id IS NOT NULL AND raw.payload.national_id <> "" AND VAULT.uuid IS NOT NULL) OR LOWER(raw.payload.national_id) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream_fi|exp_bidding_service_bid_accepts_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.exp_bidding_service_bid_accepts_sgds_r`
sambla_group_data_stream_fi|exp_bidding_service_bid_additional_requirements_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.exp_bidding_service_bid_additional_requirements_sgds_r`
sambla_group_data_stream_fi|exp_bidding_service_bid_logs_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.exp_bidding_service_bid_logs_sgds_r`
sambla_group_data_stream_fi|exp_bidding_service_bidding_logs_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.exp_bidding_service_bidding_logs_sgds_r`
sambla_group_data_stream_fi|exp_bidding_service_bids_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.exp_bidding_service_bids_sgds_r`
sambla_group_data_stream_fi|exp_bidding_service_creditors_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.exp_bidding_service_creditors_sgds_r`
sambla_group_data_stream_fi|exp_bidding_service_invite_logs_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.exp_bidding_service_invite_logs_sgds_r`
sambla_group_data_stream|identity_verification_service_identity_verification_log_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream.identity_verification_service_identity_verification_log_sgds_r`
sambla_group_data_stream|marketing_contact_service_contact_blocks_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream.marketing_contact_service_contact_blocks_sgds_r`
sambla_group_data_stream|marketing_contact_service_contact_tokens_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream.marketing_contact_service_contact_tokens_sgds_r`
sambla_group_data_stream_fi|exp_loan_application_service_applicant_drafts_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.payload.national_id AS STRING)), "[^0-9-+A-Z]", ""), 11) AS ssn_clean FROM`data-domain-data-warehouse.sambla_group_data_stream_fi.exp_loan_application_service_applicant_drafts_sgds_r` raw) SELECT STRUCT(raw.payload.home_type_other_description, raw.payload.other_living_cost, raw.payload.spouse_monthly_income_after_tax, CASE WHEN raw.payload.bank_account IS NOT NULL  AND raw.payload.bank_account <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.bank_account AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.bank_account AS STRING) END AS bank_account, CASE WHEN raw.payload.employer_name IS NOT NULL  AND raw.payload.employer_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.employer_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.employer_name AS STRING) END AS employer_name, raw.payload.num_household_adults_employed, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, raw.payload.other_income_source, raw.payload.monthly_child_alimony_cost, raw.payload.has_credit_card, raw.payload.monthly_income_before_tax, raw.payload.monthly_rental_income, raw.payload.home_type_category, raw.payload.employment_to, raw.payload.rental_monthly_income_before_tax, raw.payload.monthly_income_after_tax, raw.payload.created_at, raw.payload.num_household_adults, raw.payload.num_dependants, CASE WHEN raw.payload.employment_industry IS NOT NULL  AND raw.payload.employment_industry <> 0 AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.employment_industry AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.employment_industry AS STRING) END AS employment_industry, raw.payload.home_type, CASE WHEN raw.payload.email IS NOT NULL  AND raw.payload.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.email AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.email AS STRING) END AS email, raw.payload.military_service_status, raw.payload.id, raw.payload.other_monthly_income_before_tax, raw.payload.employment_type, raw.payload.spouse_monthly_income_before_tax, raw.payload.move_in_date, raw.payload.employment_since, raw.payload.education_level, raw.payload.citizenship, raw.payload.civil_status, raw.payload.occupation_category, CASE WHEN raw.payload.business_organization_number IS NOT NULL  AND raw.payload.business_organization_number <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.business_organization_number AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.business_organization_number AS STRING) END AS business_organization_number, raw.payload.updated_at, raw.payload.home_cost, CASE WHEN raw.payload.mobile_phone IS NOT NULL  AND raw.payload.mobile_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.mobile_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.mobile_phone AS STRING) END AS mobile_phone, raw.payload.occupation_title, CASE WHEN raw.payload.employer_phone IS NOT NULL  AND raw.payload.employer_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.employer_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.employer_phone AS STRING) END AS employer_phone, raw.payload.business_registration_date, raw.payload.has_foreign_currency_income, raw.payload.other_monthly_income_after_tax) AS payload, raw.* EXCEPT(payload),CASE WHEN (raw.payload.national_id IS NOT NULL AND raw.payload.national_id <> "" AND VAULT.uuid IS NOT NULL) OR LOWER(raw.payload.national_id) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream_fi|exp_loan_application_service_loan_application_versions_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.exp_loan_application_service_loan_application_versions_sgds_r`
sambla_group_data_stream_fi|exp_tracking_service_application_cookie_mappings_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.exp_tracking_service_application_cookie_mappings_sgds_r`
sambla_group_data_stream_fi|exp_tracking_service_query_params_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.exp_tracking_service_query_params_sgds_r`
sambla_group_data_stream_fi|marketing_contact_service_cart_abandonment_contacts_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.payload.national_id AS STRING)), "[^0-9-+A-Z]", ""), 11) AS ssn_clean FROM`data-domain-data-warehouse.sambla_group_data_stream_fi.marketing_contact_service_cart_abandonment_contacts_sgds_r` raw) SELECT STRUCT(raw.payload.monthly_income_before_tax, raw.payload.bloomreach_cookie, raw.payload.employment_to_month, raw.payload.business_registration_date, raw.payload.military_service_status, raw.payload.prefill_token, raw.payload.other_income, raw.payload.created_at, raw.payload.other_monthly_income_after_tax, raw.payload.other_monthly_income_before_tax, raw.payload.employment_type, raw.payload.id, raw.payload.employment_since_month, raw.payload.monthly_salary, raw.payload.spouse_monthly_income_before_tax, CASE WHEN raw.payload.mobile_phone IS NOT NULL  AND raw.payload.mobile_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.mobile_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.mobile_phone AS STRING) END AS mobile_phone, raw.payload.total_amount, CASE WHEN raw.payload.employer_name IS NOT NULL  AND raw.payload.employer_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.employer_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.employer_name AS STRING) END AS employer_name, raw.payload.accept_news_letter, raw.payload.home_type_category, raw.payload.other_income_source, raw.payload.employment_to, raw.payload.num_dependants, CASE WHEN raw.payload.business_organization_number IS NOT NULL  AND raw.payload.business_organization_number <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.business_organization_number AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.business_organization_number AS STRING) END AS business_organization_number, raw.payload.repayment_time, raw.payload.merge_loan, raw.payload.employment_since, raw.payload.rental_monthly_income_before_tax, raw.payload.home_cost, raw.payload.page, raw.payload.internal_cookie, raw.payload.home_type, raw.payload.updated_at, raw.payload.occupation_title, raw.payload.education_level, raw.payload.occupation_category, raw.payload.consolidation_amount, raw.payload.move_in_date, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, raw.payload.is_cart_abandonment, CASE WHEN raw.payload.employment_industry IS NOT NULL  AND raw.payload.employment_industry <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.employment_industry AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.employment_industry AS STRING) END AS employment_industry, raw.payload.loan_purpose, raw.payload.civil_status, raw.payload.site_origin, CASE WHEN raw.payload.email IS NOT NULL  AND raw.payload.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.email AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.email AS STRING) END AS email, raw.payload.monthly_income_after_tax, raw.payload.citizenship, raw.payload.query_params) AS payload, raw.* EXCEPT(payload),CASE WHEN (raw.payload.national_id IS NOT NULL AND raw.payload.national_id <> "" AND VAULT.uuid IS NOT NULL) OR LOWER(raw.payload.national_id) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream_fi|marketing_contact_service_contact_blocks_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.marketing_contact_service_contact_blocks_sgds_r`
sambla_group_data_stream_fi|marketing_contact_service_contact_tokens_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.marketing_contact_service_contact_tokens_sgds_r`
sambla_group_data_stream_fi|marketing_contact_service_contacts_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.payload.national_id AS STRING)), "[^0-9-+A-Z]", ""), 11) AS ssn_clean FROM`data-domain-data-warehouse.sambla_group_data_stream_fi.marketing_contact_service_contacts_sgds_r` raw) SELECT STRUCT(raw.payload.last_application_other_monthly_income_after_tax, raw.payload.last_application_new_loan, raw.payload.infocom_consent, raw.payload.last_application_initial_marketing_consent, raw.payload.last_application_is_co_applicant, raw.payload.last_application_citizenship, raw.payload.creditor_block_until, raw.payload.last_application_total_loan, raw.payload.last_application_purpose, raw.payload.last_application_business_registration_date, raw.payload.last_application_num_invited_creditors, raw.payload.last_application_paid, raw.payload.last_application_payment_complaint, raw.payload.last_application_home_type, raw.payload.last_application_occupation_category, raw.payload.last_application_civil_status, raw.payload.last_application_accepted, raw.payload.last_application_education_level, raw.payload.last_paid_at, raw.payload.last_application_employment_since, raw.payload.ppi_deactivated_at, raw.payload.last_application_created_at, raw.payload.ppi, raw.payload.updated_at, CASE WHEN raw.payload.last_application_employer_name IS NOT NULL  AND raw.payload.last_application_employer_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_application_employer_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_application_employer_name AS STRING) END AS last_application_employer_name, raw.payload.last_application_employment_type, raw.payload.last_application_home_cost, raw.payload.marketing_consent_expires_at, raw.payload.id, raw.payload.last_application_military_service_status, raw.payload.last_application_employment_industry, raw.payload.last_application_spouse_monthly_income_before_tax, raw.payload.last_application_id, raw.payload.last_paid_creditor_product, raw.payload.last_application_desired_repayment_time, CASE WHEN raw.payload.first_name IS NOT NULL  AND raw.payload.first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.first_name AS STRING) END AS first_name, raw.payload.created_at, raw.payload.last_application_num_dependants, raw.payload.last_application_debt_balance, raw.payload.last_application_completed, raw.payload.last_application_home_type_category, raw.payload.last_application_employment_to, raw.payload.last_application_move_in_date, raw.payload.total_num_applications, raw.payload.last_application_granted, raw.payload.last_application_granted_amount, raw.payload.last_application_rental_monthly_income_before_tax, CASE WHEN raw.payload.last_name IS NOT NULL  AND raw.payload.last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_name AS STRING) END AS last_name, CASE WHEN raw.payload.mobile_phone IS NOT NULL  AND raw.payload.mobile_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.mobile_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.mobile_phone AS STRING) END AS mobile_phone, raw.payload.last_application_other_monthly_income_before_tax, raw.payload.last_application_occupation_title, raw.payload.last_accepted_at, raw.payload.online_interest_watch, raw.payload.last_application_num_bids, CASE WHEN raw.payload.city IS NOT NULL  AND raw.payload.city <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.city AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.city AS STRING) END AS city, raw.payload.last_application_has_co_applicant, raw.payload.last_application_lowest_apr, raw.payload.last_application_business_organization_number, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, raw.payload.last_application_monthly_income_before_tax, CASE WHEN raw.payload.last_application_employer_phone IS NOT NULL  AND raw.payload.last_application_employer_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_application_employer_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_application_employer_phone AS STRING) END AS last_application_employer_phone, raw.payload.last_application_other_income_source, CASE WHEN raw.payload.postal_code IS NOT NULL  AND raw.payload.postal_code <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.postal_code AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.postal_code AS STRING) END AS postal_code, raw.payload.last_application_monthly_income_after_tax, raw.payload.customer_sendouts_block_until, raw.payload.last_application_uc_score, raw.payload.site_origin, CASE WHEN raw.payload.email IS NOT NULL  AND raw.payload.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.email AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.email AS STRING) END AS email, raw.payload.interest_watch, raw.payload.has_been_primary_applicant) AS payload, raw.* EXCEPT(payload),CASE WHEN (raw.payload.national_id IS NOT NULL AND raw.payload.national_id <> "" AND VAULT.uuid IS NOT NULL) OR LOWER(raw.payload.national_id) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream_no|credit_report_service_credit_reports_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.payload.national_id AS STRING)), "[^0-9]", ""), 11) AS ssn_clean FROM`data-domain-data-warehouse.sambla_group_data_stream_no.credit_report_service_credit_reports_sgds_r` raw) SELECT STRUCT(raw.payload.capital_deficit, raw.payload.major_city_inhabitant, CASE WHEN raw.payload.secret_address IS NOT NULL  AND raw.payload.secret_address <> 0 AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.secret_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.secret_address AS STRING) END AS secret_address, raw.payload.taxed_year, CASE WHEN raw.payload.temporary_address IS NOT NULL  AND raw.payload.temporary_address <> 0 AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.temporary_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.temporary_address AS STRING) END AS temporary_address, raw.payload.latest_payment_complaint, raw.payload.score, raw.payload.previous_taxed_annual_income, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, raw.payload.has_debt_reconstruction, CASE WHEN raw.payload.city IS NOT NULL  AND raw.payload.city <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.city AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.city AS STRING) END AS city, raw.payload.id, raw.payload.previous_capital_deficit, raw.payload.payment_complaint, raw.payload.debt_reconciliation_date, raw.payload.move_in_date, raw.payload.taxed_annual_income, CASE WHEN raw.payload.street_address IS NOT NULL  AND raw.payload.street_address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.street_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.street_address AS STRING) END AS street_address, raw.payload.fetched_at, raw.payload.template_code, raw.payload.product_type, raw.payload.creditor_code, raw.payload.applicant_draft_id, CASE WHEN raw.payload.first_name IS NOT NULL  AND raw.payload.first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.first_name AS STRING) END AS first_name, raw.payload.template_passed, CASE WHEN raw.payload.postal_code IS NOT NULL  AND raw.payload.postal_code <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.postal_code AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.postal_code AS STRING) END AS postal_code, CASE WHEN raw.payload.xml IS NOT NULL  AND raw.payload.xml <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.xml AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.xml AS STRING) END AS xml, raw.payload.country, raw.payload.trustee_appointed, raw.payload.previous_taxed_year, raw.payload.blocked_description, raw.payload.blocked_code, raw.payload.unregistered, raw.payload.debt_balance, CASE WHEN raw.payload.last_name IS NOT NULL  AND raw.payload.last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_name AS STRING) END AS last_name, raw.payload.uc_registration_date, raw.payload.no_visit_address, raw.payload.number_of_reports_12_months, raw.payload.customer_id, raw.payload.number_of_payment_complaints, raw.payload.minor) AS payload, raw.* EXCEPT(payload),CASE WHEN (raw.payload.national_id IS NOT NULL AND raw.payload.national_id <> "" AND VAULT.uuid IS NOT NULL) OR LOWER(raw.payload.national_id) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream_no|eiendomsverdi_service_real_estates_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_no.eiendomsverdi_service_real_estates_sgds_r`
sambla_group_data_stream_no|eiendomsverdi_service_reports_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_no.eiendomsverdi_service_reports_sgds_r`
sambla_group_data_stream_no|exp_bidding_service_bidding_logs_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_no.exp_bidding_service_bidding_logs_sgds_r`
sambla_group_data_stream_no|exp_bidding_service_bids_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_no.exp_bidding_service_bids_sgds_r`
sambla_group_data_stream_no|exp_bidding_service_creditor_products_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_no.exp_bidding_service_creditor_products_sgds_r`
sambla_group_data_stream_fi|exp_loan_application_service_current_loan_drafts_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.exp_loan_application_service_current_loan_drafts_sgds_r`
sambla_group_data_stream_fi|exp_loan_application_service_current_loans_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.exp_loan_application_service_current_loans_sgds_r`
sambla_group_data_stream_fi|exp_loan_application_service_loan_application_drafts_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.exp_loan_application_service_loan_application_drafts_sgds_r`
sambla_group_data_stream_fi|exp_loan_application_service_loan_applications_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.exp_loan_application_service_loan_applications_sgds_r`
sambla_group_data_stream_fi|exp_tracking_service_pageviews_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.exp_tracking_service_pageviews_sgds_r`
sambla_group_data_stream_fi|identity_verification_service_identity_verification_log_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.identity_verification_service_identity_verification_log_sgds_r`
sambla_group_data_stream_fi|marketing_contact_service_fully_blocked_contacts_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.payload.national_id AS STRING)), "[^0-9-+A-Z]", ""), 11) AS ssn_clean FROM`data-domain-data-warehouse.sambla_group_data_stream_fi.marketing_contact_service_fully_blocked_contacts_sgds_r` raw) SELECT STRUCT(CASE WHEN raw.payload.email IS NOT NULL  AND raw.payload.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.email AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.email AS STRING) END AS email, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, CASE WHEN raw.payload.push_notifications IS NOT NULL  AND raw.payload.push_notifications <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.push_notifications AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.push_notifications AS STRING) END AS push_notifications, raw.payload.block_reason, raw.payload.other_info, CASE WHEN raw.payload.mobile_phone IS NOT NULL  AND raw.payload.mobile_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.mobile_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.mobile_phone AS STRING) END AS mobile_phone, raw.payload.created_at, raw.payload.id, raw.payload.block_expiration, raw.payload.updated_at, CASE WHEN raw.payload.telemarketing IS NOT NULL  AND raw.payload.telemarketing <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.telemarketing AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.telemarketing AS STRING) END AS telemarketing) AS payload, raw.* EXCEPT(payload),CASE WHEN (raw.payload.national_id IS NOT NULL AND raw.payload.national_id <> "" AND VAULT.uuid IS NOT NULL) OR LOWER(raw.payload.national_id) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream_no|eiendomsverdi_service_mortgages_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_no.eiendomsverdi_service_mortgages_sgds_r`
sambla_group_data_stream_no|exp_bidding_service_bid_additional_requirements_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_no.exp_bidding_service_bid_additional_requirements_sgds_r`
sambla_group_data_stream_no|exp_bidding_service_bid_logs_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_no.exp_bidding_service_bid_logs_sgds_r`
sambla_group_data_stream_no|exp_bidding_service_creditors_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_no.exp_bidding_service_creditors_sgds_r`
sambla_group_data_stream_no|exp_loan_application_service_applicant_drafts_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.payload.national_id AS STRING)), "[^0-9]", ""), 11) AS ssn_clean FROM`data-domain-data-warehouse.sambla_group_data_stream_no.exp_loan_application_service_applicant_drafts_sgds_r` raw) SELECT STRUCT(CASE WHEN raw.payload.employment_industry IS NOT NULL  AND raw.payload.employment_industry <> 0 AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.employment_industry AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.employment_industry AS STRING) END AS employment_industry, raw.payload.num_dependants, raw.payload.spouse_monthly_income_after_tax, raw.payload.rental_monthly_income_before_tax, raw.payload.has_foreign_currency_income, raw.payload.monthly_child_alimony_cost, raw.payload.employment_type, raw.payload.has_credit_card, raw.payload.other_monthly_income_before_tax, raw.payload.home_type_other_description, raw.payload.home_type, raw.payload.civil_status, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, raw.payload.other_income_source, raw.payload.other_living_cost, raw.payload.move_in_date, raw.payload.num_household_adults_employed, raw.payload.monthly_income_before_tax, raw.payload.num_household_adults, CASE WHEN raw.payload.mobile_phone IS NOT NULL  AND raw.payload.mobile_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.mobile_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.mobile_phone AS STRING) END AS mobile_phone, raw.payload.monthly_rental_income, raw.payload.employment_to, raw.payload.spouse_monthly_income_before_tax, raw.payload.home_type_category, raw.payload.created_at, CASE WHEN raw.payload.business_organization_number IS NOT NULL  AND raw.payload.business_organization_number <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.business_organization_number AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.business_organization_number AS STRING) END AS business_organization_number, raw.payload.updated_at, raw.payload.other_monthly_income_after_tax, CASE WHEN raw.payload.employer_name IS NOT NULL  AND raw.payload.employer_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.employer_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.employer_name AS STRING) END AS employer_name, CASE WHEN raw.payload.employer_phone IS NOT NULL  AND raw.payload.employer_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.employer_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.employer_phone AS STRING) END AS employer_phone, raw.payload.citizenship, raw.payload.occupation_category, CASE WHEN raw.payload.email IS NOT NULL  AND raw.payload.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.email AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.email AS STRING) END AS email, raw.payload.employment_since, raw.payload.home_cost, raw.payload.monthly_income_after_tax, raw.payload.business_registration_date, raw.payload.id, raw.payload.occupation_title, raw.payload.education_level, raw.payload.military_service_status) AS payload, raw.* EXCEPT(payload),CASE WHEN (raw.payload.national_id IS NOT NULL AND raw.payload.national_id <> "" AND VAULT.uuid IS NOT NULL) OR LOWER(raw.payload.national_id) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream_no|exp_loan_application_service_current_loans_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_no.exp_loan_application_service_current_loans_sgds_r`
sambla_group_data_stream_no|exp_loan_application_service_loan_application_drafts_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_no.exp_loan_application_service_loan_application_drafts_sgds_r`
sambla_group_data_stream_no|exp_tracking_service_cookies_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_no.exp_tracking_service_cookies_sgds_r`
sambla_group_data_stream_no|experian_service_credit_reports_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.payload.national_id AS STRING)), "[^0-9]", ""), 11) AS ssn_clean FROM`data-domain-data-warehouse.sambla_group_data_stream_no.experian_service_credit_reports_sgds_r` raw) SELECT STRUCT(raw.payload.country, CASE WHEN raw.payload.city IS NOT NULL  AND raw.payload.city <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.city AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.city AS STRING) END AS city, raw.payload.debt_balance, CASE WHEN raw.payload.temporary_address IS NOT NULL  AND raw.payload.temporary_address <> 0 AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.temporary_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.temporary_address AS STRING) END AS temporary_address, raw.payload.taxed_year, raw.payload.blocked_description, raw.payload.product_type, raw.payload.fetched_at, CASE WHEN raw.payload.secret_address IS NOT NULL  AND raw.payload.secret_address <> 0 AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.secret_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.secret_address AS STRING) END AS secret_address, raw.payload.no_visit_address, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, raw.payload.minor, CASE WHEN raw.payload.street_address IS NOT NULL  AND raw.payload.street_address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.street_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.street_address AS STRING) END AS street_address, raw.payload.debt_reconciliation_date, raw.payload.score, raw.payload.template_passed, raw.payload.blocked_code, raw.payload.number_of_reports_12_months, CASE WHEN raw.payload.postal_code IS NOT NULL  AND raw.payload.postal_code <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.postal_code AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.postal_code AS STRING) END AS postal_code, raw.payload.taxed_annual_income, raw.payload.uc_registration_date, raw.payload.unregistered, raw.payload.previous_taxed_year, raw.payload.template_code, CASE WHEN raw.payload.last_name IS NOT NULL  AND raw.payload.last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_name AS STRING) END AS last_name, raw.payload.capital_deficit, raw.payload.has_debt_reconstruction, raw.payload.number_of_payment_complaints, raw.payload.latest_payment_complaint, raw.payload.id, CASE WHEN raw.payload.first_name IS NOT NULL  AND raw.payload.first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.first_name AS STRING) END AS first_name, CASE WHEN raw.payload.xml IS NOT NULL  AND raw.payload.xml <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.xml AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.xml AS STRING) END AS xml, raw.payload.previous_taxed_annual_income, raw.payload.move_in_date, raw.payload.previous_capital_deficit, raw.payload.customer_id, raw.payload.major_city_inhabitant, raw.payload.applicant_draft_id, raw.payload.payment_complaint) AS payload, raw.* EXCEPT(payload),CASE WHEN (raw.payload.national_id IS NOT NULL AND raw.payload.national_id <> "" AND VAULT.uuid IS NOT NULL) OR LOWER(raw.payload.national_id) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream_no|identity_verification_service_identity_verification_log_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_no.identity_verification_service_identity_verification_log_sgds_r`
sambla_group_data_stream_no|marketing_contact_service_contacts_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.payload.national_id AS STRING)), "[^0-9]", ""), 11) AS ssn_clean FROM`data-domain-data-warehouse.sambla_group_data_stream_no.marketing_contact_service_contacts_sgds_r` raw) SELECT STRUCT(raw.payload.site_origin, raw.payload.last_application_home_cost, raw.payload.last_application_home_type, raw.payload.last_application_home_type_category, raw.payload.last_application_employment_type, raw.payload.last_application_payment_complaint, raw.payload.last_application_monthly_income_before_tax, raw.payload.last_application_business_registration_date, raw.payload.id, raw.payload.last_application_is_co_applicant, CASE WHEN raw.payload.last_application_employer_phone IS NOT NULL  AND raw.payload.last_application_employer_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_application_employer_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_application_employer_phone AS STRING) END AS last_application_employer_phone, raw.payload.last_paid_at, raw.payload.ppi_deactivated_at, raw.payload.last_application_new_loan, raw.payload.last_application_accepted, raw.payload.last_application_id, raw.payload.last_application_num_dependants, raw.payload.last_application_paid, raw.payload.last_application_other_monthly_income_before_tax, raw.payload.last_application_debt_balance, raw.payload.infocom_consent, raw.payload.last_application_num_bids, raw.payload.last_application_employment_industry, raw.payload.last_application_occupation_category, raw.payload.interest_watch, raw.payload.online_interest_watch, raw.payload.last_application_has_co_applicant, raw.payload.last_application_occupation_title, raw.payload.ppi, raw.payload.last_application_spouse_monthly_income_before_tax, raw.payload.last_accepted_at, raw.payload.marketing_consent_expires_at, raw.payload.last_application_citizenship, CASE WHEN raw.payload.email IS NOT NULL  AND raw.payload.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.email AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.email AS STRING) END AS email, CASE WHEN raw.payload.first_name IS NOT NULL  AND raw.payload.first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.first_name AS STRING) END AS first_name, CASE WHEN raw.payload.city IS NOT NULL  AND raw.payload.city <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.city AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.city AS STRING) END AS city, raw.payload.updated_at, raw.payload.last_application_business_organization_number, raw.payload.last_application_uc_score, raw.payload.has_been_primary_applicant, raw.payload.last_application_rental_monthly_income_before_tax, raw.payload.last_application_other_income_source, raw.payload.last_application_employment_to, raw.payload.last_application_total_loan, raw.payload.last_application_completed, raw.payload.last_application_granted, raw.payload.last_application_lowest_apr, raw.payload.last_application_num_invited_creditors, CASE WHEN raw.payload.mobile_phone IS NOT NULL  AND raw.payload.mobile_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.mobile_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.mobile_phone AS STRING) END AS mobile_phone, raw.payload.last_application_civil_status, raw.payload.last_application_initial_marketing_consent, raw.payload.total_num_applications, CASE WHEN raw.payload.last_name IS NOT NULL  AND raw.payload.last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_name AS STRING) END AS last_name, CASE WHEN raw.payload.last_application_employer_name IS NOT NULL  AND raw.payload.last_application_employer_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_application_employer_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_application_employer_name AS STRING) END AS last_application_employer_name, raw.payload.last_application_education_level, CASE WHEN raw.payload.postal_code IS NOT NULL  AND raw.payload.postal_code <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.postal_code AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.postal_code AS STRING) END AS postal_code, raw.payload.last_application_employment_since, raw.payload.created_at, raw.payload.last_application_granted_amount, raw.payload.creditor_block_until, raw.payload.last_application_military_service_status, raw.payload.customer_sendouts_block_until, raw.payload.last_application_monthly_income_after_tax, raw.payload.last_application_created_at, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, raw.payload.last_paid_creditor_product, raw.payload.last_application_move_in_date, raw.payload.last_application_desired_repayment_time, raw.payload.last_application_purpose, raw.payload.last_application_other_monthly_income_after_tax) AS payload, raw.* EXCEPT(payload),CASE WHEN (raw.payload.national_id IS NOT NULL AND raw.payload.national_id <> "" AND VAULT.uuid IS NOT NULL) OR LOWER(raw.payload.national_id) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream_no|exp_bidding_service_invite_logs_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_no.exp_bidding_service_invite_logs_sgds_r`
sambla_group_data_stream_no|exp_bidding_service_invites_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_no.exp_bidding_service_invites_sgds_r`
sambla_group_data_stream_no|exp_loan_application_service_applicants_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.payload.national_id AS STRING)), "[^0-9]", ""), 11) AS ssn_clean FROM`data-domain-data-warehouse.sambla_group_data_stream_no.exp_loan_application_service_applicants_sgds_r` raw) SELECT STRUCT(raw.payload.rental_monthly_income_before_tax, raw.payload.has_credit_card, CASE WHEN raw.payload.first_name IS NOT NULL  AND raw.payload.first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.first_name AS STRING) END AS first_name, raw.payload.id, raw.payload.home_type_other_description, raw.payload.updated_at, CASE WHEN raw.payload.employer_phone IS NOT NULL  AND raw.payload.employer_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.employer_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.employer_phone AS STRING) END AS employer_phone, raw.payload.monthly_income_after_tax, raw.payload.spouse_monthly_income_after_tax, raw.payload.employment_since, CASE WHEN raw.payload.street_address IS NOT NULL  AND raw.payload.street_address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.street_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.street_address AS STRING) END AS street_address, raw.payload.num_household_adults_employed, raw.payload.business_registration_date, CASE WHEN raw.payload.employer_name IS NOT NULL  AND raw.payload.employer_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.employer_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.employer_name AS STRING) END AS employer_name, raw.payload.home_type, raw.payload.monthly_child_alimony_cost, CASE WHEN raw.payload.mobile_phone IS NOT NULL  AND raw.payload.mobile_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.mobile_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.mobile_phone AS STRING) END AS mobile_phone, raw.payload.created_at, raw.payload.num_dependants, raw.payload.monthly_rental_income, raw.payload.birth_date, raw.payload.num_household_adults, raw.payload.customer_id, raw.payload.spouse_monthly_income_before_tax, CASE WHEN raw.payload.city IS NOT NULL  AND raw.payload.city <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.city AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.city AS STRING) END AS city, raw.payload.occupation_category, raw.payload.move_in_date, raw.payload.education_level, raw.payload.employment_to, raw.payload.military_service_status, raw.payload.home_type_category, CASE WHEN raw.payload.email IS NOT NULL  AND raw.payload.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.email AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.email AS STRING) END AS email, CASE WHEN raw.payload.business_organization_number IS NOT NULL  AND raw.payload.business_organization_number <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.business_organization_number AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.business_organization_number AS STRING) END AS business_organization_number, CASE WHEN raw.payload.last_name IS NOT NULL  AND raw.payload.last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_name AS STRING) END AS last_name, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, raw.payload.home_cost, raw.payload.occupation_title, raw.payload.is_politically_exposed, raw.payload.monthly_income_before_tax, raw.payload.other_income_source, raw.payload.other_monthly_income_after_tax, raw.payload.civil_status, raw.payload.country, raw.payload.has_foreign_currency_income, raw.payload.citizenship, raw.payload.eu_sanction_validated_at, raw.payload.other_monthly_income_before_tax, raw.payload.other_living_cost, CASE WHEN raw.payload.postal_code IS NOT NULL  AND raw.payload.postal_code <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.postal_code AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.postal_code AS STRING) END AS postal_code, CASE WHEN raw.payload.employment_industry IS NOT NULL  AND raw.payload.employment_industry <> 0 AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.employment_industry AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.employment_industry AS STRING) END AS employment_industry, raw.payload.employment_type, raw.payload.applicant_draft_id) AS payload, raw.* EXCEPT(payload),CASE WHEN (raw.payload.national_id IS NOT NULL AND raw.payload.national_id <> "" AND VAULT.uuid IS NOT NULL) OR LOWER(raw.payload.national_id) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream_no|exp_loan_application_service_current_loan_drafts_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_no.exp_loan_application_service_current_loan_drafts_sgds_r`
sambla_group_data_stream_no|exp_loan_application_service_loan_application_versions_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_no.exp_loan_application_service_loan_application_versions_sgds_r`
sambla_group_data_stream_no|exp_loan_application_service_loan_applications_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_no.exp_loan_application_service_loan_applications_sgds_r`
sambla_group_data_stream_no|exp_tracking_service_application_cookie_mappings_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_no.exp_tracking_service_application_cookie_mappings_sgds_r`
sambla_group_data_stream_no|exp_tracking_service_pageviews_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_no.exp_tracking_service_pageviews_sgds_r`
sambla_group_data_stream_no|gjeldsregisteret_service_consents_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_no.gjeldsregisteret_service_consents_sgds_r`
sambla_group_data_stream_no|gjeldsregisteret_service_loans_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_no.gjeldsregisteret_service_loans_sgds_r`
sambla_group_data_stream_no|marketing_contact_service_cart_abandonment_contacts_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.payload.national_id AS STRING)), "[^0-9]", ""), 11) AS ssn_clean FROM`data-domain-data-warehouse.sambla_group_data_stream_no.marketing_contact_service_cart_abandonment_contacts_sgds_r` raw) SELECT STRUCT(CASE WHEN raw.payload.employment_industry IS NOT NULL  AND raw.payload.employment_industry <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.employment_industry AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.employment_industry AS STRING) END AS employment_industry, raw.payload.loan_purpose, raw.payload.created_at, CASE WHEN raw.payload.employer_name IS NOT NULL  AND raw.payload.employer_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.employer_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.employer_name AS STRING) END AS employer_name, raw.payload.occupation_title, raw.payload.updated_at, raw.payload.bloomreach_cookie, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, raw.payload.civil_status, raw.payload.move_in_date, raw.payload.monthly_income_before_tax, raw.payload.prefill_token, raw.payload.citizenship, raw.payload.other_income, raw.payload.education_level, raw.payload.home_cost, raw.payload.employment_to, raw.payload.home_type_category, raw.payload.employment_type, CASE WHEN raw.payload.business_organization_number IS NOT NULL  AND raw.payload.business_organization_number <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.business_organization_number AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.business_organization_number AS STRING) END AS business_organization_number, raw.payload.repayment_time, raw.payload.employment_since, raw.payload.monthly_salary, raw.payload.occupation_category, raw.payload.other_income_source, raw.payload.merge_loan, raw.payload.site_origin, raw.payload.monthly_income_after_tax, raw.payload.query_params, raw.payload.other_monthly_income_after_tax, raw.payload.consolidation_amount, raw.payload.rental_monthly_income_before_tax, raw.payload.id, raw.payload.business_registration_date, raw.payload.other_monthly_income_before_tax, CASE WHEN raw.payload.mobile_phone IS NOT NULL  AND raw.payload.mobile_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.mobile_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.mobile_phone AS STRING) END AS mobile_phone, raw.payload.military_service_status, raw.payload.employment_since_month, raw.payload.page, raw.payload.num_dependants, raw.payload.is_cart_abandonment, raw.payload.total_amount, CASE WHEN raw.payload.email IS NOT NULL  AND raw.payload.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.email AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.email AS STRING) END AS email, raw.payload.spouse_monthly_income_before_tax, raw.payload.internal_cookie, raw.payload.accept_news_letter, raw.payload.home_type, raw.payload.employment_to_month) AS payload, raw.* EXCEPT(payload),CASE WHEN (raw.payload.national_id IS NOT NULL AND raw.payload.national_id <> "" AND VAULT.uuid IS NOT NULL) OR LOWER(raw.payload.national_id) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream_no|marketing_contact_service_contact_blocks_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_no.marketing_contact_service_contact_blocks_sgds_r`
sambla_group_data_stream_no|marketing_contact_service_fully_blocked_contacts_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.payload.national_id AS STRING)), "[^0-9]", ""), 11) AS ssn_clean FROM`data-domain-data-warehouse.sambla_group_data_stream_no.marketing_contact_service_fully_blocked_contacts_sgds_r` raw) SELECT STRUCT(raw.payload.updated_at, raw.payload.block_expiration, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, CASE WHEN raw.payload.telemarketing IS NOT NULL  AND raw.payload.telemarketing <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.telemarketing AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.telemarketing AS STRING) END AS telemarketing, CASE WHEN raw.payload.push_notifications IS NOT NULL  AND raw.payload.push_notifications <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.push_notifications AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.push_notifications AS STRING) END AS push_notifications, raw.payload.created_at, raw.payload.block_reason, CASE WHEN raw.payload.mobile_phone IS NOT NULL  AND raw.payload.mobile_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.mobile_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.mobile_phone AS STRING) END AS mobile_phone, raw.payload.id, raw.payload.other_info, CASE WHEN raw.payload.email IS NOT NULL  AND raw.payload.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.email AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.email AS STRING) END AS email) AS payload, raw.* EXCEPT(payload),CASE WHEN (raw.payload.national_id IS NOT NULL AND raw.payload.national_id <> "" AND VAULT.uuid IS NOT NULL) OR LOWER(raw.payload.national_id) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream|payments_api_RecurringPaymentEvent_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream.payments_api_RecurringPaymentEvent_sgds_r`
sambla_group_data_stream_no|exp_bidding_service_bid_accepts_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_no.exp_bidding_service_bid_accepts_sgds_r`
sambla_group_data_stream_fi|exp_tracking_service_cookies_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.exp_tracking_service_cookies_sgds_r`
sambla_group_data_stream_no|exp_customer_service_customers_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.payload.national_id AS STRING)), "[^0-9]", ""), 11) AS ssn_clean FROM`data-domain-data-warehouse.sambla_group_data_stream_no.exp_customer_service_customers_sgds_r` raw) SELECT STRUCT(raw.payload.move_in_date, raw.payload.birth_date, CASE WHEN raw.payload.street_address IS NOT NULL  AND raw.payload.street_address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.street_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.street_address AS STRING) END AS street_address, raw.payload.updated_at, CASE WHEN raw.payload.email IS NOT NULL  AND raw.payload.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.email AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.email AS STRING) END AS email, CASE WHEN raw.payload.postal_code IS NOT NULL  AND raw.payload.postal_code <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.postal_code AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.postal_code AS STRING) END AS postal_code, CASE WHEN raw.payload.first_name IS NOT NULL  AND raw.payload.first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.first_name AS STRING) END AS first_name, CASE WHEN raw.payload.city IS NOT NULL  AND raw.payload.city <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.city AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.city AS STRING) END AS city, raw.payload.latest_credit_check_done_at, raw.payload.valid_national_id, raw.payload.marked_for_delete, CASE WHEN raw.payload.mobile_phone IS NOT NULL  AND raw.payload.mobile_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.mobile_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.mobile_phone AS STRING) END AS mobile_phone, raw.payload.id, raw.payload.created_at, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, CASE WHEN raw.payload.last_name IS NOT NULL  AND raw.payload.last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_name AS STRING) END AS last_name, raw.payload.country) AS payload, raw.* EXCEPT(payload),CASE WHEN (raw.payload.national_id IS NOT NULL AND raw.payload.national_id <> "" AND VAULT.uuid IS NOT NULL) OR LOWER(raw.payload.national_id) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream_no|marketing_contact_service_contact_tokens_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_no.marketing_contact_service_contact_tokens_sgds_r`
sambla_group_data_stream_no|exp_tracking_service_query_params_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream_no.exp_tracking_service_query_params_sgds_r`
sambla_group_data_stream|exp_tracking_service_query_params_sgds_r|SELECT * , False AS is_anonymised FROM `data-domain-data-warehouse.sambla_group_data_stream.exp_tracking_service_query_params_sgds_r`
