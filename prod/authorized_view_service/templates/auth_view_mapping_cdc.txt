sambla_group_data_stream|credit_report_service_credit_reports_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(CAST(raw.payload.national_id AS STRING), "[^0-9]", ""), 12) AS ssn_clean ,_PARTITIONTIME AS date_partition  FROM`data-domain-data-warehouse.sambla_group_data_stream.credit_report_service_credit_reports_sgds_r` raw) SELECT STRUCT(CASE WHEN raw.payload.street_address IS NOT NULL  AND raw.payload.street_address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.street_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.street_address AS STRING) END AS street_address, raw.payload.blocked_description, raw.payload.uc_registration_date, raw.payload.product_type, raw.payload.score, raw.payload.taxed_annual_income, raw.payload.unregistered, CASE WHEN raw.payload.postal_code IS NOT NULL  AND raw.payload.postal_code <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.postal_code AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.postal_code AS STRING) END AS postal_code, raw.payload.previous_taxed_annual_income, raw.payload.customer_id, raw.payload.move_in_date, raw.payload.latest_payment_complaint, raw.payload.id, raw.payload.number_of_payment_complaints, raw.payload.debt_balance, CASE WHEN raw.payload.xml IS NOT NULL  AND raw.payload.xml <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.xml AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.xml AS STRING) END AS xml, raw.payload.blocked_code, CASE WHEN raw.payload.city IS NOT NULL  AND raw.payload.city <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.city AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.city AS STRING) END AS city, raw.payload.number_of_reports_12_months, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, raw.payload.previous_capital_deficit, raw.payload.has_debt_reconstruction, raw.payload.fetched_at, raw.payload.payment_complaint, raw.payload.country, raw.payload.major_city_inhabitant, CASE WHEN raw.payload.temporary_address IS NOT NULL  AND raw.payload.temporary_address <> 0 AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.temporary_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.temporary_address AS STRING) END AS temporary_address, raw.payload.template_code, CASE WHEN raw.payload.last_name IS NOT NULL  AND raw.payload.last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_name AS STRING) END AS last_name, raw.payload.trustee_appointed, raw.payload.minor, raw.payload.taxed_year, CASE WHEN raw.payload.first_name IS NOT NULL  AND raw.payload.first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.first_name AS STRING) END AS first_name, raw.payload.creditor_code, CASE WHEN raw.payload.secret_address IS NOT NULL  AND raw.payload.secret_address <> 0 AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.secret_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.secret_address AS STRING) END AS secret_address, raw.payload.applicant_draft_id, raw.payload.debt_reconciliation_date, raw.payload.capital_deficit, raw.payload.previous_taxed_year, raw.payload.no_visit_address, raw.payload.template_passed) AS payload, raw.* EXCEPT(payload),CASE WHEN (CAST(raw.payload.national_id AS STRING) IS NOT NULL AND CAST(raw.payload.national_id AS STRING) <> "" AND CAST(raw.payload.national_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.payload.national_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream|exp_bidding_service_bid_logs_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream.exp_bidding_service_bid_logs_sgds_r`
sambla_group_data_stream|exp_bidding_service_bidding_logs_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream.exp_bidding_service_bidding_logs_sgds_r`
sambla_group_data_stream|exp_bidding_service_invite_logs_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream.exp_bidding_service_invite_logs_sgds_r`
sambla_group_data_stream|exp_customer_service_customers_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(CAST(raw.payload.national_id AS STRING), "[^0-9]", ""), 12) AS ssn_clean ,_PARTITIONTIME AS date_partition  FROM`data-domain-data-warehouse.sambla_group_data_stream.exp_customer_service_customers_sgds_r` raw) SELECT STRUCT(raw.payload.valid_national_id, raw.payload.birth_date, raw.payload.created_at, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, raw.payload.updated_at, raw.payload.move_in_date, raw.payload.marked_for_delete, CASE WHEN raw.payload.last_name IS NOT NULL  AND raw.payload.last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_name AS STRING) END AS last_name, raw.payload.latest_credit_check_done_at, CASE WHEN raw.payload.city IS NOT NULL  AND raw.payload.city <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.city AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.city AS STRING) END AS city, CASE WHEN raw.payload.first_name IS NOT NULL  AND raw.payload.first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.first_name AS STRING) END AS first_name, CASE WHEN raw.payload.postal_code IS NOT NULL  AND raw.payload.postal_code <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.postal_code AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.postal_code AS STRING) END AS postal_code, raw.payload.country, CASE WHEN raw.payload.street_address IS NOT NULL  AND raw.payload.street_address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.street_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.street_address AS STRING) END AS street_address, raw.payload.id, CASE WHEN raw.payload.mobile_phone IS NOT NULL  AND raw.payload.mobile_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.mobile_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.mobile_phone AS STRING) END AS mobile_phone, CASE WHEN raw.payload.email IS NOT NULL  AND raw.payload.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.email AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.email AS STRING) END AS email) AS payload, raw.* EXCEPT(payload),CASE WHEN (CAST(raw.payload.national_id AS STRING) IS NOT NULL AND CAST(raw.payload.national_id AS STRING) <> "" AND CAST(raw.payload.national_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.payload.national_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
helios_staging|insurance_quotes_ppi_p|SELECT * , False AS is_anonymised, FROM `data-domain-data-warehouse.helios_staging.insurance_quotes_ppi_p`
sambla_group_data_stream|exp_bidding_service_bid_accepts_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream.exp_bidding_service_bid_accepts_sgds_r`
sambla_group_data_stream|exp_bidding_service_bids_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream.exp_bidding_service_bids_sgds_r`
sambla_group_data_stream|exp_bidding_service_creditor_products_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream.exp_bidding_service_creditor_products_sgds_r`
sambla_group_data_stream|exp_loan_application_service_applicant_drafts_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(CAST(raw.payload.national_id AS STRING), "[^0-9]", ""), 12) AS ssn_clean ,_PARTITIONTIME AS date_partition  FROM`data-domain-data-warehouse.sambla_group_data_stream.exp_loan_application_service_applicant_drafts_sgds_r` raw) SELECT STRUCT(CASE WHEN raw.payload.employer_name IS NOT NULL  AND raw.payload.employer_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.employer_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.employer_name AS STRING) END AS employer_name, raw.payload.move_in_date, raw.payload.monthly_income_before_tax, raw.payload.education_level, raw.payload.other_income_source, raw.payload.occupation_title, raw.payload.home_cost, raw.payload.employment_to, raw.payload.employment_industry, raw.payload.civil_status, raw.payload.monthly_rental_income, raw.payload.military_service_status, raw.payload.employment_since, raw.payload.citizenship, raw.payload.home_type, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, CASE WHEN raw.payload.mobile_phone IS NOT NULL  AND raw.payload.mobile_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.mobile_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.mobile_phone AS STRING) END AS mobile_phone, raw.payload.employment_type, raw.payload.rental_monthly_income_before_tax, raw.payload.monthly_child_alimony_cost, raw.payload.num_household_adults_employed, CASE WHEN raw.payload.email IS NOT NULL  AND raw.payload.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.email AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.email AS STRING) END AS email, raw.payload.home_type_category, raw.payload.updated_at, raw.payload.created_at, raw.payload.other_living_cost, CASE WHEN raw.payload.bank_account IS NOT NULL  AND raw.payload.bank_account <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.bank_account AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.bank_account AS STRING) END AS bank_account, raw.payload.has_credit_card, raw.payload.id, raw.payload.num_dependants, CASE WHEN raw.payload.business_organization_number IS NOT NULL  AND raw.payload.business_organization_number <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.business_organization_number AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.business_organization_number AS STRING) END AS business_organization_number, raw.payload.other_monthly_income_before_tax, raw.payload.spouse_monthly_income_before_tax, raw.payload.has_foreign_currency_income, raw.payload.num_household_adults, raw.payload.business_registration_date, raw.payload.other_monthly_income_after_tax, raw.payload.monthly_income_after_tax, raw.payload.spouse_monthly_income_after_tax, raw.payload.occupation_category, CASE WHEN raw.payload.employer_phone IS NOT NULL  AND raw.payload.employer_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.employer_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.employer_phone AS STRING) END AS employer_phone, raw.payload.home_type_other_description) AS payload, raw.* EXCEPT(payload),CASE WHEN (CAST(raw.payload.national_id AS STRING) IS NOT NULL AND CAST(raw.payload.national_id AS STRING) <> "" AND CAST(raw.payload.national_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.payload.national_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream|exp_loan_application_service_loan_application_versions_sgds_r|WITH raw_data_with_stack AS (SELECT *, "cdc" as stack ,_PARTITIONTIME AS date_partition  FROM`data-domain-data-warehouse.sambla_group_data_stream.exp_loan_application_service_loan_application_versions_sgds_r` raw), stack_vault as ( select uuid, aead_key, loan_application_oid, stack from `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf`, unnest(history) as history where history.stack  = "cdc" )SELECT STRUCT(raw.payload.input_source, raw.payload.loan_application_id, raw.payload.created_at, raw.payload.total_loan, raw.payload.secondary_applicant_id, raw.payload.loan_application_draft_id, raw.payload.client_ip, raw.payload.attributed_affiliate, raw.payload.updated_at, raw.payload.desired_repayment_time, raw.payload.desired_mortgage_amortization_amount, raw.payload.site_origin, raw.payload.id, raw.payload.credit_check_consent, CASE WHEN raw.payload.bank_account IS NOT NULL  AND raw.payload.bank_account <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.bank_account AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.bank_account AS STRING) END AS bank_account, raw.payload.old_loan_repayment_time, raw.payload.accept_newsletter, raw.payload.applicant_id, raw.payload.auto_accept, raw.payload.purpose) AS payload, raw.* EXCEPT(payload),CASE WHEN (CAST(raw.payload.loan_application_id AS STRING) IS NOT NULL AND CAST(raw.payload.loan_application_id AS STRING) <> "" AND CAST(raw.payload.loan_application_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.payload.loan_application_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised  FROM raw_data_with_stack raw LEFT JOIN stack_vault vault ON CAST(raw.payload.loan_application_id AS STRING) = vault.loan_application_oid AND raw.stack = vault.stack
sambla_group_data_stream|exp_tracking_service_pageviews_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream.exp_tracking_service_pageviews_sgds_r`
sambla_group_data_stream|marketing_contact_service_cart_abandonment_contacts_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(CAST(raw.payload.national_id AS STRING), "[^0-9]", ""), 12) AS ssn_clean ,_PARTITIONTIME AS date_partition  FROM`data-domain-data-warehouse.sambla_group_data_stream.marketing_contact_service_cart_abandonment_contacts_sgds_r` raw) SELECT STRUCT(CASE WHEN raw.payload.employer_name IS NOT NULL  AND raw.payload.employer_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.employer_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.employer_name AS STRING) END AS employer_name, raw.payload.education_level, raw.payload.occupation_category, raw.payload.id, raw.payload.site_origin, raw.payload.accept_news_letter, raw.payload.citizenship, raw.payload.internal_cookie, raw.payload.is_cart_abandonment, raw.payload.home_type_category, raw.payload.employment_industry, raw.payload.move_in_date, raw.payload.created_at, raw.payload.other_income_source, CASE WHEN raw.payload.mobile_phone IS NOT NULL  AND raw.payload.mobile_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.mobile_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.mobile_phone AS STRING) END AS mobile_phone, raw.payload.monthly_income_before_tax, raw.payload.prefill_token, raw.payload.monthly_salary, raw.payload.other_monthly_income_before_tax, raw.payload.spouse_monthly_income_before_tax, raw.payload.employment_since_month, raw.payload.civil_status, raw.payload.other_monthly_income_after_tax, raw.payload.num_dependants, raw.payload.query_params, raw.payload.page, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, raw.payload.merge_loan, raw.payload.employment_since, raw.payload.loan_purpose, raw.payload.consolidation_amount, raw.payload.employment_to_month, raw.payload.employment_type, raw.payload.bloomreach_cookie, raw.payload.occupation_title, raw.payload.business_registration_date, raw.payload.home_type, raw.payload.rental_monthly_income_before_tax, raw.payload.total_amount, raw.payload.monthly_income_after_tax, raw.payload.employment_to, CASE WHEN raw.payload.email IS NOT NULL  AND raw.payload.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.email AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.email AS STRING) END AS email, CASE WHEN raw.payload.business_organization_number IS NOT NULL  AND raw.payload.business_organization_number <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.business_organization_number AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.business_organization_number AS STRING) END AS business_organization_number, raw.payload.updated_at, raw.payload.repayment_time, raw.payload.home_cost, raw.payload.military_service_status, raw.payload.other_income) AS payload, raw.* EXCEPT(payload),CASE WHEN (CAST(raw.payload.national_id AS STRING) IS NOT NULL AND CAST(raw.payload.national_id AS STRING) <> "" AND CAST(raw.payload.national_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.payload.national_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream|marketing_contact_service_mortgage_cart_abandonment_contacts_sgds_r|WITH vault_mobiles_flattened_intial AS (SELECT history.mobile_phone AS mobile,history.stack,history.created_at,vault.uuid,vault.aead_key FROM `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` AS vault CROSS JOIN UNNEST(vault.history) AS history WHERE history.mobile_phone IS NOT NULL AND history.mobile_phone != ""), vault_mobiles_flattened AS ( SELECT mobile, stack, uuid, aead_key FROM vault_mobiles_flattened_intial QUALIFY ROW_NUMBER() OVER (PARTITION BY mobile ORDER BY created_at DESC) = 1 ), vault_emails_flattened_initial AS (SELECT history.email AS email,history.stack,history.created_at,vault.uuid,vault.aead_key FROM `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` AS vault CROSS JOIN UNNEST(vault.history) AS history WHERE history.email IS NOT NULL AND history.email != ""), vault_emails_flattened AS ( SELECT email, stack, uuid, aead_key FROM vault_emails_flattened_initial QUALIFY ROW_NUMBER() OVER (PARTITION BY email ORDER BY created_at DESC) = 1 ), mobile_cleaned AS ( SELECT *, CASE WHEN LEFT(raw.payload.mobile_phone, 2) = " +" THEN SUBSTRING(raw.payload.mobile_phone, 2) WHEN raw.payload.mobile_phone NOT LIKE "%+%" THEN CASE WHEN LEFT(raw.payload.mobile_phone, 2) = "46" THEN CONCAT("+", raw.payload.mobile_phone)WHEN LEFT(raw.payload.mobile_phone, 3) = "046" THEN CONCAT("+", SUBSTRING(raw.payload.mobile_phone, 2)) WHEN LEFT(raw.payload.mobile_phone, 4) = "0046" THEN CONCAT("+", SUBSTRING(raw.payload.mobile_phone, 3)) WHEN LEFT(raw.payload.mobile_phone, 1) = "0" THEN CONCAT("+46", SUBSTRING(raw.payload.mobile_phone, 2)) ELSE "+46" || payload.mobile_phone END ELSE CASE WHEN LENGTH(REPLACE(raw.payload.mobile_phone, " ", "")) > 6 AND LENGTH(REPLACE(raw.payload.mobile_phone, " ", "")) < 18 THEN REPLACE(raw.payload.mobile_phone, " ", "") END END AS mobile_clean, _PARTITIONTIME AS date_partition  FROM`data-domain-data-warehouse.sambla_group_data_stream.marketing_contact_service_mortgage_cart_abandonment_contacts_sgds_r` raw ) SELECT STRUCT(raw.payload.page, CASE WHEN raw.payload.email IS NOT NULL  AND raw.payload.email <> '' AND COALESCE(vault_email.uuid, vault_mobile.uuid) IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(COALESCE(vault_email.aead_key, vault_mobile.aead_key), CAST(raw.payload.email AS STRING), COALESCE(vault_email.uuid, vault_mobile.uuid))) ELSE CAST(raw.payload.email AS STRING) END AS email, raw.payload.purpose, CASE WHEN raw.payload.mobile_phone IS NOT NULL  AND raw.payload.mobile_phone <> '' AND COALESCE(vault_email.uuid, vault_mobile.uuid) IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(COALESCE(vault_email.aead_key, vault_mobile.aead_key), CAST(raw.payload.mobile_phone AS STRING), COALESCE(vault_email.uuid, vault_mobile.uuid))) ELSE CAST(raw.payload.mobile_phone AS STRING) END AS mobile_phone, raw.payload.updated_at, raw.payload.accept_news_letter, raw.payload.created_at, raw.payload.site_origin, raw.payload.id) AS payload, raw.* EXCEPT(payload),CASE WHEN (raw.payload.email IS NOT NULL AND raw.payload.email <> "" AND raw.payload.email <> "0" AND vault_email.uuid IS NOT NULL) OR (raw.payload.mobile_phone IS NOT NULL AND raw.payload.mobile_phone <> "" AND raw.payload.mobile_phone <> "0" AND vault_mobile.uuid IS NOT NULL) OR LOWER(raw.payload.mobile_phone) =  "anonymized" OR LOWER(raw.payload.email) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM mobile_cleaned raw LEFT JOIN vault_mobiles_flattened vault_mobile ON raw.mobile_clean = vault_mobile.mobile LEFT JOIN vault_emails_flattened vault_email ON raw.payload.email = vault_email.email 
sambla_group_data_stream|payments_api_InvoiceFile_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream.payments_api_InvoiceFile_sgds_r`
sambla_group_data_stream|payments_api_Payment_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream.payments_api_Payment_sgds_r`
sambla_group_data_stream_fi|exp_bidding_service_bid_accepts_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.exp_bidding_service_bid_accepts_sgds_r`
sambla_group_data_stream|exp_bidding_service_creditors_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream.exp_bidding_service_creditors_sgds_r`
sambla_group_data_stream|exp_bidding_service_invites_sgds_r|WITH raw_data_with_stack AS (SELECT *, "cdc" as stack ,_PARTITIONTIME AS date_partition  FROM`data-domain-data-warehouse.sambla_group_data_stream.exp_bidding_service_invites_sgds_r` raw), stack_vault as ( select uuid, aead_key, loan_application_oid, stack from `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf`, unnest(history) as history where history.stack  = "cdc" )SELECT STRUCT(CASE WHEN raw.payload.creditor_data IS NOT NULL  AND raw.payload.creditor_data <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.creditor_data AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.creditor_data AS STRING) END AS creditor_data, raw.payload.application_type, raw.payload.id, raw.payload.created_at, raw.payload.creditor_id, raw.payload.broker_origin, raw.payload.delayed_queue_message_id, raw.payload.application_version_id, raw.payload.declined, raw.payload.creditor_product_id, raw.payload.co_applicant_removed, raw.payload.broker_connection, raw.payload.rejected, raw.payload.updated_at, raw.payload.deadline, raw.payload.sent_to_gateway_at, raw.payload.creditor_application_id, raw.payload.application_id) AS payload, raw.* EXCEPT(payload),CASE WHEN (CAST(raw.payload.application_id AS STRING) IS NOT NULL AND CAST(raw.payload.application_id AS STRING) <> "" AND CAST(raw.payload.application_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.payload.application_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised  FROM raw_data_with_stack raw LEFT JOIN stack_vault vault ON CAST(raw.payload.application_id AS STRING) = vault.loan_application_oid AND raw.stack = vault.stack
sambla_group_data_stream|exp_loan_application_service_current_loans_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream.exp_loan_application_service_current_loans_sgds_r`
sambla_group_data_stream|exp_loan_application_service_loan_applications_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream.exp_loan_application_service_loan_applications_sgds_r`
sambla_group_data_stream|marketing_contact_service_contact_blocks_sgds_r|WITH vault_mobiles_flattened_intial AS (SELECT history.mobile_phone AS mobile,history.stack,history.created_at,vault.uuid,vault.aead_key FROM `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` AS vault CROSS JOIN UNNEST(vault.history) AS history WHERE history.mobile_phone IS NOT NULL AND history.mobile_phone != ""), vault_mobiles_flattened AS ( SELECT mobile, stack, uuid, aead_key FROM vault_mobiles_flattened_intial QUALIFY ROW_NUMBER() OVER (PARTITION BY mobile ORDER BY created_at DESC) = 1 ), vault_emails_flattened_initial AS (SELECT history.email AS email,history.stack,history.created_at,vault.uuid,vault.aead_key FROM `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` AS vault CROSS JOIN UNNEST(vault.history) AS history WHERE history.email IS NOT NULL AND history.email != ""), vault_emails_flattened AS ( SELECT email, stack, uuid, aead_key FROM vault_emails_flattened_initial QUALIFY ROW_NUMBER() OVER (PARTITION BY email ORDER BY created_at DESC) = 1 ), mobile_and_ssn_cleaned AS ( SELECT *, CASE WHEN raw.payload.type != "mobile_phone" THEN NULL WHEN LEFT(raw.payload.contact_detail, 2) = " +" THEN SUBSTRING(raw.payload.contact_detail, 2) WHEN raw.payload.contact_detail NOT LIKE "%+%" THEN CASE WHEN LEFT(raw.payload.contact_detail, 2) = "46" THEN CONCAT("+", raw.payload.contact_detail)WHEN LEFT(raw.payload.contact_detail, 3) = "046" THEN CONCAT("+", SUBSTRING(raw.payload.contact_detail, 2)) WHEN LEFT(raw.payload.contact_detail, 4) = "0046" THEN CONCAT("+", SUBSTRING(raw.payload.contact_detail, 3)) WHEN LEFT(raw.payload.contact_detail, 1) = "0" THEN CONCAT("+46", SUBSTRING(raw.payload.contact_detail, 2)) ELSE "+46" || payload.contact_detail END ELSE CASE WHEN LENGTH(REPLACE(raw.payload.contact_detail, " ", "")) > 6 AND LENGTH(REPLACE(raw.payload.contact_detail, " ", "")) < 18 THEN REPLACE(raw.payload.contact_detail, " ", "") END END AS mobile_clean, _PARTITIONTIME AS date_partition, CASE WHEN raw.payload.type != "post" THEN NULL ELSE LEFT(REGEXP_REPLACE(CAST(raw.payload.contact_detail AS STRING), "[^0-9]", ""), 12) END AS ssn_clean FROM`data-domain-data-warehouse.sambla_group_data_stream.marketing_contact_service_contact_blocks_sgds_r` raw ) SELECT STRUCT(raw.payload.site_origin, CASE WHEN raw.payload.contact_detail IS NOT NULL  AND raw.payload.contact_detail <> '' AND COALESCE(vault.uuid, vault_email.uuid, vault_mobile.uuid) IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(COALESCE(vault.aead_key, vault_email.aead_key, vault_mobile.aead_key), CAST(raw.payload.contact_detail AS STRING), COALESCE(vault.uuid, vault_email.uuid, vault_mobile.uuid))) ELSE CAST(raw.payload.contact_detail AS STRING) END AS contact_detail, raw.payload.source, raw.payload.id, raw.payload.created_at, raw.payload.type, raw.payload.campaign_id) AS payload, raw.* EXCEPT(payload),CASE WHEN (raw.payload.contact_detail IS NOT NULL AND raw.payload.contact_detail <> "" AND raw.payload.contact_detail <> "0" AND COALESCE(vault.uuid, vault_email.uuid, vault_mobile.uuid) IS NOT NULL) THEN TRUE ELSE FALSE END AS is_anonymised FROM mobile_and_ssn_cleaned raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` vault ON CASE WHEN raw.payload.type = "post" THEN raw.ssn_clean ELSE NULL END = vault.ssn LEFT JOIN vault_emails_flattened vault_email ON CASE WHEN raw.payload.type = "email" THEN raw.payload.contact_detail ELSE NULL END = vault_email.email LEFT JOIN vault_mobiles_flattened vault_mobile ON CASE WHEN raw.payload.type = "mobile_phone" THEN raw.mobile_clean ELSE NULL END = vault_mobile.mobile 
sambla_group_data_stream|marketing_contact_service_contacts_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(CAST(raw.payload.national_id AS STRING), "[^0-9]", ""), 12) AS ssn_clean ,_PARTITIONTIME AS date_partition  FROM`data-domain-data-warehouse.sambla_group_data_stream.marketing_contact_service_contacts_sgds_r` raw) SELECT STRUCT(raw.payload.last_application_debt_balance, CASE WHEN raw.payload.last_application_employer_name IS NOT NULL  AND raw.payload.last_application_employer_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_application_employer_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_application_employer_name AS STRING) END AS last_application_employer_name, raw.payload.last_accepted_at, raw.payload.last_application_employment_industry, raw.payload.last_paid_creditor_product, CASE WHEN raw.payload.email IS NOT NULL  AND raw.payload.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.email AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.email AS STRING) END AS email, raw.payload.last_application_other_monthly_income_before_tax, raw.payload.last_application_payment_complaint, CASE WHEN raw.payload.postal_code IS NOT NULL  AND raw.payload.postal_code <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.postal_code AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.postal_code AS STRING) END AS postal_code, raw.payload.has_been_primary_applicant, raw.payload.last_application_home_cost, raw.payload.created_at, raw.payload.ppi, raw.payload.last_application_employment_since, raw.payload.last_application_education_level, raw.payload.last_application_move_in_date, raw.payload.last_application_business_registration_date, raw.payload.last_application_has_co_applicant, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, raw.payload.last_application_home_type_category, raw.payload.site_origin, raw.payload.infocom_consent, raw.payload.last_application_desired_repayment_time, raw.payload.last_application_id, raw.payload.interest_watch, raw.payload.last_application_other_income_source, raw.payload.creditor_block_until, CASE WHEN raw.payload.city IS NOT NULL  AND raw.payload.city <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.city AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.city AS STRING) END AS city, raw.payload.marketing_consent_expires_at, raw.payload.id, raw.payload.last_application_occupation_category, raw.payload.last_application_accepted, raw.payload.last_application_spouse_monthly_income_before_tax, raw.payload.ppi_deactivated_at, raw.payload.customer_sendouts_block_until, CASE WHEN raw.payload.last_application_business_organization_number IS NOT NULL  AND raw.payload.last_application_business_organization_number <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_application_business_organization_number AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_application_business_organization_number AS STRING) END AS last_application_business_organization_number, raw.payload.last_application_new_loan, raw.payload.total_num_applications, raw.payload.last_application_created_at, raw.payload.last_application_is_co_applicant, raw.payload.last_application_uc_score, raw.payload.last_application_monthly_income_before_tax, raw.payload.last_application_num_invited_creditors, raw.payload.last_application_granted, raw.payload.last_application_num_dependants, raw.payload.last_application_employment_to, raw.payload.last_application_occupation_title, raw.payload.last_application_civil_status, CASE WHEN raw.payload.first_name IS NOT NULL  AND raw.payload.first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.first_name AS STRING) END AS first_name, CASE WHEN raw.payload.last_name IS NOT NULL  AND raw.payload.last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_name AS STRING) END AS last_name, raw.payload.last_application_completed, raw.payload.last_paid_at, raw.payload.last_application_home_type, raw.payload.last_application_lowest_apr, raw.payload.last_application_purpose, raw.payload.online_interest_watch, raw.payload.last_application_citizenship, raw.payload.last_application_military_service_status, raw.payload.last_application_total_loan, raw.payload.last_application_paid, raw.payload.last_application_monthly_income_after_tax, raw.payload.last_application_initial_marketing_consent, CASE WHEN raw.payload.last_application_employer_phone IS NOT NULL  AND raw.payload.last_application_employer_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_application_employer_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_application_employer_phone AS STRING) END AS last_application_employer_phone, raw.payload.last_application_other_monthly_income_after_tax, raw.payload.last_application_rental_monthly_income_before_tax, raw.payload.last_application_num_bids, raw.payload.last_application_employment_type, raw.payload.last_application_granted_amount, CASE WHEN raw.payload.mobile_phone IS NOT NULL  AND raw.payload.mobile_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.mobile_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.mobile_phone AS STRING) END AS mobile_phone, raw.payload.updated_at) AS payload, raw.* EXCEPT(payload),CASE WHEN (CAST(raw.payload.national_id AS STRING) IS NOT NULL AND CAST(raw.payload.national_id AS STRING) <> "" AND CAST(raw.payload.national_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.payload.national_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream_fi|exp_bidding_service_bid_additional_requirements_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.exp_bidding_service_bid_additional_requirements_sgds_r`
sambla_group_data_stream_fi|exp_bidding_service_bids_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.exp_bidding_service_bids_sgds_r`
sambla_group_data_stream_fi|exp_customer_service_customers_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.payload.national_id AS STRING)), "[^0-9-+A-Z]", ""), 11) AS ssn_clean ,_PARTITIONTIME AS date_partition  FROM`data-domain-data-warehouse.sambla_group_data_stream_fi.exp_customer_service_customers_sgds_r` raw) SELECT STRUCT(raw.payload.move_in_date, raw.payload.latest_credit_check_done_at, raw.payload.created_at, raw.payload.marked_for_delete, CASE WHEN raw.payload.last_name IS NOT NULL  AND raw.payload.last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_name AS STRING) END AS last_name, CASE WHEN raw.payload.email IS NOT NULL  AND raw.payload.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.email AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.email AS STRING) END AS email, raw.payload.birth_date, CASE WHEN raw.payload.postal_code IS NOT NULL  AND raw.payload.postal_code <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.postal_code AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.postal_code AS STRING) END AS postal_code, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, raw.payload.id, raw.payload.valid_national_id, CASE WHEN raw.payload.city IS NOT NULL  AND raw.payload.city <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.city AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.city AS STRING) END AS city, CASE WHEN raw.payload.mobile_phone IS NOT NULL  AND raw.payload.mobile_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.mobile_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.mobile_phone AS STRING) END AS mobile_phone, CASE WHEN raw.payload.street_address IS NOT NULL  AND raw.payload.street_address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.street_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.street_address AS STRING) END AS street_address, raw.payload.country, CASE WHEN raw.payload.first_name IS NOT NULL  AND raw.payload.first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.first_name AS STRING) END AS first_name, raw.payload.updated_at) AS payload, raw.* EXCEPT(payload),CASE WHEN (CAST(raw.payload.national_id AS STRING) IS NOT NULL AND CAST(raw.payload.national_id AS STRING) <> "" AND CAST(raw.payload.national_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.payload.national_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream_fi|exp_loan_application_service_applicants_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.payload.national_id AS STRING)), "[^0-9-+A-Z]", ""), 11) AS ssn_clean ,_PARTITIONTIME AS date_partition  FROM`data-domain-data-warehouse.sambla_group_data_stream_fi.exp_loan_application_service_applicants_sgds_r` raw) SELECT STRUCT(CASE WHEN raw.payload.email IS NOT NULL  AND raw.payload.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.email AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.email AS STRING) END AS email, raw.payload.has_foreign_currency_income, raw.payload.occupation_title, raw.payload.rental_monthly_income_before_tax, raw.payload.spouse_monthly_income_after_tax, CASE WHEN raw.payload.street_address IS NOT NULL  AND raw.payload.street_address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.street_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.street_address AS STRING) END AS street_address, raw.payload.num_household_adults_employed, raw.payload.monthly_rental_income, raw.payload.id, raw.payload.occupation_category, raw.payload.home_type_other_description, raw.payload.employment_type, raw.payload.spouse_monthly_income_before_tax, raw.payload.move_in_date, raw.payload.employment_industry, raw.payload.citizenship, raw.payload.customer_id, CASE WHEN raw.payload.mobile_phone IS NOT NULL  AND raw.payload.mobile_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.mobile_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.mobile_phone AS STRING) END AS mobile_phone, raw.payload.is_politically_exposed, raw.payload.other_monthly_income_before_tax, raw.payload.monthly_child_alimony_cost, raw.payload.military_service_status, raw.payload.education_level, raw.payload.created_at, raw.payload.other_monthly_income_after_tax, CASE WHEN raw.payload.employer_phone IS NOT NULL  AND raw.payload.employer_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.employer_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.employer_phone AS STRING) END AS employer_phone, raw.payload.birth_date, raw.payload.monthly_income_after_tax, raw.payload.business_registration_date, raw.payload.other_income_source, raw.payload.other_living_cost, CASE WHEN raw.payload.last_name IS NOT NULL  AND raw.payload.last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_name AS STRING) END AS last_name, CASE WHEN raw.payload.postal_code IS NOT NULL  AND raw.payload.postal_code <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.postal_code AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.postal_code AS STRING) END AS postal_code, raw.payload.num_dependants, raw.payload.country, CASE WHEN raw.payload.bank_account IS NOT NULL  AND raw.payload.bank_account <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.bank_account AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.bank_account AS STRING) END AS bank_account, raw.payload.eu_sanction_validated_at, raw.payload.civil_status, raw.payload.home_type, raw.payload.updated_at, raw.payload.latest_credit_default, raw.payload.home_cost, CASE WHEN raw.payload.city IS NOT NULL  AND raw.payload.city <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.city AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.city AS STRING) END AS city, raw.payload.monthly_income_before_tax, raw.payload.employment_since, CASE WHEN raw.payload.business_organization_number IS NOT NULL  AND raw.payload.business_organization_number <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.business_organization_number AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.business_organization_number AS STRING) END AS business_organization_number, CASE WHEN raw.payload.employer_name IS NOT NULL  AND raw.payload.employer_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.employer_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.employer_name AS STRING) END AS employer_name, CASE WHEN raw.payload.first_name IS NOT NULL  AND raw.payload.first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.first_name AS STRING) END AS first_name, raw.payload.num_household_adults, raw.payload.home_type_category, raw.payload.has_credit_card, raw.payload.employment_to, raw.payload.applicant_draft_id, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id) AS payload, raw.* EXCEPT(payload),CASE WHEN (CAST(raw.payload.national_id AS STRING) IS NOT NULL AND CAST(raw.payload.national_id AS STRING) <> "" AND CAST(raw.payload.national_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.payload.national_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream_fi|exp_loan_application_service_current_loan_drafts_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.exp_loan_application_service_current_loan_drafts_sgds_r`
sambla_group_data_stream_fi|exp_loan_application_service_current_loans_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.exp_loan_application_service_current_loans_sgds_r`
helios_staging|invoices_ppi_p|SELECT * , False AS is_anonymised, FROM `data-domain-data-warehouse.helios_staging.invoices_ppi_p`
sambla_group_data_stream|exp_loan_application_service_applicants_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(CAST(raw.payload.national_id AS STRING), "[^0-9]", ""), 12) AS ssn_clean ,_PARTITIONTIME AS date_partition  FROM`data-domain-data-warehouse.sambla_group_data_stream.exp_loan_application_service_applicants_sgds_r` raw) SELECT STRUCT(raw.payload.military_service_status, raw.payload.other_income_source, raw.payload.move_in_date, CASE WHEN raw.payload.email IS NOT NULL  AND raw.payload.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.email AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.email AS STRING) END AS email, raw.payload.other_living_cost, raw.payload.home_cost, raw.payload.monthly_income_after_tax, raw.payload.birth_date, raw.payload.has_foreign_currency_income, CASE WHEN raw.payload.last_name IS NOT NULL  AND raw.payload.last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_name AS STRING) END AS last_name, raw.payload.rental_monthly_income_before_tax, raw.payload.home_type_category, raw.payload.latest_credit_default, raw.payload.spouse_monthly_income_after_tax, raw.payload.num_household_adults_employed, raw.payload.is_politically_exposed, CASE WHEN raw.payload.postal_code IS NOT NULL  AND raw.payload.postal_code <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.postal_code AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.postal_code AS STRING) END AS postal_code, CASE WHEN raw.payload.mobile_phone IS NOT NULL  AND raw.payload.mobile_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.mobile_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.mobile_phone AS STRING) END AS mobile_phone, raw.payload.applicant_draft_id, raw.payload.home_type, raw.payload.employment_type, raw.payload.employment_industry, raw.payload.occupation_category, raw.payload.customer_id, raw.payload.created_at, raw.payload.civil_status, CASE WHEN raw.payload.city IS NOT NULL  AND raw.payload.city <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.city AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.city AS STRING) END AS city, raw.payload.country, raw.payload.education_level, raw.payload.monthly_income_before_tax, CASE WHEN raw.payload.street_address IS NOT NULL  AND raw.payload.street_address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.street_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.street_address AS STRING) END AS street_address, raw.payload.occupation_title, raw.payload.has_credit_card, raw.payload.citizenship, raw.payload.eu_sanction_validated_at, raw.payload.spouse_monthly_income_before_tax, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, raw.payload.monthly_rental_income, raw.payload.num_dependants, raw.payload.id, raw.payload.other_monthly_income_after_tax, CASE WHEN raw.payload.employer_phone IS NOT NULL  AND raw.payload.employer_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.employer_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.employer_phone AS STRING) END AS employer_phone, CASE WHEN raw.payload.first_name IS NOT NULL  AND raw.payload.first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.first_name AS STRING) END AS first_name, raw.payload.employment_to, raw.payload.employment_since, raw.payload.updated_at, raw.payload.other_monthly_income_before_tax, raw.payload.home_type_other_description, raw.payload.monthly_child_alimony_cost, CASE WHEN raw.payload.business_organization_number IS NOT NULL  AND raw.payload.business_organization_number <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.business_organization_number AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.business_organization_number AS STRING) END AS business_organization_number, raw.payload.num_household_adults, CASE WHEN raw.payload.employer_name IS NOT NULL  AND raw.payload.employer_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.employer_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.employer_name AS STRING) END AS employer_name, CASE WHEN raw.payload.bank_account IS NOT NULL  AND raw.payload.bank_account <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.bank_account AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.bank_account AS STRING) END AS bank_account, raw.payload.business_registration_date) AS payload, raw.* EXCEPT(payload),CASE WHEN (CAST(raw.payload.national_id AS STRING) IS NOT NULL AND CAST(raw.payload.national_id AS STRING) <> "" AND CAST(raw.payload.national_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.payload.national_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream|exp_loan_application_service_current_loan_drafts_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream.exp_loan_application_service_current_loan_drafts_sgds_r`
sambla_group_data_stream|exp_loan_application_service_loan_application_drafts_sgds_r|WITH raw_data_with_stack AS (SELECT *, "cdc" as stack ,_PARTITIONTIME AS date_partition  FROM`data-domain-data-warehouse.sambla_group_data_stream.exp_loan_application_service_loan_application_drafts_sgds_r` raw), stack_vault as ( select uuid, aead_key, loan_application_oid, stack from `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf`, unnest(history) as history where history.stack  = "cdc" )SELECT STRUCT(raw.payload.auto_accept, raw.payload.loan_application_id, raw.payload.secondary_applicant_draft_id, raw.payload.created_at, raw.payload.site_origin, raw.payload.accept_newsletter, raw.payload.desired_repayment_time, raw.payload.desired_mortgage_amortization_amount, raw.payload.updated_at, raw.payload.client_ip, raw.payload.total_loan, raw.payload.applicant_draft_id, raw.payload.old_loan_repayment_time, raw.payload.credit_check_consent, raw.payload.purpose, raw.payload.deactivated_at, raw.payload.input_source, CASE WHEN raw.payload.bank_account IS NOT NULL  AND raw.payload.bank_account <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.bank_account AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.bank_account AS STRING) END AS bank_account, raw.payload.id) AS payload, raw.* EXCEPT(payload),CASE WHEN (CAST(raw.payload.loan_application_id AS STRING) IS NOT NULL AND CAST(raw.payload.loan_application_id AS STRING) <> "" AND CAST(raw.payload.loan_application_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.payload.loan_application_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised  FROM raw_data_with_stack raw LEFT JOIN stack_vault vault ON CAST(raw.payload.loan_application_id AS STRING) = vault.loan_application_oid AND raw.stack = vault.stack
sambla_group_data_stream|exp_tracking_service_cookies_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream.exp_tracking_service_cookies_sgds_r`
sambla_group_data_stream|exp_tracking_service_query_params_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream.exp_tracking_service_query_params_sgds_r`
sambla_group_data_stream|identity_verification_service_identity_verification_log_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream.identity_verification_service_identity_verification_log_sgds_r`
sambla_group_data_stream|marketing_contact_service_contact_tokens_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream.marketing_contact_service_contact_tokens_sgds_r`
sambla_group_data_stream|payments_api_PaymentEvent_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream.payments_api_PaymentEvent_sgds_r`
sambla_group_data_stream|payments_api_RecurringPaymentEvent_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream.payments_api_RecurringPaymentEvent_sgds_r`
sambla_group_data_stream|payments_api__PaymentToProduct_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream.payments_api__PaymentToProduct_sgds_r`
sambla_group_data_stream|uc_service_credit_reports_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(CAST(raw.payload.national_id AS STRING), "[^0-9]", ""), 12) AS ssn_clean ,_PARTITIONTIME AS date_partition  FROM`data-domain-data-warehouse.sambla_group_data_stream.uc_service_credit_reports_sgds_r` raw) SELECT STRUCT(raw.payload.taxed_year, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, raw.payload.blocked_code, raw.payload.minor, raw.payload.major_city_inhabitant, CASE WHEN raw.payload.street_address IS NOT NULL  AND raw.payload.street_address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.street_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.street_address AS STRING) END AS street_address, raw.payload.template_code, CASE WHEN raw.payload.first_name IS NOT NULL  AND raw.payload.first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.first_name AS STRING) END AS first_name, raw.payload.score, raw.payload.debt_balance, raw.payload.taxed_annual_income, raw.payload.has_debt_reconstruction, raw.payload.payment_complaint, raw.payload.trustee_appointed, raw.payload.unregistered, raw.payload.previous_taxed_year, raw.payload.creditor_code, raw.payload.country, raw.payload.previous_capital_deficit, raw.payload.uc_registration_date, CASE WHEN raw.payload.city IS NOT NULL  AND raw.payload.city <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.city AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.city AS STRING) END AS city, raw.payload.product_type, raw.payload.debt_reconciliation_date, CASE WHEN raw.payload.secret_address IS NOT NULL  AND raw.payload.secret_address <> 0 AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.secret_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.secret_address AS STRING) END AS secret_address, raw.payload.template_passed, raw.payload.previous_taxed_annual_income, raw.payload.fetched_at, raw.payload.number_of_reports_12_months, raw.payload.applicant_draft_id, CASE WHEN raw.payload.last_name IS NOT NULL  AND raw.payload.last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_name AS STRING) END AS last_name, CASE WHEN raw.payload.temporary_address IS NOT NULL  AND raw.payload.temporary_address <> 0 AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.temporary_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.temporary_address AS STRING) END AS temporary_address, raw.payload.number_of_payment_complaints, raw.payload.capital_deficit, raw.payload.id, CASE WHEN raw.payload.postal_code IS NOT NULL  AND raw.payload.postal_code <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.postal_code AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.postal_code AS STRING) END AS postal_code, raw.payload.latest_payment_complaint, raw.payload.customer_id, raw.payload.no_visit_address, CASE WHEN raw.payload.xml IS NOT NULL  AND raw.payload.xml <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.xml AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.xml AS STRING) END AS xml, raw.payload.blocked_description) AS payload, raw.* EXCEPT(payload),CASE WHEN (CAST(raw.payload.national_id AS STRING) IS NOT NULL AND CAST(raw.payload.national_id AS STRING) <> "" AND CAST(raw.payload.national_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.payload.national_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream_fi|credit_report_service_credit_reports_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.payload.national_id AS STRING)), "[^0-9-+A-Z]", ""), 11) AS ssn_clean ,_PARTITIONTIME AS date_partition  FROM`data-domain-data-warehouse.sambla_group_data_stream_fi.credit_report_service_credit_reports_sgds_r` raw) SELECT STRUCT(raw.payload.minor, raw.payload.payment_complaint, raw.payload.country, raw.payload.debt_balance, raw.payload.blocked_code, raw.payload.has_debt_reconstruction, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, raw.payload.trustee_appointed, raw.payload.major_city_inhabitant, raw.payload.id, raw.payload.product_type, raw.payload.latest_payment_complaint, raw.payload.score, raw.payload.number_of_payment_complaints, raw.payload.previous_taxed_year, raw.payload.no_visit_address, raw.payload.previous_taxed_annual_income, CASE WHEN raw.payload.secret_address IS NOT NULL  AND raw.payload.secret_address <> 0 AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.secret_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.secret_address AS STRING) END AS secret_address, raw.payload.blocked_description, raw.payload.taxed_annual_income, CASE WHEN raw.payload.temporary_address IS NOT NULL  AND raw.payload.temporary_address <> 0 AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.temporary_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.temporary_address AS STRING) END AS temporary_address, raw.payload.number_of_reports_12_months, raw.payload.fetched_at, CASE WHEN raw.payload.street_address IS NOT NULL  AND raw.payload.street_address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.street_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.street_address AS STRING) END AS street_address, raw.payload.creditor_code, raw.payload.uc_registration_date, raw.payload.applicant_draft_id, CASE WHEN raw.payload.xml IS NOT NULL  AND raw.payload.xml <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.xml AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.xml AS STRING) END AS xml, CASE WHEN raw.payload.last_name IS NOT NULL  AND raw.payload.last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_name AS STRING) END AS last_name, raw.payload.taxed_year, raw.payload.capital_deficit, raw.payload.customer_id, raw.payload.previous_capital_deficit, CASE WHEN raw.payload.postal_code IS NOT NULL  AND raw.payload.postal_code <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.postal_code AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.postal_code AS STRING) END AS postal_code, raw.payload.template_code, raw.payload.move_in_date, raw.payload.template_passed, CASE WHEN raw.payload.city IS NOT NULL  AND raw.payload.city <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.city AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.city AS STRING) END AS city, raw.payload.unregistered, CASE WHEN raw.payload.first_name IS NOT NULL  AND raw.payload.first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.first_name AS STRING) END AS first_name, raw.payload.debt_reconciliation_date) AS payload, raw.* EXCEPT(payload),CASE WHEN (CAST(raw.payload.national_id AS STRING) IS NOT NULL AND CAST(raw.payload.national_id AS STRING) <> "" AND CAST(raw.payload.national_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.payload.national_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream_fi|exp_bidding_service_bid_logs_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.exp_bidding_service_bid_logs_sgds_r`
sambla_group_data_stream_fi|exp_bidding_service_bidding_logs_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.exp_bidding_service_bidding_logs_sgds_r`
sambla_group_data_stream_fi|exp_bidding_service_creditor_products_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.exp_bidding_service_creditor_products_sgds_r`
sambla_group_data_stream_fi|exp_bidding_service_invite_logs_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.exp_bidding_service_invite_logs_sgds_r`
sambla_group_data_stream_fi|exp_bidding_service_invites_sgds_r|WITH raw_data_with_stack AS (SELECT *, "cdc" as stack ,_PARTITIONTIME AS date_partition  FROM`data-domain-data-warehouse.sambla_group_data_stream_fi.exp_bidding_service_invites_sgds_r` raw), stack_vault as ( select uuid, aead_key, loan_application_oid, stack from `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf`, unnest(history) as history where history.stack  = "cdc" )SELECT STRUCT(raw.payload.created_at, raw.payload.creditor_application_id, raw.payload.rejected, raw.payload.application_type, raw.payload.broker_connection, CASE WHEN raw.payload.creditor_data IS NOT NULL  AND raw.payload.creditor_data <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.creditor_data AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.creditor_data AS STRING) END AS creditor_data, raw.payload.updated_at, raw.payload.sent_to_gateway_at, raw.payload.creditor_product_id, raw.payload.id, raw.payload.application_version_id, raw.payload.declined, raw.payload.application_id, raw.payload.deadline, raw.payload.broker_origin, raw.payload.delayed_queue_message_id, raw.payload.creditor_id, raw.payload.co_applicant_removed) AS payload, raw.* EXCEPT(payload),CASE WHEN (CAST(raw.payload.application_id AS STRING) IS NOT NULL AND CAST(raw.payload.application_id AS STRING) <> "" AND CAST(raw.payload.application_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.payload.application_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised  FROM raw_data_with_stack raw LEFT JOIN stack_vault vault ON CAST(raw.payload.application_id AS STRING) = vault.loan_application_oid AND raw.stack = vault.stack
sambla_group_data_stream_fi|exp_loan_application_service_applicant_drafts_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.payload.national_id AS STRING)), "[^0-9-+A-Z]", ""), 11) AS ssn_clean ,_PARTITIONTIME AS date_partition  FROM`data-domain-data-warehouse.sambla_group_data_stream_fi.exp_loan_application_service_applicant_drafts_sgds_r` raw) SELECT STRUCT(raw.payload.spouse_monthly_income_before_tax, raw.payload.num_household_adults_employed, CASE WHEN raw.payload.bank_account IS NOT NULL  AND raw.payload.bank_account <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.bank_account AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.bank_account AS STRING) END AS bank_account, CASE WHEN raw.payload.employer_name IS NOT NULL  AND raw.payload.employer_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.employer_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.employer_name AS STRING) END AS employer_name, raw.payload.home_type_other_description, raw.payload.spouse_monthly_income_after_tax, raw.payload.other_living_cost, raw.payload.has_foreign_currency_income, raw.payload.other_monthly_income_after_tax, raw.payload.monthly_income_after_tax, raw.payload.rental_monthly_income_before_tax, raw.payload.employment_to, raw.payload.home_type_category, CASE WHEN raw.payload.business_organization_number IS NOT NULL  AND raw.payload.business_organization_number <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.business_organization_number AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.business_organization_number AS STRING) END AS business_organization_number, raw.payload.occupation_category, raw.payload.updated_at, raw.payload.home_cost, raw.payload.has_credit_card, raw.payload.monthly_child_alimony_cost, raw.payload.other_income_source, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, raw.payload.business_registration_date, CASE WHEN raw.payload.employer_phone IS NOT NULL  AND raw.payload.employer_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.employer_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.employer_phone AS STRING) END AS employer_phone, raw.payload.home_type, CASE WHEN raw.payload.email IS NOT NULL  AND raw.payload.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.email AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.email AS STRING) END AS email, raw.payload.employment_industry, raw.payload.citizenship, raw.payload.civil_status, raw.payload.education_level, raw.payload.created_at, raw.payload.num_household_adults, raw.payload.num_dependants, raw.payload.monthly_income_before_tax, raw.payload.monthly_rental_income, raw.payload.employment_since, raw.payload.move_in_date, raw.payload.other_monthly_income_before_tax, raw.payload.employment_type, raw.payload.id, raw.payload.military_service_status, CASE WHEN raw.payload.mobile_phone IS NOT NULL  AND raw.payload.mobile_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.mobile_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.mobile_phone AS STRING) END AS mobile_phone, raw.payload.occupation_title) AS payload, raw.* EXCEPT(payload),CASE WHEN (CAST(raw.payload.national_id AS STRING) IS NOT NULL AND CAST(raw.payload.national_id AS STRING) <> "" AND CAST(raw.payload.national_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.payload.national_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream|payments_api_RecurringPayment_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream.payments_api_RecurringPayment_sgds_r`
sambla_group_data_stream_fi|asiakastieto_service_credit_default_rows_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.asiakastieto_service_credit_default_rows_sgds_r`
sambla_group_data_stream_fi|asiakastieto_service_credit_defaults_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.asiakastieto_service_credit_defaults_sgds_r`
sambla_group_data_stream_fi|bisnode_service_credit_reports_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.payload.national_id AS STRING)), "[^0-9-+A-Z]", ""), 11) AS ssn_clean ,_PARTITIONTIME AS date_partition  FROM`data-domain-data-warehouse.sambla_group_data_stream_fi.bisnode_service_credit_reports_sgds_r` raw) SELECT STRUCT(raw.payload.blocked_description, raw.payload.template_passed, CASE WHEN raw.payload.xml IS NOT NULL  AND raw.payload.xml <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.xml AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.xml AS STRING) END AS xml, raw.payload.score, raw.payload.number_of_payment_complaints, raw.payload.previous_taxed_annual_income, raw.payload.capital_deficit, raw.payload.customer_id, raw.payload.previous_capital_deficit, raw.payload.move_in_date, CASE WHEN raw.payload.secret_address IS NOT NULL  AND raw.payload.secret_address <> 0 AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.secret_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.secret_address AS STRING) END AS secret_address, raw.payload.template_code, raw.payload.latest_payment_complaint, raw.payload.taxed_year, raw.payload.uc_registration_date, raw.payload.country, raw.payload.unregistered, CASE WHEN raw.payload.temporary_address IS NOT NULL  AND raw.payload.temporary_address <> 0 AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.temporary_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.temporary_address AS STRING) END AS temporary_address, raw.payload.product_type, raw.payload.fetched_at, CASE WHEN raw.payload.city IS NOT NULL  AND raw.payload.city <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.city AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.city AS STRING) END AS city, raw.payload.minor, raw.payload.has_debt_reconstruction, CASE WHEN raw.payload.street_address IS NOT NULL  AND raw.payload.street_address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.street_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.street_address AS STRING) END AS street_address, raw.payload.id, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, CASE WHEN raw.payload.postal_code IS NOT NULL  AND raw.payload.postal_code <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.postal_code AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.postal_code AS STRING) END AS postal_code, raw.payload.number_of_reports_12_months, raw.payload.no_visit_address, raw.payload.debt_balance, raw.payload.taxed_annual_income, raw.payload.debt_reconciliation_date, CASE WHEN raw.payload.first_name IS NOT NULL  AND raw.payload.first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.first_name AS STRING) END AS first_name, CASE WHEN raw.payload.last_name IS NOT NULL  AND raw.payload.last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_name AS STRING) END AS last_name, raw.payload.blocked_code, raw.payload.applicant_draft_id, raw.payload.payment_complaint, raw.payload.major_city_inhabitant, raw.payload.previous_taxed_year) AS payload, raw.* EXCEPT(payload),CASE WHEN (CAST(raw.payload.national_id AS STRING) IS NOT NULL AND CAST(raw.payload.national_id AS STRING) <> "" AND CAST(raw.payload.national_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.payload.national_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream_fi|exp_bidding_service_creditors_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.exp_bidding_service_creditors_sgds_r`
sambla_group_data_stream_fi|exp_loan_application_service_loan_application_drafts_sgds_r|WITH raw_data_with_stack AS (SELECT *, "cdc" as stack ,_PARTITIONTIME AS date_partition  FROM`data-domain-data-warehouse.sambla_group_data_stream_fi.exp_loan_application_service_loan_application_drafts_sgds_r` raw), stack_vault as ( select uuid, aead_key, loan_application_oid, stack from `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf`, unnest(history) as history where history.stack  = "cdc" )SELECT STRUCT(raw.payload.applicant_draft_id, raw.payload.loan_application_id, raw.payload.old_loan_repayment_time, raw.payload.desired_repayment_time, raw.payload.deactivated_at, raw.payload.input_source, raw.payload.created_at, raw.payload.updated_at, raw.payload.credit_check_consent, CASE WHEN raw.payload.bank_account IS NOT NULL  AND raw.payload.bank_account <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.bank_account AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.bank_account AS STRING) END AS bank_account, raw.payload.secondary_applicant_draft_id, raw.payload.desired_mortgage_amortization_amount, raw.payload.site_origin, raw.payload.total_loan, raw.payload.accept_newsletter, raw.payload.client_ip, raw.payload.id, raw.payload.auto_accept, raw.payload.purpose) AS payload, raw.* EXCEPT(payload),CASE WHEN (CAST(raw.payload.loan_application_id AS STRING) IS NOT NULL AND CAST(raw.payload.loan_application_id AS STRING) <> "" AND CAST(raw.payload.loan_application_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.payload.loan_application_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised  FROM raw_data_with_stack raw LEFT JOIN stack_vault vault ON CAST(raw.payload.loan_application_id AS STRING) = vault.loan_application_oid AND raw.stack = vault.stack
sambla_group_data_stream_fi|exp_loan_application_service_loan_applications_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.exp_loan_application_service_loan_applications_sgds_r`
sambla_group_data_stream_fi|marketing_contact_service_cart_abandonment_contacts_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.payload.national_id AS STRING)), "[^0-9-+A-Z]", ""), 11) AS ssn_clean ,_PARTITIONTIME AS date_partition  FROM`data-domain-data-warehouse.sambla_group_data_stream_fi.marketing_contact_service_cart_abandonment_contacts_sgds_r` raw) SELECT STRUCT(raw.payload.page, raw.payload.home_cost, raw.payload.home_type, raw.payload.internal_cookie, raw.payload.prefill_token, raw.payload.military_service_status, CASE WHEN raw.payload.mobile_phone IS NOT NULL  AND raw.payload.mobile_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.mobile_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.mobile_phone AS STRING) END AS mobile_phone, raw.payload.total_amount, raw.payload.spouse_monthly_income_before_tax, raw.payload.monthly_salary, raw.payload.business_registration_date, raw.payload.monthly_income_before_tax, raw.payload.bloomreach_cookie, raw.payload.employment_to_month, CASE WHEN raw.payload.email IS NOT NULL  AND raw.payload.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.email AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.email AS STRING) END AS email, raw.payload.query_params, raw.payload.citizenship, raw.payload.monthly_income_after_tax, raw.payload.employment_type, raw.payload.id, raw.payload.consolidation_amount, raw.payload.is_cart_abandonment, raw.payload.occupation_category, raw.payload.move_in_date, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, raw.payload.other_income, raw.payload.civil_status, raw.payload.site_origin, CASE WHEN raw.payload.employer_name IS NOT NULL  AND raw.payload.employer_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.employer_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.employer_name AS STRING) END AS employer_name, raw.payload.employment_since_month, raw.payload.created_at, raw.payload.other_monthly_income_after_tax, raw.payload.other_monthly_income_before_tax, raw.payload.education_level, raw.payload.updated_at, raw.payload.occupation_title, CASE WHEN raw.payload.business_organization_number IS NOT NULL  AND raw.payload.business_organization_number <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.business_organization_number AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.business_organization_number AS STRING) END AS business_organization_number, raw.payload.merge_loan, raw.payload.repayment_time, raw.payload.employment_industry, raw.payload.rental_monthly_income_before_tax, raw.payload.employment_to, raw.payload.num_dependants, raw.payload.employment_since, raw.payload.other_income_source, raw.payload.accept_news_letter, raw.payload.home_type_category, raw.payload.loan_purpose) AS payload, raw.* EXCEPT(payload),CASE WHEN (CAST(raw.payload.national_id AS STRING) IS NOT NULL AND CAST(raw.payload.national_id AS STRING) <> "" AND CAST(raw.payload.national_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.payload.national_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream_fi|marketing_contact_service_contact_blocks_sgds_r|WITH vault_mobiles_flattened_intial AS (SELECT history.mobile_phone AS mobile,history.stack,history.created_at,vault.uuid,vault.aead_key FROM `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` AS vault CROSS JOIN UNNEST(vault.history) AS history WHERE history.mobile_phone IS NOT NULL AND history.mobile_phone != ""), vault_mobiles_flattened AS ( SELECT mobile, stack, uuid, aead_key FROM vault_mobiles_flattened_intial QUALIFY ROW_NUMBER() OVER (PARTITION BY mobile ORDER BY created_at DESC) = 1 ), vault_emails_flattened_initial AS (SELECT history.email AS email,history.stack,history.created_at,vault.uuid,vault.aead_key FROM `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` AS vault CROSS JOIN UNNEST(vault.history) AS history WHERE history.email IS NOT NULL AND history.email != ""), vault_emails_flattened AS ( SELECT email, stack, uuid, aead_key FROM vault_emails_flattened_initial QUALIFY ROW_NUMBER() OVER (PARTITION BY email ORDER BY created_at DESC) = 1 ), mobile_and_ssn_cleaned AS ( SELECT *, CASE WHEN raw.payload.type != "mobile_phone" THEN NULL WHEN LEFT(raw.payload.contact_detail, 2) = " +" THEN SUBSTRING(raw.payload.contact_detail, 2) WHEN raw.payload.contact_detail NOT LIKE "%+%" THEN CASE WHEN LEFT(raw.payload.contact_detail, 3) = "358" THEN CASE WHEN LENGTH(REGEXP_REPLACE(raw.payload.contact_detail, "[^0-9\\s]", "")) BETWEEN 9 AND 15 THEN CONCAT("+", REGEXP_REPLACE(raw.payload.contact_detail, "[^0-9\\s]", "")) ELSE NULL END WHEN LEFT(raw.payload.contact_detail, 1) = "0" THEN CASE WHEN LENGTH(REGEXP_REPLACE(raw.payload.contact_detail, "[^0-9\\s]", "")) BETWEEN 7 AND 13 THEN CONCAT("+358", SUBSTRING(REGEXP_REPLACE(raw.payload.contact_detail, "[^0-9\\s]", ""), 2)) ELSE NULL END WHEN LENGTH(REGEXP_REPLACE(raw.payload.contact_detail, "[^0-9\\s]", "")) BETWEEN 6 AND 12 THEN "+358" || REGEXP_REPLACE(raw.payload.contact_detail, "[^0-9\\s]", "") ELSE NULL END ELSE CASE WHEN LENGTH(REPLACE(raw.payload.contact_detail, " ", "")) > 6 AND LENGTH(REPLACE(raw.payload.contact_detail, " ", "")) < 18 THEN REPLACE(raw.payload.contact_detail, " ", "") END END AS mobile_clean, _PARTITIONTIME AS date_partition, CASE WHEN raw.payload.type != "post" THEN NULL ELSE LEFT(REGEXP_REPLACE(UPPER(CAST(raw.payload.contact_detail AS STRING)), "[^0-9-+A-Z]", ""), 11) END AS ssn_clean FROM`data-domain-data-warehouse.sambla_group_data_stream_fi.marketing_contact_service_contact_blocks_sgds_r` raw ) SELECT STRUCT(raw.payload.created_at, raw.payload.site_origin, CASE WHEN raw.payload.contact_detail IS NOT NULL  AND raw.payload.contact_detail <> '' AND COALESCE(vault.uuid, vault_email.uuid, vault_mobile.uuid) IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(COALESCE(vault.aead_key, vault_email.aead_key, vault_mobile.aead_key), CAST(raw.payload.contact_detail AS STRING), COALESCE(vault.uuid, vault_email.uuid, vault_mobile.uuid))) ELSE CAST(raw.payload.contact_detail AS STRING) END AS contact_detail, raw.payload.type, raw.payload.campaign_id, raw.payload.source, raw.payload.id) AS payload, raw.* EXCEPT(payload),CASE WHEN (raw.payload.contact_detail IS NOT NULL AND raw.payload.contact_detail <> "" AND raw.payload.contact_detail <> "0" AND COALESCE(vault.uuid, vault_email.uuid, vault_mobile.uuid) IS NOT NULL) THEN TRUE ELSE FALSE END AS is_anonymised FROM mobile_and_ssn_cleaned raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` vault ON CASE WHEN raw.payload.type = "post" THEN raw.ssn_clean ELSE NULL END = vault.ssn LEFT JOIN vault_emails_flattened vault_email ON CASE WHEN raw.payload.type = "email" THEN raw.payload.contact_detail ELSE NULL END = vault_email.email LEFT JOIN vault_mobiles_flattened vault_mobile ON CASE WHEN raw.payload.type = "mobile_phone" THEN raw.mobile_clean ELSE NULL END = vault_mobile.mobile 
sambla_group_data_stream_fi|marketing_contact_service_fully_blocked_contacts_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.payload.national_id AS STRING)), "[^0-9-+A-Z]", ""), 11) AS ssn_clean ,_PARTITIONTIME AS date_partition  FROM`data-domain-data-warehouse.sambla_group_data_stream_fi.marketing_contact_service_fully_blocked_contacts_sgds_r` raw) SELECT STRUCT(CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, CASE WHEN raw.payload.email IS NOT NULL  AND raw.payload.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.email AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.email AS STRING) END AS email, raw.payload.other_info, raw.payload.block_reason, CASE WHEN raw.payload.mobile_phone IS NOT NULL  AND raw.payload.mobile_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.mobile_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.mobile_phone AS STRING) END AS mobile_phone, CASE WHEN raw.payload.telemarketing IS NOT NULL  AND raw.payload.telemarketing <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.telemarketing AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.telemarketing AS STRING) END AS telemarketing, CASE WHEN raw.payload.push_notifications IS NOT NULL  AND raw.payload.push_notifications <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.push_notifications AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.push_notifications AS STRING) END AS push_notifications, raw.payload.updated_at, raw.payload.block_expiration, raw.payload.id, raw.payload.created_at) AS payload, raw.* EXCEPT(payload),CASE WHEN (CAST(raw.payload.national_id AS STRING) IS NOT NULL AND CAST(raw.payload.national_id AS STRING) <> "" AND CAST(raw.payload.national_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.payload.national_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream_no|eiendomsverdi_service_reports_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_no.eiendomsverdi_service_reports_sgds_r`
sambla_group_data_stream_no|exp_bidding_service_bid_accepts_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_no.exp_bidding_service_bid_accepts_sgds_r`
sambla_group_data_stream_no|exp_bidding_service_bid_logs_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_no.exp_bidding_service_bid_logs_sgds_r`
sambla_group_data_stream_no|exp_bidding_service_invite_logs_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_no.exp_bidding_service_invite_logs_sgds_r`
sambla_group_data_stream_no|exp_loan_application_service_applicants_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.payload.national_id AS STRING)), "[^0-9]", ""), 11) AS ssn_clean ,_PARTITIONTIME AS date_partition  FROM`data-domain-data-warehouse.sambla_group_data_stream_no.exp_loan_application_service_applicants_sgds_r` raw) SELECT STRUCT(CASE WHEN raw.payload.mobile_phone IS NOT NULL  AND raw.payload.mobile_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.mobile_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.mobile_phone AS STRING) END AS mobile_phone, raw.payload.rental_monthly_income_before_tax, raw.payload.has_credit_card, raw.payload.employment_type, raw.payload.applicant_draft_id, raw.payload.business_registration_date, CASE WHEN raw.payload.employer_name IS NOT NULL  AND raw.payload.employer_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.employer_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.employer_name AS STRING) END AS employer_name, raw.payload.employment_since, raw.payload.num_household_adults_employed, CASE WHEN raw.payload.street_address IS NOT NULL  AND raw.payload.street_address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.street_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.street_address AS STRING) END AS street_address, raw.payload.spouse_monthly_income_after_tax, raw.payload.updated_at, CASE WHEN raw.payload.employer_phone IS NOT NULL  AND raw.payload.employer_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.employer_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.employer_phone AS STRING) END AS employer_phone, raw.payload.home_type_other_description, raw.payload.monthly_income_after_tax, raw.payload.other_income_source, raw.payload.occupation_title, raw.payload.is_politically_exposed, raw.payload.home_cost, raw.payload.monthly_income_before_tax, raw.payload.employment_industry, CASE WHEN raw.payload.first_name IS NOT NULL  AND raw.payload.first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.first_name AS STRING) END AS first_name, CASE WHEN raw.payload.postal_code IS NOT NULL  AND raw.payload.postal_code <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.postal_code AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.postal_code AS STRING) END AS postal_code, raw.payload.other_monthly_income_before_tax, raw.payload.other_living_cost, raw.payload.eu_sanction_validated_at, raw.payload.num_household_adults, raw.payload.birth_date, raw.payload.monthly_rental_income, raw.payload.created_at, raw.payload.num_dependants, CASE WHEN raw.payload.email IS NOT NULL  AND raw.payload.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.email AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.email AS STRING) END AS email, CASE WHEN raw.payload.business_organization_number IS NOT NULL  AND raw.payload.business_organization_number <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.business_organization_number AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.business_organization_number AS STRING) END AS business_organization_number, CASE WHEN raw.payload.last_name IS NOT NULL  AND raw.payload.last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_name AS STRING) END AS last_name, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, raw.payload.home_type, raw.payload.monthly_child_alimony_cost, raw.payload.id, raw.payload.home_type_category, raw.payload.military_service_status, raw.payload.education_level, raw.payload.employment_to, raw.payload.move_in_date, CASE WHEN raw.payload.city IS NOT NULL  AND raw.payload.city <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.city AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.city AS STRING) END AS city, raw.payload.occupation_category, raw.payload.customer_id, raw.payload.spouse_monthly_income_before_tax, raw.payload.other_monthly_income_after_tax, raw.payload.civil_status, raw.payload.has_foreign_currency_income, raw.payload.citizenship, raw.payload.country) AS payload, raw.* EXCEPT(payload),CASE WHEN (CAST(raw.payload.national_id AS STRING) IS NOT NULL AND CAST(raw.payload.national_id AS STRING) <> "" AND CAST(raw.payload.national_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.payload.national_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream_no|exp_loan_application_service_current_loan_drafts_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_no.exp_loan_application_service_current_loan_drafts_sgds_r`
sambla_group_data_stream_no|exp_loan_application_service_loan_application_drafts_sgds_r|WITH raw_data_with_stack AS (SELECT *, "cdc" as stack ,_PARTITIONTIME AS date_partition  FROM`data-domain-data-warehouse.sambla_group_data_stream_no.exp_loan_application_service_loan_application_drafts_sgds_r` raw), stack_vault as ( select uuid, aead_key, loan_application_oid, stack from `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf`, unnest(history) as history where history.stack  = "cdc" )SELECT STRUCT(raw.payload.secondary_applicant_draft_id, raw.payload.accept_newsletter, raw.payload.applicant_draft_id, raw.payload.updated_at, raw.payload.deactivated_at, raw.payload.created_at, raw.payload.id, raw.payload.total_loan, CASE WHEN raw.payload.bank_account IS NOT NULL  AND raw.payload.bank_account <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.bank_account AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.bank_account AS STRING) END AS bank_account, raw.payload.purpose, raw.payload.input_source, raw.payload.credit_check_consent, raw.payload.old_loan_repayment_time, raw.payload.auto_accept, raw.payload.site_origin, raw.payload.client_ip, raw.payload.loan_application_id, raw.payload.desired_mortgage_amortization_amount, raw.payload.desired_repayment_time) AS payload, raw.* EXCEPT(payload),CASE WHEN (CAST(raw.payload.loan_application_id AS STRING) IS NOT NULL AND CAST(raw.payload.loan_application_id AS STRING) <> "" AND CAST(raw.payload.loan_application_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.payload.loan_application_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised  FROM raw_data_with_stack raw LEFT JOIN stack_vault vault ON CAST(raw.payload.loan_application_id AS STRING) = vault.loan_application_oid AND raw.stack = vault.stack
sambla_group_data_stream_no|exp_loan_application_service_loan_applications_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_no.exp_loan_application_service_loan_applications_sgds_r`
sambla_group_data_stream_no|exp_tracking_service_query_params_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_no.exp_tracking_service_query_params_sgds_r`
sambla_group_data_stream_no|gjeldsregisteret_service_consents_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_no.gjeldsregisteret_service_consents_sgds_r`
sambla_group_data_stream_no|marketing_contact_service_contact_blocks_sgds_r|WITH vault_mobiles_flattened_intial AS (SELECT history.mobile_phone AS mobile,history.stack,history.created_at,vault.uuid,vault.aead_key FROM `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` AS vault CROSS JOIN UNNEST(vault.history) AS history WHERE history.mobile_phone IS NOT NULL AND history.mobile_phone != ""), vault_mobiles_flattened AS ( SELECT mobile, stack, uuid, aead_key FROM vault_mobiles_flattened_intial QUALIFY ROW_NUMBER() OVER (PARTITION BY mobile ORDER BY created_at DESC) = 1 ), vault_emails_flattened_initial AS (SELECT history.email AS email,history.stack,history.created_at,vault.uuid,vault.aead_key FROM `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` AS vault CROSS JOIN UNNEST(vault.history) AS history WHERE history.email IS NOT NULL AND history.email != ""), vault_emails_flattened AS ( SELECT email, stack, uuid, aead_key FROM vault_emails_flattened_initial QUALIFY ROW_NUMBER() OVER (PARTITION BY email ORDER BY created_at DESC) = 1 ), mobile_and_ssn_cleaned AS ( SELECT *, CASE WHEN raw.payload.type != "mobile_phone" THEN NULL WHEN LEFT(raw.payload.contact_detail, 2) = " +" THEN SUBSTRING(raw.payload.contact_detail, 2) WHEN raw.payload.contact_detail NOT LIKE "%+%" THEN CASE WHEN LEFT(raw.payload.contact_detail, 2) = "47" THEN CASE WHEN LENGTH(REGEXP_REPLACE(raw.payload.contact_detail, "[^0-9\\s]", "")) = 10 THEN CONCAT("+", REGEXP_REPLACE(raw.payload.contact_detail, "[^0-9\\s]", "")) ELSE NULL END WHEN LEFT(raw.payload.contact_detail, 3) = "047" AND LENGTH(REGEXP_REPLACE(raw.payload.contact_detail, "[^0-9\\s]", "")) = 11 THEN CONCAT("+", SUBSTRING(REGEXP_REPLACE(raw.payload.contact_detail, "[^0-9\\s]", ""), 2)) WHEN LEFT(raw.payload.contact_detail, 4) = "0047" AND LENGTH(REGEXP_REPLACE(raw.payload.contact_detail, "[^0-9\\s]", "")) = 12 THEN CONCAT("+", SUBSTRING(REGEXP_REPLACE(raw.payload.contact_detail, "[^0-9\\s]", ""), 3)) WHEN LEFT(raw.payload.contact_detail, 1) = "0" THEN CASE WHEN LENGTH(REGEXP_REPLACE(raw.payload.contact_detail, "[^0-9\\s]", "")) = 9 THEN CONCAT("+47", SUBSTRING(REGEXP_REPLACE(raw.payload.contact_detail, "[^0-9\\s]", ""), 2)) ELSE NULL END WHEN LENGTH(REGEXP_REPLACE(raw.payload.contact_detail, "[^0-9\\s]", "")) = 8 THEN "+47" || REGEXP_REPLACE(raw.payload.contact_detail, "[^0-9\\s]", "") END ELSE CASE WHEN LENGTH(REPLACE(raw.payload.contact_detail, " ", "")) > 6 AND LENGTH(REPLACE(raw.payload.contact_detail, " ", "")) < 18 THEN REPLACE(raw.payload.contact_detail, " ", "") END END AS mobile_clean, _PARTITIONTIME AS date_partition, CASE WHEN raw.payload.type != "post" THEN NULL ELSE LEFT(REGEXP_REPLACE(UPPER(CAST(raw.payload.contact_detail AS STRING)), "[^0-9]", ""), 11) END AS ssn_clean FROM`data-domain-data-warehouse.sambla_group_data_stream_no.marketing_contact_service_contact_blocks_sgds_r` raw ) SELECT STRUCT(raw.payload.id, raw.payload.created_at, raw.payload.campaign_id, raw.payload.site_origin, raw.payload.type, raw.payload.source, CASE WHEN raw.payload.contact_detail IS NOT NULL  AND raw.payload.contact_detail <> '' AND COALESCE(vault.uuid, vault_email.uuid, vault_mobile.uuid) IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(COALESCE(vault.aead_key, vault_email.aead_key, vault_mobile.aead_key), CAST(raw.payload.contact_detail AS STRING), COALESCE(vault.uuid, vault_email.uuid, vault_mobile.uuid))) ELSE CAST(raw.payload.contact_detail AS STRING) END AS contact_detail) AS payload, raw.* EXCEPT(payload),CASE WHEN (raw.payload.contact_detail IS NOT NULL AND raw.payload.contact_detail <> "" AND raw.payload.contact_detail <> "0" AND COALESCE(vault.uuid, vault_email.uuid, vault_mobile.uuid) IS NOT NULL) THEN TRUE ELSE FALSE END AS is_anonymised FROM mobile_and_ssn_cleaned raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` vault ON CASE WHEN raw.payload.type = "post" THEN raw.ssn_clean ELSE NULL END = vault.ssn LEFT JOIN vault_emails_flattened vault_email ON CASE WHEN raw.payload.type = "email" THEN raw.payload.contact_detail ELSE NULL END = vault_email.email LEFT JOIN vault_mobiles_flattened vault_mobile ON CASE WHEN raw.payload.type = "mobile_phone" THEN raw.mobile_clean ELSE NULL END = vault_mobile.mobile 
sambla_group_data_stream_no|marketing_contact_service_contacts_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.payload.national_id AS STRING)), "[^0-9]", ""), 11) AS ssn_clean ,_PARTITIONTIME AS date_partition  FROM`data-domain-data-warehouse.sambla_group_data_stream_no.marketing_contact_service_contacts_sgds_r` raw) SELECT STRUCT(raw.payload.updated_at, raw.payload.last_application_uc_score, CASE WHEN raw.payload.city IS NOT NULL  AND raw.payload.city <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.city AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.city AS STRING) END AS city, raw.payload.last_application_home_type, raw.payload.last_application_home_type_category, raw.payload.infocom_consent, raw.payload.last_application_debt_balance, raw.payload.last_application_employment_industry, raw.payload.last_application_num_bids, raw.payload.last_application_occupation_category, raw.payload.interest_watch, raw.payload.site_origin, raw.payload.last_application_home_cost, raw.payload.last_application_move_in_date, raw.payload.last_paid_creditor_product, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, raw.payload.last_application_desired_repayment_time, raw.payload.last_application_other_monthly_income_after_tax, raw.payload.last_application_purpose, raw.payload.last_application_accepted, raw.payload.last_application_num_dependants, raw.payload.last_application_paid, raw.payload.last_application_id, raw.payload.last_application_new_loan, raw.payload.last_paid_at, raw.payload.ppi_deactivated_at, raw.payload.last_application_is_co_applicant, CASE WHEN raw.payload.last_application_employer_phone IS NOT NULL  AND raw.payload.last_application_employer_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_application_employer_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_application_employer_phone AS STRING) END AS last_application_employer_phone, raw.payload.last_application_education_level, CASE WHEN raw.payload.last_application_employer_name IS NOT NULL  AND raw.payload.last_application_employer_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_application_employer_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_application_employer_name AS STRING) END AS last_application_employer_name, CASE WHEN raw.payload.postal_code IS NOT NULL  AND raw.payload.postal_code <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.postal_code AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.postal_code AS STRING) END AS postal_code, raw.payload.last_application_employment_type, raw.payload.last_application_monthly_income_before_tax, raw.payload.last_application_payment_complaint, raw.payload.last_application_business_registration_date, raw.payload.last_application_created_at, raw.payload.last_application_military_service_status, raw.payload.last_application_monthly_income_after_tax, raw.payload.customer_sendouts_block_until, raw.payload.ppi, raw.payload.last_application_spouse_monthly_income_before_tax, raw.payload.online_interest_watch, raw.payload.last_application_occupation_title, raw.payload.last_application_has_co_applicant, raw.payload.last_application_num_invited_creditors, raw.payload.last_application_granted, raw.payload.last_application_lowest_apr, CASE WHEN raw.payload.mobile_phone IS NOT NULL  AND raw.payload.mobile_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.mobile_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.mobile_phone AS STRING) END AS mobile_phone, raw.payload.last_application_civil_status, raw.payload.last_application_initial_marketing_consent, CASE WHEN raw.payload.last_name IS NOT NULL  AND raw.payload.last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_name AS STRING) END AS last_name, raw.payload.total_num_applications, CASE WHEN raw.payload.last_application_business_organization_number IS NOT NULL  AND raw.payload.last_application_business_organization_number <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_application_business_organization_number AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_application_business_organization_number AS STRING) END AS last_application_business_organization_number, raw.payload.last_application_other_monthly_income_before_tax, raw.payload.id, raw.payload.last_application_total_loan, raw.payload.last_application_employment_to, raw.payload.last_application_other_income_source, raw.payload.last_application_completed, raw.payload.last_application_rental_monthly_income_before_tax, raw.payload.has_been_primary_applicant, CASE WHEN raw.payload.first_name IS NOT NULL  AND raw.payload.first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.first_name AS STRING) END AS first_name, CASE WHEN raw.payload.email IS NOT NULL  AND raw.payload.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.email AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.email AS STRING) END AS email, raw.payload.last_application_citizenship, raw.payload.marketing_consent_expires_at, raw.payload.last_accepted_at, raw.payload.last_application_granted_amount, raw.payload.last_application_employment_since, raw.payload.creditor_block_until, raw.payload.created_at) AS payload, raw.* EXCEPT(payload),CASE WHEN (CAST(raw.payload.national_id AS STRING) IS NOT NULL AND CAST(raw.payload.national_id AS STRING) <> "" AND CAST(raw.payload.national_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.payload.national_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream|payments_api_Customer_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(CAST(raw.payload.nationalId AS STRING), "[^0-9]", ""), 12) AS ssn_clean ,_PARTITIONTIME AS date_partition  FROM`data-domain-data-warehouse.sambla_group_data_stream.payments_api_Customer_sgds_r` raw) SELECT STRUCT(CASE WHEN raw.payload.email IS NOT NULL  AND raw.payload.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.email AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.email AS STRING) END AS email, CASE WHEN raw.payload.address IS NOT NULL  AND raw.payload.address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.address AS STRING) END AS address, CASE WHEN raw.payload.phoneNumber IS NOT NULL  AND raw.payload.phoneNumber <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.phoneNumber AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.phoneNumber AS STRING) END AS phoneNumber, CASE WHEN raw.payload.postalArea IS NOT NULL  AND raw.payload.postalArea <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.postalArea AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.postalArea AS STRING) END AS postalArea, CASE WHEN raw.payload.nationalId IS NOT NULL  AND raw.payload.nationalId <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.nationalId AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.nationalId AS STRING) END AS nationalId, raw.payload.createdAt, raw.payload.id, CASE WHEN raw.payload.name IS NOT NULL  AND raw.payload.name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.name AS STRING) END AS name, raw.payload.migratedFromInsivoAt, raw.payload.market, raw.payload.updatedAt, raw.payload.payerNumber, CASE WHEN raw.payload.postcode IS NOT NULL  AND raw.payload.postcode <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.postcode AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.postcode AS STRING) END AS postcode) AS payload, raw.* EXCEPT(payload),CASE WHEN (CAST(raw.payload.nationalId AS STRING) IS NOT NULL AND CAST(raw.payload.nationalId AS STRING) <> "" AND CAST(raw.payload.nationalId AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.payload.nationalId AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream|payments_api_InvoiceItem_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream.payments_api_InvoiceItem_sgds_r`
helios_staging|customers_ppi_p|WITH data_with_ssn_rules AS (SELECT *, CASE WHEN market= "SE" THEN LEFT(REGEXP_REPLACE(CAST(raw.ssn AS STRING), "[^0-9]", ""), 12) WHEN market= "NO" THEN LEFT(REGEXP_REPLACE(CAST(raw.ssn AS STRING), "[^0-9]", ""), 11) WHEN market= "DK" THEN LEFT(REGEXP_REPLACE(CAST(raw.ssn AS STRING), "[^0-9]", ""), 10) WHEN market= "FI" THEN LEFT(REGEXP_REPLACE(UPPER(CAST(raw.ssn AS STRING)), "[^0-9-+A-Z]", ""), 11) END AS ssn_clean FROM`data-domain-data-warehouse.helios_staging.customers_ppi_p` raw) SELECT CASE WHEN raw.clearingNumber IS NOT NULL  AND raw.clearingNumber <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.clearingNumber AS STRING), VAULT.uuid)) ELSE CAST(raw.clearingNumber AS STRING) END AS clearingNumber, CASE WHEN raw.accountNumber IS NOT NULL  AND raw.accountNumber <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.accountNumber AS STRING), VAULT.uuid)) ELSE CAST(raw.accountNumber AS STRING) END AS accountNumber, CASE WHEN raw.last_name IS NOT NULL  AND raw.last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.last_name AS STRING) END AS last_name, CASE WHEN raw.postalArea IS NOT NULL  AND raw.postalArea <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.postalArea AS STRING), VAULT.uuid)) ELSE CAST(raw.postalArea AS STRING) END AS postalArea, CASE WHEN raw.first_name IS NOT NULL  AND raw.first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.first_name AS STRING) END AS first_name, CASE WHEN raw.phoneNumber IS NOT NULL  AND raw.phoneNumber <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.phoneNumber AS STRING), VAULT.uuid)) ELSE CAST(raw.phoneNumber AS STRING) END AS phoneNumber, CASE WHEN raw.address IS NOT NULL  AND raw.address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.address AS STRING), VAULT.uuid)) ELSE CAST(raw.address AS STRING) END AS address, CASE WHEN raw.postalCode IS NOT NULL  AND raw.postalCode <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.postalCode AS STRING), VAULT.uuid)) ELSE CAST(raw.postalCode AS STRING) END AS postalCode, CASE WHEN raw.name IS NOT NULL  AND raw.name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.name AS STRING), VAULT.uuid)) ELSE CAST(raw.name AS STRING) END AS name, CASE WHEN raw.directDebitNumber IS NOT NULL  AND raw.directDebitNumber <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.directDebitNumber AS STRING), VAULT.uuid)) ELSE CAST(raw.directDebitNumber AS STRING) END AS directDebitNumber, CASE WHEN raw.idNumber IS NOT NULL  AND raw.idNumber <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.idNumber AS STRING), VAULT.uuid)) ELSE CAST(raw.idNumber AS STRING) END AS idNumber, CASE WHEN raw.email IS NOT NULL  AND raw.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.email AS STRING), VAULT.uuid)) ELSE CAST(raw.email AS STRING) END AS email, CASE WHEN raw.ssn IS NOT NULL  AND raw.ssn <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.ssn AS STRING), VAULT.uuid)) ELSE CAST(raw.ssn AS STRING) END AS ssn, CASE WHEN raw.bank IS NOT NULL  AND raw.bank <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.bank AS STRING), VAULT.uuid)) ELSE CAST(raw.bank AS STRING) END AS bank, raw.* EXCEPT(clearingNumber, first_name, idNumber, postalArea, email, bank, postalCode, phoneNumber, ssn, last_name, address, accountNumber, directDebitNumber, name),CASE WHEN (CAST(raw.ssn AS STRING) IS NOT NULL AND CAST(raw.ssn AS STRING) <> "" AND CAST(raw.ssn AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.ssn AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
helios_staging|insurance_products_ppi_p|WITH data_with_ssn_rules AS (SELECT *, CASE WHEN market= "SE" THEN LEFT(REGEXP_REPLACE(CAST(raw.national_id AS STRING), "[^0-9]", ""), 12) WHEN market= "NO" THEN LEFT(REGEXP_REPLACE(CAST(raw.national_id AS STRING), "[^0-9]", ""), 11) WHEN market= "DK" THEN LEFT(REGEXP_REPLACE(CAST(raw.national_id AS STRING), "[^0-9]", ""), 10) WHEN market= "FI" THEN LEFT(REGEXP_REPLACE(UPPER(CAST(raw.national_id AS STRING)), "[^0-9-+A-Z]", ""), 11) END AS ssn_clean FROM`data-domain-data-warehouse.helios_staging.insurance_products_ppi_p` raw) SELECT CASE WHEN raw.user_email IS NOT NULL  AND raw.user_email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.user_email AS STRING), VAULT.uuid)) ELSE CAST(raw.user_email AS STRING) END AS user_email, CASE WHEN raw.user_name IS NOT NULL  AND raw.user_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.user_name AS STRING), VAULT.uuid)) ELSE CAST(raw.user_name AS STRING) END AS user_name, CASE WHEN raw.coapp_national_id IS NOT NULL  AND raw.coapp_national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.coapp_national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.coapp_national_id AS STRING) END AS coapp_national_id, CASE WHEN raw.national_id IS NOT NULL  AND raw.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.national_id AS STRING) END AS national_id, raw.* EXCEPT(user_name, user_email, coapp_national_id, national_id),CASE WHEN (CAST(raw.national_id AS STRING) IS NOT NULL AND CAST(raw.national_id AS STRING) <> "" AND CAST(raw.national_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.national_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream|payments_api_Invoice_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream.payments_api_Invoice_sgds_r`
sambla_group_data_stream|payments_api_Price_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream.payments_api_Price_sgds_r`
sambla_group_data_stream|payments_api_Product_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream.payments_api_Product_sgds_r`
sambla_group_data_stream_fi|exp_tracking_service_application_cookie_mappings_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.exp_tracking_service_application_cookie_mappings_sgds_r`
sambla_group_data_stream_fi|identity_verification_service_identity_verification_log_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.identity_verification_service_identity_verification_log_sgds_r`
sambla_group_data_stream_fi|marketing_contact_service_contacts_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.payload.national_id AS STRING)), "[^0-9-+A-Z]", ""), 11) AS ssn_clean ,_PARTITIONTIME AS date_partition  FROM`data-domain-data-warehouse.sambla_group_data_stream_fi.marketing_contact_service_contacts_sgds_r` raw) SELECT STRUCT(raw.payload.created_at, raw.payload.creditor_block_until, raw.payload.last_application_initial_marketing_consent, raw.payload.last_application_is_co_applicant, raw.payload.infocom_consent, raw.payload.last_application_citizenship, raw.payload.last_application_total_loan, raw.payload.updated_at, CASE WHEN raw.payload.last_application_employer_name IS NOT NULL  AND raw.payload.last_application_employer_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_application_employer_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_application_employer_name AS STRING) END AS last_application_employer_name, raw.payload.last_application_new_loan, raw.payload.last_application_other_monthly_income_after_tax, raw.payload.has_been_primary_applicant, CASE WHEN raw.payload.email IS NOT NULL  AND raw.payload.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.email AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.email AS STRING) END AS email, raw.payload.site_origin, raw.payload.customer_sendouts_block_until, raw.payload.interest_watch, raw.payload.last_application_monthly_income_after_tax, raw.payload.last_application_uc_score, raw.payload.last_application_education_level, raw.payload.last_paid_at, raw.payload.last_application_civil_status, raw.payload.last_application_accepted, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, raw.payload.last_application_monthly_income_before_tax, CASE WHEN raw.payload.last_application_employer_phone IS NOT NULL  AND raw.payload.last_application_employer_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_application_employer_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_application_employer_phone AS STRING) END AS last_application_employer_phone, raw.payload.last_application_paid, raw.payload.last_application_business_registration_date, raw.payload.last_application_num_invited_creditors, raw.payload.last_application_purpose, CASE WHEN raw.payload.postal_code IS NOT NULL  AND raw.payload.postal_code <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.postal_code AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.postal_code AS STRING) END AS postal_code, raw.payload.last_application_id, raw.payload.last_application_home_cost, raw.payload.id, raw.payload.last_application_spouse_monthly_income_before_tax, raw.payload.last_application_employment_type, raw.payload.marketing_consent_expires_at, raw.payload.last_application_employment_industry, raw.payload.last_application_military_service_status, CASE WHEN raw.payload.last_name IS NOT NULL  AND raw.payload.last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_name AS STRING) END AS last_name, raw.payload.last_application_other_monthly_income_before_tax, raw.payload.last_application_occupation_title, raw.payload.last_accepted_at, CASE WHEN raw.payload.mobile_phone IS NOT NULL  AND raw.payload.mobile_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.mobile_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.mobile_phone AS STRING) END AS mobile_phone, raw.payload.last_application_has_co_applicant, raw.payload.online_interest_watch, raw.payload.last_application_num_bids, CASE WHEN raw.payload.city IS NOT NULL  AND raw.payload.city <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.city AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.city AS STRING) END AS city, raw.payload.last_application_lowest_apr, raw.payload.ppi, raw.payload.ppi_deactivated_at, raw.payload.last_application_created_at, raw.payload.last_application_employment_since, raw.payload.last_application_occupation_category, raw.payload.last_application_home_type, raw.payload.last_application_payment_complaint, raw.payload.last_application_rental_monthly_income_before_tax, raw.payload.last_application_move_in_date, raw.payload.last_application_granted, raw.payload.total_num_applications, raw.payload.last_application_granted_amount, CASE WHEN raw.payload.last_application_business_organization_number IS NOT NULL  AND raw.payload.last_application_business_organization_number <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_application_business_organization_number AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_application_business_organization_number AS STRING) END AS last_application_business_organization_number, raw.payload.last_application_completed, raw.payload.last_application_home_type_category, raw.payload.last_application_num_dependants, raw.payload.last_application_debt_balance, raw.payload.last_application_employment_to, CASE WHEN raw.payload.first_name IS NOT NULL  AND raw.payload.first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.first_name AS STRING) END AS first_name, raw.payload.last_paid_creditor_product, raw.payload.last_application_desired_repayment_time, raw.payload.last_application_other_income_source) AS payload, raw.* EXCEPT(payload),CASE WHEN (CAST(raw.payload.national_id AS STRING) IS NOT NULL AND CAST(raw.payload.national_id AS STRING) <> "" AND CAST(raw.payload.national_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.payload.national_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream_no|eiendomsverdi_service_mortgages_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_no.eiendomsverdi_service_mortgages_sgds_r`
sambla_group_data_stream_no|exp_bidding_service_creditors_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_no.exp_bidding_service_creditors_sgds_r`
sambla_group_data_stream_no|exp_bidding_service_invites_sgds_r|WITH raw_data_with_stack AS (SELECT *, "cdc" as stack ,_PARTITIONTIME AS date_partition  FROM`data-domain-data-warehouse.sambla_group_data_stream_no.exp_bidding_service_invites_sgds_r` raw), stack_vault as ( select uuid, aead_key, loan_application_oid, stack from `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf`, unnest(history) as history where history.stack  = "cdc" )SELECT STRUCT(raw.payload.sent_to_gateway_at, raw.payload.co_applicant_removed, raw.payload.application_type, raw.payload.id, raw.payload.deadline, raw.payload.broker_connection, raw.payload.creditor_application_id, raw.payload.delayed_queue_message_id, raw.payload.created_at, raw.payload.broker_origin, raw.payload.rejected, raw.payload.application_version_id, raw.payload.creditor_product_id, raw.payload.creditor_id, raw.payload.updated_at, CASE WHEN raw.payload.creditor_data IS NOT NULL  AND raw.payload.creditor_data <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.creditor_data AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.creditor_data AS STRING) END AS creditor_data, raw.payload.declined, raw.payload.application_id) AS payload, raw.* EXCEPT(payload),CASE WHEN (CAST(raw.payload.application_id AS STRING) IS NOT NULL AND CAST(raw.payload.application_id AS STRING) <> "" AND CAST(raw.payload.application_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.payload.application_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised  FROM raw_data_with_stack raw LEFT JOIN stack_vault vault ON CAST(raw.payload.application_id AS STRING) = vault.loan_application_oid AND raw.stack = vault.stack
sambla_group_data_stream_no|exp_loan_application_service_applicant_drafts_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.payload.national_id AS STRING)), "[^0-9]", ""), 11) AS ssn_clean ,_PARTITIONTIME AS date_partition  FROM`data-domain-data-warehouse.sambla_group_data_stream_no.exp_loan_application_service_applicant_drafts_sgds_r` raw) SELECT STRUCT(raw.payload.created_at, raw.payload.home_type_category, CASE WHEN raw.payload.business_organization_number IS NOT NULL  AND raw.payload.business_organization_number <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.business_organization_number AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.business_organization_number AS STRING) END AS business_organization_number, raw.payload.rental_monthly_income_before_tax, raw.payload.other_living_cost, raw.payload.other_income_source, raw.payload.move_in_date, raw.payload.num_dependants, raw.payload.spouse_monthly_income_after_tax, raw.payload.military_service_status, raw.payload.occupation_title, raw.payload.education_level, raw.payload.civil_status, raw.payload.employment_industry, raw.payload.home_type, raw.payload.home_cost, raw.payload.employment_since, raw.payload.has_foreign_currency_income, raw.payload.business_registration_date, raw.payload.id, raw.payload.num_household_adults, CASE WHEN raw.payload.mobile_phone IS NOT NULL  AND raw.payload.mobile_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.mobile_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.mobile_phone AS STRING) END AS mobile_phone, raw.payload.monthly_income_before_tax, raw.payload.num_household_adults_employed, CASE WHEN raw.payload.employer_phone IS NOT NULL  AND raw.payload.employer_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.employer_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.employer_phone AS STRING) END AS employer_phone, raw.payload.citizenship, CASE WHEN raw.payload.email IS NOT NULL  AND raw.payload.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.email AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.email AS STRING) END AS email, raw.payload.occupation_category, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, raw.payload.monthly_child_alimony_cost, raw.payload.home_type_other_description, raw.payload.has_credit_card, raw.payload.other_monthly_income_before_tax, raw.payload.employment_type, raw.payload.other_monthly_income_after_tax, CASE WHEN raw.payload.employer_name IS NOT NULL  AND raw.payload.employer_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.employer_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.employer_name AS STRING) END AS employer_name, raw.payload.updated_at, raw.payload.employment_to, raw.payload.spouse_monthly_income_before_tax, raw.payload.monthly_rental_income, raw.payload.monthly_income_after_tax) AS payload, raw.* EXCEPT(payload),CASE WHEN (CAST(raw.payload.national_id AS STRING) IS NOT NULL AND CAST(raw.payload.national_id AS STRING) <> "" AND CAST(raw.payload.national_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.payload.national_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream_no|exp_loan_application_service_current_loans_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_no.exp_loan_application_service_current_loans_sgds_r`
sambla_group_data_stream_no|exp_loan_application_service_loan_application_versions_sgds_r|WITH raw_data_with_stack AS (SELECT *, "cdc" as stack ,_PARTITIONTIME AS date_partition  FROM`data-domain-data-warehouse.sambla_group_data_stream_no.exp_loan_application_service_loan_application_versions_sgds_r` raw), stack_vault as ( select uuid, aead_key, loan_application_oid, stack from `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf`, unnest(history) as history where history.stack  = "cdc" )SELECT STRUCT(CASE WHEN raw.payload.bank_account IS NOT NULL  AND raw.payload.bank_account <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.bank_account AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.bank_account AS STRING) END AS bank_account, raw.payload.purpose, raw.payload.desired_repayment_time, raw.payload.applicant_id, raw.payload.loan_application_draft_id, raw.payload.updated_at, raw.payload.auto_accept, raw.payload.total_loan, raw.payload.created_at, raw.payload.loan_application_id, raw.payload.secondary_applicant_id, raw.payload.accept_newsletter, raw.payload.id, raw.payload.site_origin, raw.payload.desired_mortgage_amortization_amount, raw.payload.old_loan_repayment_time, raw.payload.client_ip, raw.payload.input_source, raw.payload.credit_check_consent, raw.payload.attributed_affiliate) AS payload, raw.* EXCEPT(payload),CASE WHEN (CAST(raw.payload.loan_application_id AS STRING) IS NOT NULL AND CAST(raw.payload.loan_application_id AS STRING) <> "" AND CAST(raw.payload.loan_application_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.payload.loan_application_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised  FROM raw_data_with_stack raw LEFT JOIN stack_vault vault ON CAST(raw.payload.loan_application_id AS STRING) = vault.loan_application_oid AND raw.stack = vault.stack
sambla_group_data_stream_no|exp_tracking_service_pageviews_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_no.exp_tracking_service_pageviews_sgds_r`
sambla_group_data_stream_no|experian_service_credit_reports_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.payload.national_id AS STRING)), "[^0-9]", ""), 11) AS ssn_clean ,_PARTITIONTIME AS date_partition  FROM`data-domain-data-warehouse.sambla_group_data_stream_no.experian_service_credit_reports_sgds_r` raw) SELECT STRUCT(raw.payload.blocked_description, raw.payload.taxed_year, raw.payload.score, raw.payload.debt_reconciliation_date, CASE WHEN raw.payload.city IS NOT NULL  AND raw.payload.city <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.city AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.city AS STRING) END AS city, raw.payload.debt_balance, raw.payload.country, CASE WHEN raw.payload.temporary_address IS NOT NULL  AND raw.payload.temporary_address <> 0 AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.temporary_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.temporary_address AS STRING) END AS temporary_address, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, raw.payload.no_visit_address, raw.payload.customer_id, raw.payload.blocked_code, raw.payload.template_passed, CASE WHEN raw.payload.xml IS NOT NULL  AND raw.payload.xml <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.xml AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.xml AS STRING) END AS xml, raw.payload.previous_taxed_annual_income, raw.payload.previous_capital_deficit, raw.payload.move_in_date, CASE WHEN raw.payload.street_address IS NOT NULL  AND raw.payload.street_address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.street_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.street_address AS STRING) END AS street_address, raw.payload.minor, CASE WHEN raw.payload.secret_address IS NOT NULL  AND raw.payload.secret_address <> 0 AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.secret_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.secret_address AS STRING) END AS secret_address, raw.payload.fetched_at, raw.payload.product_type, raw.payload.number_of_payment_complaints, raw.payload.id, raw.payload.has_debt_reconstruction, CASE WHEN raw.payload.first_name IS NOT NULL  AND raw.payload.first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.first_name AS STRING) END AS first_name, raw.payload.latest_payment_complaint, CASE WHEN raw.payload.last_name IS NOT NULL  AND raw.payload.last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_name AS STRING) END AS last_name, raw.payload.template_code, raw.payload.unregistered, raw.payload.previous_taxed_year, raw.payload.capital_deficit, raw.payload.taxed_annual_income, raw.payload.uc_registration_date, raw.payload.number_of_reports_12_months, CASE WHEN raw.payload.postal_code IS NOT NULL  AND raw.payload.postal_code <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.postal_code AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.postal_code AS STRING) END AS postal_code, raw.payload.payment_complaint, raw.payload.applicant_draft_id, raw.payload.major_city_inhabitant) AS payload, raw.* EXCEPT(payload),CASE WHEN (CAST(raw.payload.national_id AS STRING) IS NOT NULL AND CAST(raw.payload.national_id AS STRING) <> "" AND CAST(raw.payload.national_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.payload.national_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream_no|gjeldsregisteret_service_loans_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_no.gjeldsregisteret_service_loans_sgds_r`
sambla_group_data_stream_no|identity_verification_service_identity_verification_log_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_no.identity_verification_service_identity_verification_log_sgds_r`
sambla_group_data_stream_fi|exp_loan_application_service_loan_application_versions_sgds_r|WITH raw_data_with_stack AS (SELECT *, "cdc" as stack ,_PARTITIONTIME AS date_partition  FROM`data-domain-data-warehouse.sambla_group_data_stream_fi.exp_loan_application_service_loan_application_versions_sgds_r` raw), stack_vault as ( select uuid, aead_key, loan_application_oid, stack from `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf`, unnest(history) as history where history.stack  = "cdc" )SELECT STRUCT(raw.payload.updated_at, raw.payload.loan_application_id, raw.payload.input_source, raw.payload.loan_application_draft_id, raw.payload.desired_repayment_time, raw.payload.accept_newsletter, raw.payload.client_ip, CASE WHEN raw.payload.bank_account IS NOT NULL  AND raw.payload.bank_account <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.bank_account AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.bank_account AS STRING) END AS bank_account, raw.payload.applicant_id, raw.payload.auto_accept, raw.payload.purpose, raw.payload.created_at, raw.payload.desired_mortgage_amortization_amount, raw.payload.secondary_applicant_id, raw.payload.id, raw.payload.credit_check_consent, raw.payload.total_loan, raw.payload.site_origin, raw.payload.attributed_affiliate, raw.payload.old_loan_repayment_time) AS payload, raw.* EXCEPT(payload),CASE WHEN (CAST(raw.payload.loan_application_id AS STRING) IS NOT NULL AND CAST(raw.payload.loan_application_id AS STRING) <> "" AND CAST(raw.payload.loan_application_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.payload.loan_application_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised  FROM raw_data_with_stack raw LEFT JOIN stack_vault vault ON CAST(raw.payload.loan_application_id AS STRING) = vault.loan_application_oid AND raw.stack = vault.stack
sambla_group_data_stream_fi|exp_tracking_service_cookies_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.exp_tracking_service_cookies_sgds_r`
sambla_group_data_stream_fi|exp_tracking_service_pageviews_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.exp_tracking_service_pageviews_sgds_r`
sambla_group_data_stream_no|credit_report_service_credit_reports_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.payload.national_id AS STRING)), "[^0-9]", ""), 11) AS ssn_clean ,_PARTITIONTIME AS date_partition  FROM`data-domain-data-warehouse.sambla_group_data_stream_no.credit_report_service_credit_reports_sgds_r` raw) SELECT STRUCT(raw.payload.country, CASE WHEN raw.payload.xml IS NOT NULL  AND raw.payload.xml <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.xml AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.xml AS STRING) END AS xml, CASE WHEN raw.payload.postal_code IS NOT NULL  AND raw.payload.postal_code <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.postal_code AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.postal_code AS STRING) END AS postal_code, raw.payload.capital_deficit, raw.payload.major_city_inhabitant, raw.payload.number_of_payment_complaints, raw.payload.customer_id, raw.payload.minor, raw.payload.id, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, CASE WHEN raw.payload.city IS NOT NULL  AND raw.payload.city <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.city AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.city AS STRING) END AS city, raw.payload.has_debt_reconstruction, raw.payload.debt_balance, raw.payload.taxed_year, CASE WHEN raw.payload.secret_address IS NOT NULL  AND raw.payload.secret_address <> 0 AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.secret_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.secret_address AS STRING) END AS secret_address, raw.payload.latest_payment_complaint, CASE WHEN raw.payload.temporary_address IS NOT NULL  AND raw.payload.temporary_address <> 0 AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.temporary_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.temporary_address AS STRING) END AS temporary_address, raw.payload.fetched_at, CASE WHEN raw.payload.street_address IS NOT NULL  AND raw.payload.street_address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.street_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.street_address AS STRING) END AS street_address, raw.payload.template_code, raw.payload.taxed_annual_income, raw.payload.debt_reconciliation_date, raw.payload.move_in_date, raw.payload.blocked_description, raw.payload.unregistered, raw.payload.blocked_code, raw.payload.payment_complaint, raw.payload.previous_capital_deficit, raw.payload.previous_taxed_annual_income, raw.payload.score, raw.payload.previous_taxed_year, raw.payload.trustee_appointed, raw.payload.template_passed, CASE WHEN raw.payload.first_name IS NOT NULL  AND raw.payload.first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.first_name AS STRING) END AS first_name, raw.payload.creditor_code, raw.payload.applicant_draft_id, raw.payload.product_type, CASE WHEN raw.payload.last_name IS NOT NULL  AND raw.payload.last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_name AS STRING) END AS last_name, raw.payload.uc_registration_date, raw.payload.number_of_reports_12_months, raw.payload.no_visit_address) AS payload, raw.* EXCEPT(payload),CASE WHEN (CAST(raw.payload.national_id AS STRING) IS NOT NULL AND CAST(raw.payload.national_id AS STRING) <> "" AND CAST(raw.payload.national_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.payload.national_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream_no|eiendomsverdi_service_real_estates_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_no.eiendomsverdi_service_real_estates_sgds_r`
sambla_group_data_stream_no|exp_bidding_service_bid_additional_requirements_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_no.exp_bidding_service_bid_additional_requirements_sgds_r`
sambla_group_data_stream_no|exp_bidding_service_bids_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_no.exp_bidding_service_bids_sgds_r`
sambla_group_data_stream_no|exp_bidding_service_creditor_products_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_no.exp_bidding_service_creditor_products_sgds_r`
sambla_group_data_stream_no|exp_customer_service_customers_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.payload.national_id AS STRING)), "[^0-9]", ""), 11) AS ssn_clean ,_PARTITIONTIME AS date_partition  FROM`data-domain-data-warehouse.sambla_group_data_stream_no.exp_customer_service_customers_sgds_r` raw) SELECT STRUCT(raw.payload.marked_for_delete, raw.payload.move_in_date, CASE WHEN raw.payload.first_name IS NOT NULL  AND raw.payload.first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.first_name AS STRING) END AS first_name, raw.payload.birth_date, CASE WHEN raw.payload.street_address IS NOT NULL  AND raw.payload.street_address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.street_address AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.street_address AS STRING) END AS street_address, raw.payload.latest_credit_check_done_at, CASE WHEN raw.payload.city IS NOT NULL  AND raw.payload.city <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.city AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.city AS STRING) END AS city, raw.payload.created_at, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, CASE WHEN raw.payload.last_name IS NOT NULL  AND raw.payload.last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.last_name AS STRING) END AS last_name, CASE WHEN raw.payload.postal_code IS NOT NULL  AND raw.payload.postal_code <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.postal_code AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.postal_code AS STRING) END AS postal_code, CASE WHEN raw.payload.email IS NOT NULL  AND raw.payload.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.email AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.email AS STRING) END AS email, raw.payload.updated_at, raw.payload.id, CASE WHEN raw.payload.mobile_phone IS NOT NULL  AND raw.payload.mobile_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.mobile_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.mobile_phone AS STRING) END AS mobile_phone, raw.payload.valid_national_id, raw.payload.country) AS payload, raw.* EXCEPT(payload),CASE WHEN (CAST(raw.payload.national_id AS STRING) IS NOT NULL AND CAST(raw.payload.national_id AS STRING) <> "" AND CAST(raw.payload.national_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.payload.national_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream_no|exp_tracking_service_application_cookie_mappings_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_no.exp_tracking_service_application_cookie_mappings_sgds_r`
sambla_group_data_stream_no|exp_tracking_service_cookies_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_no.exp_tracking_service_cookies_sgds_r`
sambla_group_data_stream_no|marketing_contact_service_cart_abandonment_contacts_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.payload.national_id AS STRING)), "[^0-9]", ""), 11) AS ssn_clean ,_PARTITIONTIME AS date_partition  FROM`data-domain-data-warehouse.sambla_group_data_stream_no.marketing_contact_service_cart_abandonment_contacts_sgds_r` raw) SELECT STRUCT(raw.payload.id, raw.payload.rental_monthly_income_before_tax, raw.payload.business_registration_date, raw.payload.updated_at, CASE WHEN raw.payload.employer_name IS NOT NULL  AND raw.payload.employer_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.employer_name AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.employer_name AS STRING) END AS employer_name, raw.payload.occupation_title, raw.payload.bloomreach_cookie, raw.payload.created_at, raw.payload.loan_purpose, raw.payload.employment_to_month, raw.payload.accept_news_letter, raw.payload.home_type, raw.payload.employment_to, raw.payload.home_type_category, raw.payload.home_cost, raw.payload.education_level, raw.payload.num_dependants, raw.payload.page, raw.payload.is_cart_abandonment, raw.payload.civil_status, raw.payload.move_in_date, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, raw.payload.internal_cookie, raw.payload.monthly_income_after_tax, raw.payload.merge_loan, raw.payload.site_origin, raw.payload.monthly_salary, raw.payload.other_income_source, raw.payload.occupation_category, raw.payload.employment_industry, raw.payload.employment_since_month, raw.payload.employment_since, raw.payload.repayment_time, raw.payload.employment_type, CASE WHEN raw.payload.business_organization_number IS NOT NULL  AND raw.payload.business_organization_number <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.business_organization_number AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.business_organization_number AS STRING) END AS business_organization_number, raw.payload.citizenship, raw.payload.prefill_token, raw.payload.other_income, raw.payload.monthly_income_before_tax, raw.payload.military_service_status, CASE WHEN raw.payload.mobile_phone IS NOT NULL  AND raw.payload.mobile_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.mobile_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.mobile_phone AS STRING) END AS mobile_phone, raw.payload.other_monthly_income_before_tax, raw.payload.other_monthly_income_after_tax, raw.payload.consolidation_amount, raw.payload.query_params, CASE WHEN raw.payload.email IS NOT NULL  AND raw.payload.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.email AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.email AS STRING) END AS email, raw.payload.total_amount, raw.payload.spouse_monthly_income_before_tax) AS payload, raw.* EXCEPT(payload),CASE WHEN (CAST(raw.payload.national_id AS STRING) IS NOT NULL AND CAST(raw.payload.national_id AS STRING) <> "" AND CAST(raw.payload.national_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.payload.national_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream_no|marketing_contact_service_contact_tokens_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_no.marketing_contact_service_contact_tokens_sgds_r`
sambla_group_data_stream_no|marketing_contact_service_fully_blocked_contacts_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.payload.national_id AS STRING)), "[^0-9]", ""), 11) AS ssn_clean ,_PARTITIONTIME AS date_partition  FROM`data-domain-data-warehouse.sambla_group_data_stream_no.marketing_contact_service_fully_blocked_contacts_sgds_r` raw) SELECT STRUCT(CASE WHEN raw.payload.mobile_phone IS NOT NULL  AND raw.payload.mobile_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.mobile_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.mobile_phone AS STRING) END AS mobile_phone, raw.payload.block_expiration, raw.payload.created_at, raw.payload.updated_at, CASE WHEN raw.payload.push_notifications IS NOT NULL  AND raw.payload.push_notifications <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.push_notifications AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.push_notifications AS STRING) END AS push_notifications, CASE WHEN raw.payload.email IS NOT NULL  AND raw.payload.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.email AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.email AS STRING) END AS email, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, raw.payload.block_reason, raw.payload.other_info, raw.payload.id, CASE WHEN raw.payload.telemarketing IS NOT NULL  AND raw.payload.telemarketing <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.telemarketing AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.telemarketing AS STRING) END AS telemarketing) AS payload, raw.* EXCEPT(payload),CASE WHEN (CAST(raw.payload.national_id AS STRING) IS NOT NULL AND CAST(raw.payload.national_id AS STRING) <> "" AND CAST(raw.payload.national_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.payload.national_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream|exp_bidding_service_bid_additional_requirements_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream.exp_bidding_service_bid_additional_requirements_sgds_r`
sambla_group_data_stream|exp_tracking_service_application_cookie_mappings_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream.exp_tracking_service_application_cookie_mappings_sgds_r`
sambla_group_data_stream|marketing_contact_service_fully_blocked_contacts_sgds_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(CAST(raw.payload.national_id AS STRING), "[^0-9]", ""), 12) AS ssn_clean ,_PARTITIONTIME AS date_partition  FROM`data-domain-data-warehouse.sambla_group_data_stream.marketing_contact_service_fully_blocked_contacts_sgds_r` raw) SELECT STRUCT(raw.payload.created_at, CASE WHEN raw.payload.telemarketing IS NOT NULL  AND raw.payload.telemarketing <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.telemarketing AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.telemarketing AS STRING) END AS telemarketing, CASE WHEN raw.payload.mobile_phone IS NOT NULL  AND raw.payload.mobile_phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.mobile_phone AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.mobile_phone AS STRING) END AS mobile_phone, raw.payload.id, raw.payload.block_reason, CASE WHEN raw.payload.email IS NOT NULL  AND raw.payload.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.email AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.email AS STRING) END AS email, CASE WHEN raw.payload.national_id IS NOT NULL  AND raw.payload.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.national_id AS STRING) END AS national_id, raw.payload.block_expiration, raw.payload.other_info, raw.payload.updated_at, CASE WHEN raw.payload.push_notifications IS NOT NULL  AND raw.payload.push_notifications <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.payload.push_notifications AS STRING), VAULT.uuid)) ELSE CAST(raw.payload.push_notifications AS STRING) END AS push_notifications) AS payload, raw.* EXCEPT(payload),CASE WHEN (CAST(raw.payload.national_id AS STRING) IS NOT NULL AND CAST(raw.payload.national_id AS STRING) <> "" AND CAST(raw.payload.national_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.payload.national_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_group_data_stream|payments_api_PaymentDetail_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream.payments_api_PaymentDetail_sgds_r`
sambla_group_data_stream_fi|exp_tracking_service_query_params_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.exp_tracking_service_query_params_sgds_r`
sambla_group_data_stream_fi|marketing_contact_service_contact_tokens_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_fi.marketing_contact_service_contact_tokens_sgds_r`
sambla_group_data_stream_no|exp_bidding_service_bidding_logs_sgds_r|SELECT * , False AS is_anonymised, _PARTITIONTIME AS date_partition FROM `data-domain-data-warehouse.sambla_group_data_stream_no.exp_bidding_service_bidding_logs_sgds_r`
helios_staging|invoice_products_ppi_p|SELECT * , False AS is_anonymised, FROM `data-domain-data-warehouse.helios_staging.invoice_products_ppi_p`
