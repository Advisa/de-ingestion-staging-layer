rahalaitos_integration_legacy|marketing_marketing_ban_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.marketing_marketing_ban_raha_r`
rahalaitos_integration_legacy|insurance_agreement_type_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_agreement_type_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_decision_data_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_decision_data_raha_r`
rahalaitos_integration_legacy|insurance_insurance_details_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_insurance_details_raha_r`
rahalaitos_integration_legacy|rahalaitos_campaign_bing_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_campaign_bing_raha_r`
rahalaitos_integration_legacy|insurance_insurance_product_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_insurance_product_raha_r`
rahalaitos_integration_legacy|insurance_history_type_priority_level_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_history_type_priority_level_raha_r`
rahalaitos_integration_legacy|insurance_insurance_response_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_insurance_response_raha_r`
rahalaitos_integration_legacy|rahalaitos_campaign_whitelabel_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_campaign_whitelabel_raha_r`
rahalaitos_integration_legacy|rahalaitos_campaign_bing_sent_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_campaign_bing_sent_raha_r`
rahalaitos_integration_legacy|marketing_applicant_business_raha_r|WITH vault_mobiles_flattened_intial AS (SELECT history.mobile_phone AS mobile,history.stack,history.created_at,vault.uuid,vault.aead_key FROM `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` AS vault CROSS JOIN UNNEST(vault.history) AS history WHERE history.mobile_phone IS NOT NULL AND history.mobile_phone != ""), vault_mobiles_flattened AS ( SELECT mobile, stack, uuid, aead_key FROM vault_mobiles_flattened_intial QUALIFY ROW_NUMBER() OVER (PARTITION BY mobile ORDER BY created_at DESC) = 1 ), vault_emails_flattened_initial AS (SELECT history.email AS email,history.stack,history.created_at,vault.uuid,vault.aead_key FROM `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` AS vault CROSS JOIN UNNEST(vault.history) AS history WHERE history.email IS NOT NULL AND history.email != ""), vault_emails_flattened AS ( SELECT email, stack, uuid, aead_key FROM vault_emails_flattened_initial QUALIFY ROW_NUMBER() OVER (PARTITION BY email ORDER BY created_at DESC) = 1 ), mobile_cleaned AS ( SELECT *, CASE WHEN LEFT(raw.puhelin, 2) = " +" THEN SUBSTRING(raw.puhelin, 2) WHEN raw.puhelin NOT LIKE "%+%" THEN CASE WHEN LEFT(raw.puhelin, 3) = "358" THEN CASE WHEN LENGTH(REGEXP_REPLACE(raw.puhelin, "[^0-9\\s]", "")) BETWEEN 9 AND 15 THEN CONCAT("+", REGEXP_REPLACE(raw.puhelin, "[^0-9\\s]", "")) ELSE NULL END WHEN LEFT(raw.puhelin, 1) = "0" THEN CASE WHEN LENGTH(REGEXP_REPLACE(raw.puhelin, "[^0-9\\s]", "")) BETWEEN 7 AND 13 THEN CONCAT("+358", SUBSTRING(REGEXP_REPLACE(raw.puhelin, "[^0-9\\s]", ""), 2)) ELSE NULL END WHEN LENGTH(REGEXP_REPLACE(raw.puhelin, "[^0-9\\s]", "")) BETWEEN 6 AND 12 THEN "+358" || REGEXP_REPLACE(raw.puhelin, "[^0-9\\s]", "") ELSE NULL END ELSE CASE WHEN LENGTH(REPLACE(raw.puhelin, " ", "")) > 6 AND LENGTH(REPLACE(raw.puhelin, " ", "")) < 18 THEN REPLACE(raw.puhelin, " ", "") END END AS mobile_clean  FROM`sambla-data-staging-compliance.rahalaitos_integration_legacy.marketing_applicant_business_raha_r` raw) SELECT CASE WHEN raw.etunimi IS NOT NULL  AND raw.etunimi <> '' AND COALESCE(vault_email.uuid, vault_mobile.uuid) IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(COALESCE(vault_email.aead_key, vault_mobile.aead_key), CAST(raw.etunimi AS STRING), COALESCE(vault_email.uuid, vault_mobile.uuid))) ELSE CAST(raw.etunimi AS STRING) END AS etunimi, CASE WHEN raw.sukunimi IS NOT NULL  AND raw.sukunimi <> '' AND COALESCE(vault_email.uuid, vault_mobile.uuid) IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(COALESCE(vault_email.aead_key, vault_mobile.aead_key), CAST(raw.sukunimi AS STRING), COALESCE(vault_email.uuid, vault_mobile.uuid))) ELSE CAST(raw.sukunimi AS STRING) END AS sukunimi, CASE WHEN raw.puhelin IS NOT NULL  AND raw.puhelin <> '' AND COALESCE(vault_email.uuid, vault_mobile.uuid) IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(COALESCE(vault_email.aead_key, vault_mobile.aead_key), CAST(raw.puhelin AS STRING), COALESCE(vault_email.uuid, vault_mobile.uuid))) ELSE CAST(raw.puhelin AS STRING) END AS puhelin, CASE WHEN raw.email IS NOT NULL  AND raw.email <> '' AND COALESCE(vault_email.uuid, vault_mobile.uuid) IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(COALESCE(vault_email.aead_key, vault_mobile.aead_key), CAST(raw.email AS STRING), COALESCE(vault_email.uuid, vault_mobile.uuid))) ELSE CAST(raw.email AS STRING) END AS email, CASE WHEN raw.business_address IS NOT NULL  AND raw.business_address <> '' AND COALESCE(vault_email.uuid, vault_mobile.uuid) IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(COALESCE(vault_email.aead_key, vault_mobile.aead_key), CAST(raw.business_address AS STRING), COALESCE(vault_email.uuid, vault_mobile.uuid))) ELSE CAST(raw.business_address AS STRING) END AS business_address, CASE WHEN raw.ytunnus IS NOT NULL  AND raw.ytunnus <> '' AND COALESCE(vault_email.uuid, vault_mobile.uuid) IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(COALESCE(vault_email.aead_key, vault_mobile.aead_key), CAST(raw.ytunnus AS STRING), COALESCE(vault_email.uuid, vault_mobile.uuid))) ELSE CAST(raw.ytunnus AS STRING) END AS ytunnus, raw.* EXCEPT( etunimi, sukunimi, puhelin, email, business_address, ytunnus), CASE WHEN ((raw.mobile_clean IS NOT NULL AND raw.mobile_clean <> "" AND raw.mobile_clean <> "0" AND COALESCE(vault_email.uuid, vault_mobile.uuid) IS NOT NULL) OR LOWER(raw.mobile_clean) = "anonymized" OR LOWER(raw.email) =  "anonymized" OR (raw.email IS NOT NULL AND raw.email <> "0" AND raw.email <> "" AND COALESCE(vault_email.uuid, vault_mobile.uuid) IS NOT NULL)) THEN TRUE ELSE FALSE END AS is_anonymised FROM mobile_cleaned raw LEFT JOIN vault_mobiles_flattened vault_mobile ON raw.mobile_clean = vault_mobile.mobile LEFT JOIN vault_emails_flattened vault_email ON raw.email = vault_email.email 
rahalaitos_integration_legacy|marketing_applicant_raha_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.sotu AS STRING)), "[^0-9-+A-Z]", ""), 11) AS ssn_clean FROM`sambla-data-staging-compliance.rahalaitos_integration_legacy.marketing_applicant_raha_r` raw) SELECT CASE WHEN raw.sotu IS NOT NULL  AND raw.sotu <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.sotu AS STRING), VAULT.uuid)) ELSE CAST(raw.sotu AS STRING) END AS sotu, CASE WHEN raw.etunimi IS NOT NULL  AND raw.etunimi <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.etunimi AS STRING), VAULT.uuid)) ELSE CAST(raw.etunimi AS STRING) END AS etunimi, CASE WHEN raw.sukunimi IS NOT NULL  AND raw.sukunimi <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.sukunimi AS STRING), VAULT.uuid)) ELSE CAST(raw.sukunimi AS STRING) END AS sukunimi, CASE WHEN raw.puhelin IS NOT NULL  AND raw.puhelin <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.puhelin AS STRING), VAULT.uuid)) ELSE CAST(raw.puhelin AS STRING) END AS puhelin, CASE WHEN raw.email IS NOT NULL  AND raw.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.email AS STRING), VAULT.uuid)) ELSE CAST(raw.email AS STRING) END AS email, CASE WHEN raw.osoite IS NOT NULL  AND raw.osoite <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.osoite AS STRING), VAULT.uuid)) ELSE CAST(raw.osoite AS STRING) END AS osoite, CASE WHEN raw.kaupunki IS NOT NULL  AND raw.kaupunki <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.kaupunki AS STRING), VAULT.uuid)) ELSE CAST(raw.kaupunki AS STRING) END AS kaupunki, CASE WHEN raw.postinro IS NOT NULL  AND raw.postinro <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.postinro AS STRING), VAULT.uuid)) ELSE CAST(raw.postinro AS STRING) END AS postinro, CASE WHEN raw.tili IS NOT NULL  AND raw.tili <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.tili AS STRING), VAULT.uuid)) ELSE CAST(raw.tili AS STRING) END AS tili, raw.* EXCEPT(sotu, etunimi, sukunimi, puhelin, email, osoite, kaupunki, postinro, tili),CASE WHEN (CAST(raw.sotu AS STRING) IS NOT NULL AND CAST(raw.sotu AS STRING) <> "" AND CAST(raw.sotu AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.sotu AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
rahalaitos_integration_legacy|rahalaitos_laina_yv_candidate_loans_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_yv_candidate_loans_raha_r`
rahalaitos_integration_legacy|rahalaitos_company_external_id_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_company_external_id_raha_r`
rahalaitos_integration_legacy|insurance_person_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_person_raha_r`
rahalaitos_integration_legacy|insurance_insurance_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_insurance_raha_r`
rahalaitos_integration_legacy|insurance_log_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_log_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_kieltolista_sms_raha_r|WITH vault_mobiles_flattened_initial AS (SELECT history.mobile_phone AS mobile,history.stack,history.created_at,vault.uuid,vault.aead_key FROM `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` AS vault CROSS JOIN UNNEST(vault.history) AS history WHERE history.mobile_phone IS NOT NULL AND history.mobile_phone != ""), vault_mobiles_flattened AS ( SELECT mobile, stack, uuid, aead_key FROM vault_mobiles_flattened_initial QUALIFY ROW_NUMBER() OVER (PARTITION BY mobile ORDER BY created_at DESC) = 1 ), mobile_cleaned AS ( SELECT *, CASE WHEN LEFT(raw.puhelin, 2) = " +" THEN SUBSTRING(raw.puhelin, 2) WHEN raw.puhelin NOT LIKE "%+%" THEN CASE WHEN LEFT(raw.puhelin, 3) = "358" THEN CASE WHEN LENGTH(REGEXP_REPLACE(raw.puhelin, "[^0-9\\s]", "")) BETWEEN 9 AND 15 THEN CONCAT("+", REGEXP_REPLACE(raw.puhelin, "[^0-9\\s]", "")) ELSE NULL END WHEN LEFT(raw.puhelin, 1) = "0" THEN CASE WHEN LENGTH(REGEXP_REPLACE(raw.puhelin, "[^0-9\\s]", "")) BETWEEN 7 AND 13 THEN CONCAT("+358", SUBSTRING(REGEXP_REPLACE(raw.puhelin, "[^0-9\\s]", ""), 2)) ELSE NULL END WHEN LENGTH(REGEXP_REPLACE(raw.puhelin, "[^0-9\\s]", "")) BETWEEN 6 AND 12 THEN "+358" || REGEXP_REPLACE(raw.puhelin, "[^0-9\\s]", "") ELSE NULL END ELSE CASE WHEN LENGTH(REPLACE(raw.puhelin, " ", "")) > 6 AND LENGTH(REPLACE(raw.puhelin, " ", "")) < 18 THEN REPLACE(raw.puhelin, " ", "") END END AS mobile_clean  FROM`sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_kieltolista_sms_raha_r` raw) SELECT CASE WHEN raw.puhelin IS NOT NULL  AND raw.puhelin <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.puhelin AS STRING), VAULT.uuid)) ELSE CAST(raw.puhelin AS STRING) END AS puhelin, raw.* EXCEPT( puhelin), CASE WHEN (raw.mobile_clean IS NOT NULL AND raw.mobile_clean <> "" AND raw.mobile_clean <> "0" AND vault.uuid IS NOT NULL) OR LOWER(raw.mobile_clean) = "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM mobile_cleaned raw LEFT JOIN vault_mobiles_flattened vault ON raw.mobile_clean = vault.mobile 
rahalaitos_integration_legacy|rahalaitos_laina_tags_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_tags_raha_r`
rahalaitos_integration_legacy|insurance_person_identify_raha_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.identify AS STRING)), "[^0-9-+A-Z]", ""), 11) AS ssn_clean FROM`sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_person_identify_raha_r` raw) SELECT CASE WHEN raw.identify IS NOT NULL  AND raw.identify <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.identify AS STRING), VAULT.uuid)) ELSE CAST(raw.identify AS STRING) END AS identify, raw.* EXCEPT(identify),CASE WHEN (CAST(raw.identify AS STRING) IS NOT NULL AND CAST(raw.identify AS STRING) <> "" AND CAST(raw.identify AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.identify AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
rahalaitos_integration_legacy|rahalaitos_laina_brands_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_brands_raha_r`
rahalaitos_integration_legacy|crm_user_roles_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.crm_user_roles_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_tag_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_tag_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_outpayment_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_outpayment_raha_r`
rahalaitos_integration_legacy|insurance_history_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_history_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_bankinfo_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_bankinfo_raha_r`
rahalaitos_integration_legacy|marketing_marketing_outpayment_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.marketing_marketing_outpayment_raha_r`
rahalaitos_integration_legacy|rahalaitos_company_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_company_raha_r`
rahalaitos_integration_legacy|rahalaitos_citizenShip_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_citizenShip_raha_r`
rahalaitos_integration_legacy|rahalaitos_company_types_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_company_types_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_decision_history_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_decision_history_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_rahoistuspaatos_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_rahoistuspaatos_raha_r`
rahalaitos_integration_legacy|rahalaitos_campaigninfo_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_campaigninfo_raha_r`
rahalaitos_integration_legacy|rahalaitos_loan_refinance_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_loan_refinance_raha_r`
rahalaitos_integration_legacy|crm_user_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.crm_user_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_send_queue_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_send_queue_raha_r`
rahalaitos_integration_legacy|insurance_agreement_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_agreement_raha_r`
rahalaitos_integration_legacy|rahalaitos_customer_preferences_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_customer_preferences_raha_r`
rahalaitos_integration_legacy|rahalaitos_application_page_origin_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_application_page_origin_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_companyinfo_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_companyinfo_raha_r`
rahalaitos_integration_legacy|rahalaitos_application_ispep_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_application_ispep_raha_r`
rahalaitos_integration_legacy|rahalaitos_campaign_groups_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_campaign_groups_raha_r`
rahalaitos_integration_legacy|insurance_postal_code_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_postal_code_raha_r`
rahalaitos_integration_legacy|insurance_person_information_raha_r|WITH vault_mobiles_flattened_intial AS (SELECT history.mobile_phone AS mobile,history.stack,history.created_at,vault.uuid,vault.aead_key FROM `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` AS vault CROSS JOIN UNNEST(vault.history) AS history WHERE history.mobile_phone IS NOT NULL AND history.mobile_phone != ""), vault_mobiles_flattened AS ( SELECT mobile, stack, uuid, aead_key FROM vault_mobiles_flattened_intial QUALIFY ROW_NUMBER() OVER (PARTITION BY mobile ORDER BY created_at DESC) = 1 ), vault_emails_flattened_initial AS (SELECT history.email AS email,history.stack,history.created_at,vault.uuid,vault.aead_key FROM `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` AS vault CROSS JOIN UNNEST(vault.history) AS history WHERE history.email IS NOT NULL AND history.email != ""), vault_emails_flattened AS ( SELECT email, stack, uuid, aead_key FROM vault_emails_flattened_initial QUALIFY ROW_NUMBER() OVER (PARTITION BY email ORDER BY created_at DESC) = 1 ), mobile_cleaned AS ( SELECT *, CASE WHEN LEFT(raw.phonenumber, 2) = " +" THEN SUBSTRING(raw.phonenumber, 2) WHEN raw.phonenumber NOT LIKE "%+%" THEN CASE WHEN LEFT(raw.phonenumber, 3) = "358" THEN CASE WHEN LENGTH(REGEXP_REPLACE(raw.phonenumber, "[^0-9\\s]", "")) BETWEEN 9 AND 15 THEN CONCAT("+", REGEXP_REPLACE(raw.phonenumber, "[^0-9\\s]", "")) ELSE NULL END WHEN LEFT(raw.phonenumber, 1) = "0" THEN CASE WHEN LENGTH(REGEXP_REPLACE(raw.phonenumber, "[^0-9\\s]", "")) BETWEEN 7 AND 13 THEN CONCAT("+358", SUBSTRING(REGEXP_REPLACE(raw.phonenumber, "[^0-9\\s]", ""), 2)) ELSE NULL END WHEN LENGTH(REGEXP_REPLACE(raw.phonenumber, "[^0-9\\s]", "")) BETWEEN 6 AND 12 THEN "+358" || REGEXP_REPLACE(raw.phonenumber, "[^0-9\\s]", "") ELSE NULL END ELSE CASE WHEN LENGTH(REPLACE(raw.phonenumber, " ", "")) > 6 AND LENGTH(REPLACE(raw.phonenumber, " ", "")) < 18 THEN REPLACE(raw.phonenumber, " ", "") END END AS mobile_clean  FROM`sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_person_information_raha_r` raw) SELECT CASE WHEN raw.firstname IS NOT NULL  AND raw.firstname <> '' AND COALESCE(vault_email.uuid, vault_mobile.uuid) IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(COALESCE(vault_email.aead_key, vault_mobile.aead_key), CAST(raw.firstname AS STRING), COALESCE(vault_email.uuid, vault_mobile.uuid))) ELSE CAST(raw.firstname AS STRING) END AS firstname, CASE WHEN raw.lastname IS NOT NULL  AND raw.lastname <> '' AND COALESCE(vault_email.uuid, vault_mobile.uuid) IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(COALESCE(vault_email.aead_key, vault_mobile.aead_key), CAST(raw.lastname AS STRING), COALESCE(vault_email.uuid, vault_mobile.uuid))) ELSE CAST(raw.lastname AS STRING) END AS lastname, CASE WHEN raw.postal_address IS NOT NULL  AND raw.postal_address <> '' AND COALESCE(vault_email.uuid, vault_mobile.uuid) IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(COALESCE(vault_email.aead_key, vault_mobile.aead_key), CAST(raw.postal_address AS STRING), COALESCE(vault_email.uuid, vault_mobile.uuid))) ELSE CAST(raw.postal_address AS STRING) END AS postal_address, CASE WHEN raw.phonenumber IS NOT NULL  AND raw.phonenumber <> '' AND COALESCE(vault_email.uuid, vault_mobile.uuid) IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(COALESCE(vault_email.aead_key, vault_mobile.aead_key), CAST(raw.phonenumber AS STRING), COALESCE(vault_email.uuid, vault_mobile.uuid))) ELSE CAST(raw.phonenumber AS STRING) END AS phonenumber, CASE WHEN raw.email IS NOT NULL  AND raw.email <> '' AND COALESCE(vault_email.uuid, vault_mobile.uuid) IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(COALESCE(vault_email.aead_key, vault_mobile.aead_key), CAST(raw.email AS STRING), COALESCE(vault_email.uuid, vault_mobile.uuid))) ELSE CAST(raw.email AS STRING) END AS email, raw.* EXCEPT( firstname, lastname, postal_address, phonenumber, email), CASE WHEN ((raw.mobile_clean IS NOT NULL AND raw.mobile_clean <> "" AND raw.mobile_clean <> "0" AND COALESCE(vault_email.uuid, vault_mobile.uuid) IS NOT NULL) OR LOWER(raw.mobile_clean) = "anonymized" OR LOWER(raw.email) =  "anonymized" OR (raw.email IS NOT NULL AND raw.email <> "0" AND raw.email <> "" AND COALESCE(vault_email.uuid, vault_mobile.uuid) IS NOT NULL)) THEN TRUE ELSE FALSE END AS is_anonymised FROM mobile_cleaned raw LEFT JOIN vault_mobiles_flattened vault_mobile ON raw.mobile_clean = vault_mobile.mobile LEFT JOIN vault_emails_flattened vault_email ON raw.email = vault_email.email 
rahalaitos_integration_legacy|rahalaitos_loan_application_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_loan_application_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_gallup_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_gallup_raha_r`
rahalaitos_integration_legacy|rahalaitos_campaign_facebook_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_campaign_facebook_raha_r`
rahalaitos_integration_legacy|rahalaitos_loan_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_loan_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_workinfo_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_workinfo_raha_r`
rahalaitos_integration_legacy|insurance_history_details_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_history_details_raha_r`
rahalaitos_integration_legacy|rahalaitos_customer_raha_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.ssn AS STRING)), "[^0-9-+A-Z]", ""), 11) AS ssn_clean FROM`sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_customer_raha_r` raw) SELECT CASE WHEN raw.ssn IS NOT NULL  AND raw.ssn <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.ssn AS STRING), VAULT.uuid)) ELSE CAST(raw.ssn AS STRING) END AS ssn, raw.* EXCEPT(ssn),CASE WHEN (CAST(raw.ssn AS STRING) IS NOT NULL AND CAST(raw.ssn AS STRING) <> "" AND CAST(raw.ssn AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.ssn AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
rahalaitos_integration_legacy|rahalaitos_incomplete_applications_r|WITH vault_emails_flattened_initial AS (SELECT history.email AS email,history.stack,history.created_at,vault.uuid,vault.aead_key FROM `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` AS vault CROSS JOIN UNNEST(vault.history) AS history WHERE history.email IS NOT NULL AND history.email != ""), vault_emails_flattened AS ( SELECT email, stack, uuid, aead_key FROM vault_emails_flattened_initial QUALIFY ROW_NUMBER() OVER (PARTITION BY email ORDER BY created_at DESC) = 1 ) SELECT CASE WHEN raw.email IS NOT NULL  AND raw.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.email AS STRING), VAULT.uuid)) ELSE CAST(raw.email AS STRING) END AS email, raw.* EXCEPT(email),CASE WHEN (raw.email IS NOT NULL AND raw.email <> "" AND raw.email <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(raw.email) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised  FROM`sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_incomplete_applications_r` raw LEFT JOIN vault_emails_flattened vault ON raw.email = vault.email
rahalaitos_integration_legacy|rahalaitos_all_customers_r|WITH vault_emails_flattened_initial AS (SELECT history.email AS email,history.stack,history.created_at,vault.uuid,vault.aead_key FROM `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` AS vault CROSS JOIN UNNEST(vault.history) AS history WHERE history.email IS NOT NULL AND history.email != ""), vault_emails_flattened AS ( SELECT email, stack, uuid, aead_key FROM vault_emails_flattened_initial QUALIFY ROW_NUMBER() OVER (PARTITION BY email ORDER BY created_at DESC) = 1 ) SELECT CASE WHEN raw.email IS NOT NULL  AND raw.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.email AS STRING), VAULT.uuid)) ELSE CAST(raw.email AS STRING) END AS email, raw.* EXCEPT(email),CASE WHEN (raw.email IS NOT NULL AND raw.email <> "" AND raw.email <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(raw.email) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised  FROM`sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_all_customers_r` raw LEFT JOIN vault_emails_flattened vault ON raw.email = vault.email
rahalaitos_integration_legacy|insurance_insurance_language_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_insurance_language_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_yv_candidateinfo_raha_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.yv_sotu AS STRING)), "[^0-9-+A-Z]", ""), 11) AS ssn_clean FROM`sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_yv_candidateinfo_raha_r` raw) SELECT CASE WHEN raw.yv_etunimi IS NOT NULL  AND raw.yv_etunimi <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.yv_etunimi AS STRING), VAULT.uuid)) ELSE CAST(raw.yv_etunimi AS STRING) END AS yv_etunimi, CASE WHEN raw.yv_sukunimi IS NOT NULL  AND raw.yv_sukunimi <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.yv_sukunimi AS STRING), VAULT.uuid)) ELSE CAST(raw.yv_sukunimi AS STRING) END AS yv_sukunimi, CASE WHEN raw.yv_osoite IS NOT NULL  AND raw.yv_osoite <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.yv_osoite AS STRING), VAULT.uuid)) ELSE CAST(raw.yv_osoite AS STRING) END AS yv_osoite, CASE WHEN raw.yv_postinro IS NOT NULL  AND raw.yv_postinro <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.yv_postinro AS STRING), VAULT.uuid)) ELSE CAST(raw.yv_postinro AS STRING) END AS yv_postinro, CASE WHEN raw.yv_kaupunki IS NOT NULL  AND raw.yv_kaupunki <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.yv_kaupunki AS STRING), VAULT.uuid)) ELSE CAST(raw.yv_kaupunki AS STRING) END AS yv_kaupunki, CASE WHEN raw.yv_puhelin IS NOT NULL  AND raw.yv_puhelin <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.yv_puhelin AS STRING), VAULT.uuid)) ELSE CAST(raw.yv_puhelin AS STRING) END AS yv_puhelin, CASE WHEN raw.yv_tyopuhelin IS NOT NULL  AND raw.yv_tyopuhelin <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.yv_tyopuhelin AS STRING), VAULT.uuid)) ELSE CAST(raw.yv_tyopuhelin AS STRING) END AS yv_tyopuhelin, CASE WHEN raw.yv_asuu IS NOT NULL  AND raw.yv_asuu <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.yv_asuu AS STRING), VAULT.uuid)) ELSE CAST(raw.yv_asuu AS STRING) END AS yv_asuu, CASE WHEN raw.yv_sotu IS NOT NULL  AND raw.yv_sotu <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.yv_sotu AS STRING), VAULT.uuid)) ELSE CAST(raw.yv_sotu AS STRING) END AS yv_sotu, CASE WHEN raw.yv_tyonantaja IS NOT NULL  AND raw.yv_tyonantaja <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.yv_tyonantaja AS STRING), VAULT.uuid)) ELSE CAST(raw.yv_tyonantaja AS STRING) END AS yv_tyonantaja, CASE WHEN raw.yv_tyonantajapuh IS NOT NULL  AND raw.yv_tyonantajapuh <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.yv_tyonantajapuh AS STRING), VAULT.uuid)) ELSE CAST(raw.yv_tyonantajapuh AS STRING) END AS yv_tyonantajapuh, CASE WHEN raw.yv_ytunnus IS NOT NULL  AND raw.yv_ytunnus <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.yv_ytunnus AS STRING), VAULT.uuid)) ELSE CAST(raw.yv_ytunnus AS STRING) END AS yv_ytunnus, CASE WHEN raw.yv_email IS NOT NULL  AND raw.yv_email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.yv_email AS STRING), VAULT.uuid)) ELSE CAST(raw.yv_email AS STRING) END AS yv_email, raw.* EXCEPT(yv_etunimi, yv_sukunimi, yv_osoite, yv_postinro, yv_kaupunki, yv_puhelin, yv_tyopuhelin, yv_asuu, yv_sotu, yv_tyonantaja, yv_tyonantajapuh, yv_ytunnus, yv_email),CASE WHEN (CAST(raw.yv_sotu AS STRING) IS NOT NULL AND CAST(raw.yv_sotu AS STRING) <> "" AND CAST(raw.yv_sotu AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.yv_sotu AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
rahalaitos_integration_legacy|insurance_insurance_status_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_insurance_status_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_orders_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_orders_raha_r`
rahalaitos_integration_legacy|insurance_insurance_application_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_insurance_application_raha_r`
rahalaitos_integration_legacy|rahalaitos_campaign_affiliate_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_campaign_affiliate_raha_r`
rahalaitos_integration_legacy|rahalaitos_loan_details_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_loan_details_raha_r`
rahalaitos_integration_legacy|rahalaitos_company_type_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_company_type_raha_r`
rahalaitos_integration_legacy|insurance_history_type_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_history_type_raha_r`
rahalaitos_integration_legacy|rahalaitos_marketing_email_temp_raha_r|WITH vault_emails_flattened_initial AS (SELECT history.email AS email,history.stack,history.created_at,vault.uuid,vault.aead_key FROM `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` AS vault CROSS JOIN UNNEST(vault.history) AS history WHERE history.email IS NOT NULL AND history.email != ""), vault_emails_flattened AS ( SELECT email, stack, uuid, aead_key FROM vault_emails_flattened_initial QUALIFY ROW_NUMBER() OVER (PARTITION BY email ORDER BY created_at DESC) = 1 ) SELECT CASE WHEN raw.email IS NOT NULL  AND raw.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.email AS STRING), VAULT.uuid)) ELSE CAST(raw.email AS STRING) END AS email, raw.* EXCEPT(email),CASE WHEN (raw.email IS NOT NULL AND raw.email <> "" AND raw.email <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(raw.email) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised  FROM`sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_marketing_email_temp_raha_r` raw LEFT JOIN vault_emails_flattened vault ON raw.email = vault.email
rahalaitos_integration_legacy|rahalaitos_laina_login_persons_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_login_persons_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_contactinfo_raha_r|WITH data_with_ssn_rules AS (SELECT *, LEFT(REGEXP_REPLACE(UPPER(CAST(raw.sotu AS STRING)), "[^0-9-+A-Z]", ""), 11) AS ssn_clean FROM`sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_contactinfo_raha_r` raw) SELECT CASE WHEN raw.etunimi IS NOT NULL  AND raw.etunimi <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.etunimi AS STRING), VAULT.uuid)) ELSE CAST(raw.etunimi AS STRING) END AS etunimi, CASE WHEN raw.sukunimi IS NOT NULL  AND raw.sukunimi <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.sukunimi AS STRING), VAULT.uuid)) ELSE CAST(raw.sukunimi AS STRING) END AS sukunimi, CASE WHEN raw.osoite IS NOT NULL  AND raw.osoite <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.osoite AS STRING), VAULT.uuid)) ELSE CAST(raw.osoite AS STRING) END AS osoite, CASE WHEN raw.postinro IS NOT NULL  AND raw.postinro <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.postinro AS STRING), VAULT.uuid)) ELSE CAST(raw.postinro AS STRING) END AS postinro, CASE WHEN raw.kaupunki IS NOT NULL  AND raw.kaupunki <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.kaupunki AS STRING), VAULT.uuid)) ELSE CAST(raw.kaupunki AS STRING) END AS kaupunki, CASE WHEN raw.puhelin IS NOT NULL  AND raw.puhelin <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.puhelin AS STRING), VAULT.uuid)) ELSE CAST(raw.puhelin AS STRING) END AS puhelin, CASE WHEN raw.tyopuhelin IS NOT NULL  AND raw.tyopuhelin <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.tyopuhelin AS STRING), VAULT.uuid)) ELSE CAST(raw.tyopuhelin AS STRING) END AS tyopuhelin, CASE WHEN raw.email IS NOT NULL  AND raw.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.email AS STRING), VAULT.uuid)) ELSE CAST(raw.email AS STRING) END AS email, CASE WHEN raw.sotu IS NOT NULL  AND raw.sotu <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.sotu AS STRING), VAULT.uuid)) ELSE CAST(raw.sotu AS STRING) END AS sotu, raw.* EXCEPT(etunimi, sukunimi, osoite, postinro, kaupunki, puhelin, tyopuhelin, email, sotu),CASE WHEN (CAST(raw.sotu AS STRING) IS NOT NULL AND CAST(raw.sotu AS STRING) <> "" AND CAST(raw.sotu AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.sotu AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
rahalaitos_integration_legacy|insurance_insurance_personal_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_insurance_personal_raha_r`
rahalaitos_integration_legacy|insurance_person_agent_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_person_agent_raha_r`
rahalaitos_integration_legacy|insurance_history_user_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_history_user_raha_r`
rahalaitos_integration_legacy|crm_role_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.crm_role_raha_r`
rahalaitos_integration_legacy|rahalaitos_campaign_google_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_campaign_google_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_loanorg_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_loanorg_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_gallup_fields_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_gallup_fields_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_adservicemedia_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_adservicemedia_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_businessinfo_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_businessinfo_raha_r`
rahalaitos_integration_legacy|insurance_insurance_gender_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_insurance_gender_raha_r`
rahalaitos_integration_legacy|rahalaitos_campaign_defaults_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_campaign_defaults_raha_r`
rahalaitos_integration_legacy|rahalaitos_campaign_groups_name_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_campaign_groups_name_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_generalinfo_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_generalinfo_raha_r`
rahalaitos_integration_legacy|marketing_external_marketing_raha_r|WITH vault_mobiles_flattened_intial AS (SELECT history.mobile_phone AS mobile,history.stack,history.created_at,vault.uuid,vault.aead_key FROM `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` AS vault CROSS JOIN UNNEST(vault.history) AS history WHERE history.mobile_phone IS NOT NULL AND history.mobile_phone != ""), vault_mobiles_flattened AS ( SELECT mobile, stack, uuid, aead_key FROM vault_mobiles_flattened_intial QUALIFY ROW_NUMBER() OVER (PARTITION BY mobile ORDER BY created_at DESC) = 1 ), vault_emails_flattened_initial AS (SELECT history.email AS email,history.stack,history.created_at,vault.uuid,vault.aead_key FROM `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` AS vault CROSS JOIN UNNEST(vault.history) AS history WHERE history.email IS NOT NULL AND history.email != ""), vault_emails_flattened AS ( SELECT email, stack, uuid, aead_key FROM vault_emails_flattened_initial QUALIFY ROW_NUMBER() OVER (PARTITION BY email ORDER BY created_at DESC) = 1 ), mobile_cleaned AS ( SELECT *, CASE WHEN LEFT(raw.puhelin, 2) = " +" THEN SUBSTRING(raw.puhelin, 2) WHEN raw.puhelin NOT LIKE "%+%" THEN CASE WHEN LEFT(raw.puhelin, 3) = "358" THEN CASE WHEN LENGTH(REGEXP_REPLACE(raw.puhelin, "[^0-9\\s]", "")) BETWEEN 9 AND 15 THEN CONCAT("+", REGEXP_REPLACE(raw.puhelin, "[^0-9\\s]", "")) ELSE NULL END WHEN LEFT(raw.puhelin, 1) = "0" THEN CASE WHEN LENGTH(REGEXP_REPLACE(raw.puhelin, "[^0-9\\s]", "")) BETWEEN 7 AND 13 THEN CONCAT("+358", SUBSTRING(REGEXP_REPLACE(raw.puhelin, "[^0-9\\s]", ""), 2)) ELSE NULL END WHEN LENGTH(REGEXP_REPLACE(raw.puhelin, "[^0-9\\s]", "")) BETWEEN 6 AND 12 THEN "+358" || REGEXP_REPLACE(raw.puhelin, "[^0-9\\s]", "") ELSE NULL END ELSE CASE WHEN LENGTH(REPLACE(raw.puhelin, " ", "")) > 6 AND LENGTH(REPLACE(raw.puhelin, " ", "")) < 18 THEN REPLACE(raw.puhelin, " ", "") END END AS mobile_clean  FROM`sambla-data-staging-compliance.rahalaitos_integration_legacy.marketing_external_marketing_raha_r` raw) SELECT CASE WHEN raw.etunimi IS NOT NULL  AND raw.etunimi <> '' AND COALESCE(vault_email.uuid, vault_mobile.uuid) IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(COALESCE(vault_email.aead_key, vault_mobile.aead_key), CAST(raw.etunimi AS STRING), COALESCE(vault_email.uuid, vault_mobile.uuid))) ELSE CAST(raw.etunimi AS STRING) END AS etunimi, CASE WHEN raw.sukunimi IS NOT NULL  AND raw.sukunimi <> '' AND COALESCE(vault_email.uuid, vault_mobile.uuid) IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(COALESCE(vault_email.aead_key, vault_mobile.aead_key), CAST(raw.sukunimi AS STRING), COALESCE(vault_email.uuid, vault_mobile.uuid))) ELSE CAST(raw.sukunimi AS STRING) END AS sukunimi, CASE WHEN raw.osoite IS NOT NULL  AND raw.osoite <> '' AND COALESCE(vault_email.uuid, vault_mobile.uuid) IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(COALESCE(vault_email.aead_key, vault_mobile.aead_key), CAST(raw.osoite AS STRING), COALESCE(vault_email.uuid, vault_mobile.uuid))) ELSE CAST(raw.osoite AS STRING) END AS osoite, CASE WHEN raw.postinumero IS NOT NULL  AND raw.postinumero <> '' AND COALESCE(vault_email.uuid, vault_mobile.uuid) IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(COALESCE(vault_email.aead_key, vault_mobile.aead_key), CAST(raw.postinumero AS STRING), COALESCE(vault_email.uuid, vault_mobile.uuid))) ELSE CAST(raw.postinumero AS STRING) END AS postinumero, CASE WHEN raw.paikkakunta IS NOT NULL  AND raw.paikkakunta <> '' AND COALESCE(vault_email.uuid, vault_mobile.uuid) IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(COALESCE(vault_email.aead_key, vault_mobile.aead_key), CAST(raw.paikkakunta AS STRING), COALESCE(vault_email.uuid, vault_mobile.uuid))) ELSE CAST(raw.paikkakunta AS STRING) END AS paikkakunta, CASE WHEN raw.email IS NOT NULL  AND raw.email <> '' AND COALESCE(vault_email.uuid, vault_mobile.uuid) IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(COALESCE(vault_email.aead_key, vault_mobile.aead_key), CAST(raw.email AS STRING), COALESCE(vault_email.uuid, vault_mobile.uuid))) ELSE CAST(raw.email AS STRING) END AS email, CASE WHEN raw.puhelin IS NOT NULL  AND raw.puhelin <> '' AND COALESCE(vault_email.uuid, vault_mobile.uuid) IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(COALESCE(vault_email.aead_key, vault_mobile.aead_key), CAST(raw.puhelin AS STRING), COALESCE(vault_email.uuid, vault_mobile.uuid))) ELSE CAST(raw.puhelin AS STRING) END AS puhelin, raw.* EXCEPT( etunimi, sukunimi, osoite, postinumero, paikkakunta, email, puhelin), CASE WHEN ((raw.mobile_clean IS NOT NULL AND raw.mobile_clean <> "" AND raw.mobile_clean <> "0" AND COALESCE(vault_email.uuid, vault_mobile.uuid) IS NOT NULL) OR LOWER(raw.mobile_clean) = "anonymized" OR LOWER(raw.email) =  "anonymized" OR (raw.email IS NOT NULL AND raw.email <> "0" AND raw.email <> "" AND COALESCE(vault_email.uuid, vault_mobile.uuid) IS NOT NULL)) THEN TRUE ELSE FALSE END AS is_anonymised FROM mobile_cleaned raw LEFT JOIN vault_mobiles_flattened vault_mobile ON raw.mobile_clean = vault_mobile.mobile LEFT JOIN vault_emails_flattened vault_email ON raw.email = vault_email.email 
rahalaitos_integration_legacy|insurance_insurance_sent_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_insurance_sent_raha_r`
rahalaitos_integration_legacy|rahalaitos_laina_decision_data_types_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_laina_decision_data_types_raha_r`
rahalaitos_integration_legacy|rahalaitos_loan_applicant_type_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_loan_applicant_type_raha_r`
rahalaitos_integration_legacy|rahalaitos_loan_type_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_loan_type_raha_r`
rahalaitos_integration_legacy|rahalaitos_customer_counter_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_customer_counter_raha_r`
rahalaitos_integration_legacy|rahalaitos_marketing_sms_temp_raha_r|WITH vault_mobiles_flattened_initial AS (SELECT history.mobile_phone AS mobile,history.stack,history.created_at,vault.uuid,vault.aead_key FROM `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` AS vault CROSS JOIN UNNEST(vault.history) AS history WHERE history.mobile_phone IS NOT NULL AND history.mobile_phone != ""), vault_mobiles_flattened AS ( SELECT mobile, stack, uuid, aead_key FROM vault_mobiles_flattened_initial QUALIFY ROW_NUMBER() OVER (PARTITION BY mobile ORDER BY created_at DESC) = 1 ), mobile_cleaned AS ( SELECT *, CASE WHEN LEFT(raw.phone, 2) = " +" THEN SUBSTRING(raw.phone, 2) WHEN raw.phone NOT LIKE "%+%" THEN CASE WHEN LEFT(raw.phone, 3) = "358" THEN CASE WHEN LENGTH(REGEXP_REPLACE(raw.phone, "[^0-9\\s]", "")) BETWEEN 9 AND 15 THEN CONCAT("+", REGEXP_REPLACE(raw.phone, "[^0-9\\s]", "")) ELSE NULL END WHEN LEFT(raw.phone, 1) = "0" THEN CASE WHEN LENGTH(REGEXP_REPLACE(raw.phone, "[^0-9\\s]", "")) BETWEEN 7 AND 13 THEN CONCAT("+358", SUBSTRING(REGEXP_REPLACE(raw.phone, "[^0-9\\s]", ""), 2)) ELSE NULL END WHEN LENGTH(REGEXP_REPLACE(raw.phone, "[^0-9\\s]", "")) BETWEEN 6 AND 12 THEN "+358" || REGEXP_REPLACE(raw.phone, "[^0-9\\s]", "") ELSE NULL END ELSE CASE WHEN LENGTH(REPLACE(raw.phone, " ", "")) > 6 AND LENGTH(REPLACE(raw.phone, " ", "")) < 18 THEN REPLACE(raw.phone, " ", "") END END AS mobile_clean  FROM`sambla-data-staging-compliance.rahalaitos_integration_legacy.rahalaitos_marketing_sms_temp_raha_r` raw) SELECT CASE WHEN raw.phone IS NOT NULL  AND raw.phone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.phone AS STRING), VAULT.uuid)) ELSE CAST(raw.phone AS STRING) END AS phone, raw.* EXCEPT( phone), CASE WHEN (raw.mobile_clean IS NOT NULL AND raw.mobile_clean <> "" AND raw.mobile_clean <> "0" AND vault.uuid IS NOT NULL) OR LOWER(raw.mobile_clean) = "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM mobile_cleaned raw LEFT JOIN vault_mobiles_flattened vault ON raw.mobile_clean = vault.mobile 
rahalaitos_integration_legacy|insurance_history_username_raha_r|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.rahalaitos_integration_legacy.insurance_history_username_raha_r`
