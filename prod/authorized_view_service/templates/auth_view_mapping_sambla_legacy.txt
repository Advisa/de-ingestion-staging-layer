sambla_legacy_integration_legacy|applications_all_versions_sambq_p|WITH data_with_ssn_rules AS (SELECT *, CASE WHEN market= "SE" THEN LEFT(REGEXP_REPLACE(CAST(raw.national_id AS STRING), "[^0-9]", ""), 12) WHEN market= "NO" THEN LEFT(REGEXP_REPLACE(CAST(raw.national_id AS STRING), "[^0-9]", ""), 11) WHEN market= "DK" THEN LEFT(REGEXP_REPLACE(CAST(raw.national_id AS STRING), "[^0-9]", ""), 10) WHEN market= "FI" THEN LEFT(REGEXP_REPLACE(UPPER(CAST(raw.national_id AS STRING)), "[^0-9-+A-Z]", ""), 11) END AS ssn_clean FROM`sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_all_versions_sambq_p` raw) SELECT ARRAY(SELECT STRUCT(f_allPaidOutByAdvisa.allowRefinance, f_allPaidOutByAdvisa.date, CASE WHEN f_allPaidOutByAdvisa.bank IS NOT NULL  AND f_allPaidOutByAdvisa.bank <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(f_allPaidOutByAdvisa.bank AS STRING), VAULT.uuid)) ELSE CAST(f_allPaidOutByAdvisa.bank AS STRING) END AS bank, f_allPaidOutByAdvisa.amount, f_allPaidOutByAdvisa._id) FROM UNNEST(allPaidOutByAdvisa) AS f_allPaidOutByAdvisa) AS allPaidOutByAdvisa, ARRAY(SELECT STRUCT(f_partnerComments._id, f_partnerComments.date, CASE WHEN f_partnerComments.userName IS NOT NULL  AND f_partnerComments.userName <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(f_partnerComments.userName AS STRING), VAULT.uuid)) ELSE CAST(f_partnerComments.userName AS STRING) END AS userName, f_partnerComments.removalReason, f_partnerComments.user, CASE WHEN f_partnerComments.text IS NOT NULL  AND f_partnerComments.text <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(f_partnerComments.text AS STRING), VAULT.uuid)) ELSE CAST(f_partnerComments.text AS STRING) END AS text) FROM UNNEST(partnerComments) AS f_partnerComments) AS partnerComments, CASE WHEN raw.bank IS NOT NULL  AND raw.bank <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.bank AS STRING), VAULT.uuid)) ELSE CAST(raw.bank AS STRING) END AS bank, CASE WHEN raw.originIPAddress IS NOT NULL  AND raw.originIPAddress <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.originIPAddress AS STRING), VAULT.uuid)) ELSE CAST(raw.originIPAddress AS STRING) END AS originIPAddress, CASE WHEN raw.idNumber IS NOT NULL  AND raw.idNumber <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.idNumber AS STRING), VAULT.uuid)) ELSE CAST(raw.idNumber AS STRING) END AS idNumber, CASE WHEN raw.accountNumber IS NOT NULL  AND raw.accountNumber <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.accountNumber AS STRING), VAULT.uuid)) ELSE CAST(raw.accountNumber AS STRING) END AS accountNumber, CASE WHEN raw.clearingNumber IS NOT NULL  AND raw.clearingNumber <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.clearingNumber AS STRING), VAULT.uuid)) ELSE CAST(raw.clearingNumber AS STRING) END AS clearingNumber, CASE WHEN raw.address IS NOT NULL  AND raw.address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.address AS STRING), VAULT.uuid)) ELSE CAST(raw.address AS STRING) END AS address, CASE WHEN raw.postalCode IS NOT NULL  AND raw.postalCode <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.postalCode AS STRING), VAULT.uuid)) ELSE CAST(raw.postalCode AS STRING) END AS postalCode, CASE WHEN raw.organizationNumber IS NOT NULL  AND raw.organizationNumber <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.organizationNumber AS STRING), VAULT.uuid)) ELSE CAST(raw.organizationNumber AS STRING) END AS organizationNumber, CASE WHEN raw.postalArea IS NOT NULL  AND raw.postalArea <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.postalArea AS STRING), VAULT.uuid)) ELSE CAST(raw.postalArea AS STRING) END AS postalArea, CASE WHEN raw.name IS NOT NULL  AND raw.name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.name AS STRING), VAULT.uuid)) ELSE CAST(raw.name AS STRING) END AS name, CASE WHEN raw.person IS NOT NULL  AND raw.person <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.person AS STRING), VAULT.uuid)) ELSE CAST(raw.person AS STRING) END AS person, CASE WHEN raw.national_id IS NOT NULL  AND raw.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.national_id AS STRING) END AS national_id, raw.* EXCEPT(bank, originIPAddress, allPaidOutByAdvisa, partnerComments, idNumber, accountNumber, clearingNumber, address, postalCode, organizationNumber, postalArea, name, person, national_id) FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_legacy_integration_legacy|applications_sambq_p|WITH data_with_ssn_rules AS (SELECT *, CASE WHEN market= "SE" THEN LEFT(REGEXP_REPLACE(CAST(raw.national_id AS STRING), "[^0-9]", ""), 12) WHEN market= "NO" THEN LEFT(REGEXP_REPLACE(CAST(raw.national_id AS STRING), "[^0-9]", ""), 11) WHEN market= "DK" THEN LEFT(REGEXP_REPLACE(CAST(raw.national_id AS STRING), "[^0-9]", ""), 10) WHEN market= "FI" THEN LEFT(REGEXP_REPLACE(UPPER(CAST(raw.national_id AS STRING)), "[^0-9-+A-Z]", ""), 11) END AS ssn_clean FROM`sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_sambq_p` raw) SELECT ARRAY(SELECT STRUCT(f_partnerComments.date, f_partnerComments._id, f_partnerComments.removalReason, CASE WHEN f_partnerComments.userName IS NOT NULL  AND f_partnerComments.userName <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(f_partnerComments.userName AS STRING), VAULT.uuid)) ELSE CAST(f_partnerComments.userName AS STRING) END AS userName, CASE WHEN f_partnerComments.text IS NOT NULL  AND f_partnerComments.text <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(f_partnerComments.text AS STRING), VAULT.uuid)) ELSE CAST(f_partnerComments.text AS STRING) END AS text, f_partnerComments.user) FROM UNNEST(partnerComments) AS f_partnerComments) AS partnerComments, ARRAY(SELECT STRUCT(f_allPaidOutByAdvisa.date, CASE WHEN f_allPaidOutByAdvisa.bank IS NOT NULL  AND f_allPaidOutByAdvisa.bank <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(f_allPaidOutByAdvisa.bank AS STRING), VAULT.uuid)) ELSE CAST(f_allPaidOutByAdvisa.bank AS STRING) END AS bank, f_allPaidOutByAdvisa._id, f_allPaidOutByAdvisa.allowRefinance, f_allPaidOutByAdvisa.amount) FROM UNNEST(allPaidOutByAdvisa) AS f_allPaidOutByAdvisa) AS allPaidOutByAdvisa, CASE WHEN raw.bank IS NOT NULL  AND raw.bank <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.bank AS STRING), VAULT.uuid)) ELSE CAST(raw.bank AS STRING) END AS bank, CASE WHEN raw.originIPAddress IS NOT NULL  AND raw.originIPAddress <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.originIPAddress AS STRING), VAULT.uuid)) ELSE CAST(raw.originIPAddress AS STRING) END AS originIPAddress, CASE WHEN raw.address IS NOT NULL  AND raw.address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.address AS STRING), VAULT.uuid)) ELSE CAST(raw.address AS STRING) END AS address, CASE WHEN raw.postalCode IS NOT NULL  AND raw.postalCode <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.postalCode AS STRING), VAULT.uuid)) ELSE CAST(raw.postalCode AS STRING) END AS postalCode, CASE WHEN raw.organizationNumber IS NOT NULL  AND raw.organizationNumber <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.organizationNumber AS STRING), VAULT.uuid)) ELSE CAST(raw.organizationNumber AS STRING) END AS organizationNumber, CASE WHEN raw.postalArea IS NOT NULL  AND raw.postalArea <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.postalArea AS STRING), VAULT.uuid)) ELSE CAST(raw.postalArea AS STRING) END AS postalArea, CASE WHEN raw.name IS NOT NULL  AND raw.name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.name AS STRING), VAULT.uuid)) ELSE CAST(raw.name AS STRING) END AS name, CASE WHEN raw.person IS NOT NULL  AND raw.person <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.person AS STRING), VAULT.uuid)) ELSE CAST(raw.person AS STRING) END AS person, CASE WHEN raw.national_id IS NOT NULL  AND raw.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.national_id AS STRING) END AS national_id, raw.* EXCEPT(bank, originIPAddress, allPaidOutByAdvisa, partnerComments, address, postalCode, organizationNumber, postalArea, name, person, national_id) FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_legacy_integration_legacy|applications_credit_reports_sambq_p|SELECT * FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_credit_reports_sambq_p`
sambla_legacy_integration_legacy|users_sambq_p|SELECT * FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.users_sambq_p`
sambla_legacy_integration_legacy|applications_bids_sambq_p|SELECT * FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_bids_sambq_p`
sambla_legacy_integration_legacy|banks_sambq_p|SELECT * FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.banks_sambq_p`
sambla_legacy_integration_legacy|applications_version_sambq_p|SELECT * FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_version_sambq_p`
sambla_legacy_integration_legacy|applications_invites_sambq_p|SELECT * FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_invites_sambq_p`
sambla_legacy_integration_legacy|applications_loans_sambq_p|SELECT * FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_loans_sambq_p`
sambla_legacy_integration_legacy|unsubscriptions_sambq_p|SELECT * FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.unsubscriptions_sambq_p`
sambla_legacy_integration_legacy|applications_customers_sambq_p|SELECT * FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_customers_sambq_p`
sambla_legacy_integration_legacy|applications_internalcomments_sambq_p|SELECT * FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_internalcomments_sambq_p`
sambla_legacy_integration_legacy|applications_past_report_requests_sambq_p|SELECT * FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_past_report_requests_sambq_p`
sambla_legacy_integration_legacy|applications_utmhistory_sambq_p|SELECT * FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_utmhistory_sambq_p`
sambla_legacy_integration_legacy|applications_estates_sambq_p|SELECT * FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_estates_sambq_p`
sambla_legacy_integration_legacy|applications_excludebanks_sambq_p|SELECT * FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_excludebanks_sambq_p`
sambla_legacy_integration_legacy|applications_allpaidoutbysambla_sambq_p|SELECT * FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_allpaidoutbysambla_sambq_p`
sambla_legacy_integration_legacy|applications_scheduledcalls_sambq_p|SELECT * FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_scheduledcalls_sambq_p`