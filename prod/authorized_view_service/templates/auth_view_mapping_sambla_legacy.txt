sambla_legacy_integration_legacy|applications_bids_sambq_p|WITH raw_data_with_stack AS (SELECT *, "sambla" as stack FROM`sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_bids_sambq_p` raw), stack_vault as ( select uuid, aead_key, loan_application_oid, stack from `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf`, unnest(history) as history where history.stack  = "sambla" )SELECT ARRAY(SELECT CASE WHEN f_comments IS NOT NULL AND f_comments <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(f_comments AS STRING), VAULT.uuid)) ELSE CAST(f_comments AS STRING) END FROM UNNEST(comments) AS f_comments) AS comments, CASE WHEN raw.bank IS NOT NULL  AND raw.bank <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.bank AS STRING), VAULT.uuid)) ELSE CAST(raw.bank AS STRING) END AS bank, CASE WHEN raw.name IS NOT NULL  AND raw.name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.name AS STRING), VAULT.uuid)) ELSE CAST(raw.name AS STRING) END AS name, raw.* EXCEPT(comments, bank, name),CASE WHEN (raw.application_id IS NOT NULL AND raw.application_id <> "" AND raw.application_id <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(raw.application_id) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised  FROM raw_data_with_stack raw LEFT JOIN stack_vault vault ON raw.application_id = vault.loan_application_oid AND raw.stack = vault.stack
sambla_legacy_integration_legacy|applications_invites_sambq_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_invites_sambq_p`
sambla_legacy_integration_legacy|applications_sambq_p|WITH data_with_ssn_rules AS (SELECT *, CASE WHEN market= "SE" THEN LEFT(REGEXP_REPLACE(CAST(raw.national_id AS STRING), "[^0-9]", ""), 12) WHEN market= "NO" THEN LEFT(REGEXP_REPLACE(CAST(raw.national_id AS STRING), "[^0-9]", ""), 11) WHEN market= "DK" THEN LEFT(REGEXP_REPLACE(CAST(raw.national_id AS STRING), "[^0-9]", ""), 10) WHEN market= "FI" THEN LEFT(REGEXP_REPLACE(UPPER(CAST(raw.national_id AS STRING)), "[^0-9-+A-Z]", ""), 11) END AS ssn_clean FROM`sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_sambq_p` raw) SELECT ARRAY(SELECT STRUCT(f_partnerComments._id, CASE WHEN f_partnerComments.text IS NOT NULL  AND f_partnerComments.text <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(f_partnerComments.text AS STRING), VAULT.uuid)) ELSE CAST(f_partnerComments.text AS STRING) END AS text, CASE WHEN f_partnerComments.userName IS NOT NULL  AND f_partnerComments.userName <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(f_partnerComments.userName AS STRING), VAULT.uuid)) ELSE CAST(f_partnerComments.userName AS STRING) END AS userName, f_partnerComments.removalReason, f_partnerComments.user, f_partnerComments.date) FROM UNNEST(partnerComments) AS f_partnerComments) AS partnerComments, ARRAY(SELECT CASE WHEN f_comments IS NOT NULL AND f_comments <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(f_comments AS STRING), VAULT.uuid)) ELSE CAST(f_comments AS STRING) END FROM UNNEST(comments) AS f_comments) AS comments, CASE WHEN raw.bank IS NOT NULL  AND raw.bank <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.bank AS STRING), VAULT.uuid)) ELSE CAST(raw.bank AS STRING) END AS bank, CASE WHEN raw.originIPAddress IS NOT NULL  AND raw.originIPAddress <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.originIPAddress AS STRING), VAULT.uuid)) ELSE CAST(raw.originIPAddress AS STRING) END AS originIPAddress, CASE WHEN raw.address IS NOT NULL  AND raw.address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.address AS STRING), VAULT.uuid)) ELSE CAST(raw.address AS STRING) END AS address, CASE WHEN raw.postalCode IS NOT NULL  AND raw.postalCode <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.postalCode AS STRING), VAULT.uuid)) ELSE CAST(raw.postalCode AS STRING) END AS postalCode, CASE WHEN raw.organizationNumber IS NOT NULL  AND raw.organizationNumber <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.organizationNumber AS STRING), VAULT.uuid)) ELSE CAST(raw.organizationNumber AS STRING) END AS organizationNumber, CASE WHEN raw.postalArea IS NOT NULL  AND raw.postalArea <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.postalArea AS STRING), VAULT.uuid)) ELSE CAST(raw.postalArea AS STRING) END AS postalArea, CASE WHEN raw.name IS NOT NULL  AND raw.name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.name AS STRING), VAULT.uuid)) ELSE CAST(raw.name AS STRING) END AS name, CASE WHEN raw.person IS NOT NULL  AND raw.person <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.person AS STRING), VAULT.uuid)) ELSE CAST(raw.person AS STRING) END AS person, CASE WHEN raw.national_id IS NOT NULL  AND raw.national_id <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.national_id AS STRING), VAULT.uuid)) ELSE CAST(raw.national_id AS STRING) END AS national_id, raw.* EXCEPT(bank, comments, originIPAddress, allPaidOutByAdvisa, partnerComments, address, postalCode, organizationNumber, postalArea, name, person, national_id),CASE WHEN (CAST(raw.national_id AS STRING) IS NOT NULL AND CAST(raw.national_id AS STRING) <> "" AND CAST(raw.national_id AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.national_id AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_legacy_integration_legacy|applications_past_report_requests_sambq_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_past_report_requests_sambq_p`
sambla_legacy_integration_legacy|applications_utmhistory_sambq_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_utmhistory_sambq_p`
sambla_legacy_integration_legacy|applications_estates_sambq_p|WITH raw_data_with_stack AS (SELECT *, "sambla" as stack FROM`sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_estates_sambq_p` raw), stack_vault as ( select uuid, aead_key, loan_application_oid, stack from `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf`, unnest(history) as history where history.stack  = "sambla" )SELECT CASE WHEN raw.postalArea IS NOT NULL  AND raw.postalArea <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.postalArea AS STRING), VAULT.uuid)) ELSE CAST(raw.postalArea AS STRING) END AS postalArea, raw.* EXCEPT(postalArea),CASE WHEN (raw.application_id IS NOT NULL AND raw.application_id <> "" AND raw.application_id <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(raw.application_id) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised  FROM raw_data_with_stack raw LEFT JOIN stack_vault vault ON raw.application_id = vault.loan_application_oid AND raw.stack = vault.stack
sambla_legacy_integration_legacy|users_sambq_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.users_sambq_p`
sambla_legacy_integration_legacy|applications_all_versions_sambq_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_all_versions_sambq_p`
sambla_legacy_integration_legacy|applications_excludebanks_sambq_p|WITH raw_data_with_stack AS (SELECT *, "sambla" as stack FROM`sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_excludebanks_sambq_p` raw), stack_vault as ( select uuid, aead_key, loan_application_oid, stack from `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf`, unnest(history) as history where history.stack  = "sambla" )SELECT CASE WHEN raw.bank IS NOT NULL  AND raw.bank <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.bank AS STRING), VAULT.uuid)) ELSE CAST(raw.bank AS STRING) END AS bank, raw.* EXCEPT(bank),CASE WHEN (raw.application_id IS NOT NULL AND raw.application_id <> "" AND raw.application_id <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(raw.application_id) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised  FROM raw_data_with_stack raw LEFT JOIN stack_vault vault ON raw.application_id = vault.loan_application_oid AND raw.stack = vault.stack
sambla_legacy_integration_legacy|applications_customers_sambq_p|WITH data_with_ssn_rules AS (SELECT *, CASE WHEN coalesce(market, citizenship)= "SE" THEN LEFT(REGEXP_REPLACE(CAST(raw.idNumber AS STRING), "[^0-9]", ""), 12) WHEN coalesce(market, citizenship)= "NO" THEN LEFT(REGEXP_REPLACE(CAST(raw.idNumber AS STRING), "[^0-9]", ""), 11) WHEN coalesce(market, citizenship)= "DK" THEN LEFT(REGEXP_REPLACE(CAST(raw.idNumber AS STRING), "[^0-9]", ""), 10) WHEN coalesce(market, citizenship)= "FI" THEN LEFT(REGEXP_REPLACE(UPPER(CAST(raw.idNumber AS STRING)), "[^0-9-+A-Z]", ""), 11) END AS ssn_clean FROM`sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_customers_sambq_p` raw) SELECT CASE WHEN raw.first_name IS NOT NULL  AND raw.first_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.first_name AS STRING), VAULT.uuid)) ELSE CAST(raw.first_name AS STRING) END AS first_name, CASE WHEN raw.last_name IS NOT NULL  AND raw.last_name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.last_name AS STRING), VAULT.uuid)) ELSE CAST(raw.last_name AS STRING) END AS last_name, CASE WHEN raw.postalArea IS NOT NULL  AND raw.postalArea <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.postalArea AS STRING), VAULT.uuid)) ELSE CAST(raw.postalArea AS STRING) END AS postalArea, CASE WHEN raw.address IS NOT NULL  AND raw.address <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.address AS STRING), VAULT.uuid)) ELSE CAST(raw.address AS STRING) END AS address, CASE WHEN raw.email IS NOT NULL  AND raw.email <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.email AS STRING), VAULT.uuid)) ELSE CAST(raw.email AS STRING) END AS email, CASE WHEN raw.idNumber IS NOT NULL  AND raw.idNumber <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.idNumber AS STRING), VAULT.uuid)) ELSE CAST(raw.idNumber AS STRING) END AS idNumber, CASE WHEN raw.employerPhone IS NOT NULL  AND raw.employerPhone <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.employerPhone AS STRING), VAULT.uuid)) ELSE CAST(raw.employerPhone AS STRING) END AS employerPhone, CASE WHEN raw.employer IS NOT NULL  AND raw.employer <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.employer AS STRING), VAULT.uuid)) ELSE CAST(raw.employer AS STRING) END AS employer, CASE WHEN raw.business_organization_number IS NOT NULL  AND raw.business_organization_number <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.business_organization_number AS STRING), VAULT.uuid)) ELSE CAST(raw.business_organization_number AS STRING) END AS business_organization_number, CASE WHEN raw.phoneNumber IS NOT NULL  AND raw.phoneNumber <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.phoneNumber AS STRING), VAULT.uuid)) ELSE CAST(raw.phoneNumber AS STRING) END AS phoneNumber, CASE WHEN raw.postalCode IS NOT NULL  AND raw.postalCode <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.postalCode AS STRING), VAULT.uuid)) ELSE CAST(raw.postalCode AS STRING) END AS postalCode, CASE WHEN raw.accountNumber IS NOT NULL  AND raw.accountNumber <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.accountNumber AS STRING), VAULT.uuid)) ELSE CAST(raw.accountNumber AS STRING) END AS accountNumber, CASE WHEN raw.clearingNumber IS NOT NULL  AND raw.clearingNumber <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.clearingNumber AS STRING), VAULT.uuid)) ELSE CAST(raw.clearingNumber AS STRING) END AS clearingNumber, raw.* EXCEPT(first_name, last_name, postalArea, address, email, idNumber, employerPhone, employer, business_organization_number, phoneNumber, postalCode, accountNumber, clearingNumber),CASE WHEN (CAST(raw.idNumber AS STRING) IS NOT NULL AND CAST(raw.idNumber AS STRING) <> "" AND CAST(raw.idNumber AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.idNumber AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_legacy_integration_legacy|applications_loans_sambq_p|WITH raw_data_with_stack AS (SELECT *, "sambla" as stack FROM`sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_loans_sambq_p` raw), stack_vault as ( select uuid, aead_key, loan_application_oid, stack from `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf`, unnest(history) as history where history.stack  = "sambla" )SELECT CASE WHEN raw.bank IS NOT NULL  AND raw.bank <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.bank AS STRING), VAULT.uuid)) ELSE CAST(raw.bank AS STRING) END AS bank, raw.* EXCEPT(bank),CASE WHEN (raw.application_id IS NOT NULL AND raw.application_id <> "" AND raw.application_id <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(raw.application_id) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised  FROM raw_data_with_stack raw LEFT JOIN stack_vault vault ON raw.application_id = vault.loan_application_oid AND raw.stack = vault.stack
sambla_legacy_integration_legacy|applications_credit_reports_sambq_p|WITH data_with_ssn_rules AS (SELECT *, CASE WHEN market= "SE" THEN LEFT(REGEXP_REPLACE(CAST(raw.idNumber AS STRING), "[^0-9]", ""), 12) WHEN market= "NO" THEN LEFT(REGEXP_REPLACE(CAST(raw.idNumber AS STRING), "[^0-9]", ""), 11) WHEN market= "DK" THEN LEFT(REGEXP_REPLACE(CAST(raw.idNumber AS STRING), "[^0-9]", ""), 10) WHEN market= "FI" THEN LEFT(REGEXP_REPLACE(UPPER(CAST(raw.idNumber AS STRING)), "[^0-9-+A-Z]", ""), 11) END AS ssn_clean FROM`sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_credit_reports_sambq_p` raw) SELECT CASE WHEN raw.idNumber IS NOT NULL  AND raw.idNumber <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.idNumber AS STRING), VAULT.uuid)) ELSE CAST(raw.idNumber AS STRING) END AS idNumber, raw.* EXCEPT(idNumber),CASE WHEN (CAST(raw.idNumber AS STRING) IS NOT NULL AND CAST(raw.idNumber AS STRING) <> "" AND CAST(raw.idNumber AS STRING) <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(CAST(raw.idNumber AS STRING)) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised FROM `data_with_ssn_rules` raw LEFT JOIN `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` VAULT ON CAST(raw.ssn_clean AS STRING) = VAULT.ssn
sambla_legacy_integration_legacy|applications_allpaidoutbysambla_sambq_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_allpaidoutbysambla_sambq_p`
sambla_legacy_integration_legacy|applications_scheduledcalls_sambq_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_scheduledcalls_sambq_p`
sambla_legacy_integration_legacy|applications_internalcomments_sambq_p|WITH raw_data_with_stack AS (SELECT *, "sambla" as stack FROM`sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_internalcomments_sambq_p` raw), stack_vault as ( select uuid, aead_key, loan_application_oid, stack from `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf`, unnest(history) as history where history.stack  = "sambla" )SELECT CASE WHEN raw.text IS NOT NULL  AND raw.text <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.text AS STRING), VAULT.uuid)) ELSE CAST(raw.text AS STRING) END AS text, CASE WHEN raw.userName IS NOT NULL  AND raw.userName <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.userName AS STRING), VAULT.uuid)) ELSE CAST(raw.userName AS STRING) END AS userName, raw.* EXCEPT(text, userName),CASE WHEN (raw.application_id IS NOT NULL AND raw.application_id <> "" AND raw.application_id <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(raw.application_id) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised  FROM raw_data_with_stack raw LEFT JOIN stack_vault vault ON raw.application_id = vault.loan_application_oid AND raw.stack = vault.stack
sambla_legacy_integration_legacy|banks_sambq_p|SELECT *, False AS is_anonymised FROM `sambla-data-staging-compliance.sambla_legacy_integration_legacy.banks_sambq_p`
sambla_legacy_integration_legacy|applications_version_sambq_p|WITH raw_data_with_stack AS (SELECT *, "sambla" as stack FROM`sambla-data-staging-compliance.sambla_legacy_integration_legacy.applications_version_sambq_p` raw), stack_vault as ( select uuid, aead_key, loan_application_oid, stack from `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf`, unnest(history) as history where history.stack  = "sambla" )SELECT CASE WHEN raw.name IS NOT NULL  AND raw.name <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.name AS STRING), VAULT.uuid)) ELSE CAST(raw.name AS STRING) END AS name, raw.* EXCEPT(name),CASE WHEN (raw.application_id IS NOT NULL AND raw.application_id <> "" AND raw.application_id <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(raw.application_id) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised  FROM raw_data_with_stack raw LEFT JOIN stack_vault vault ON raw.application_id = vault.loan_application_oid AND raw.stack = vault.stack
sambla_legacy_integration_legacy|unsubscriptions_sambq_p|WITH vault_emails_flattened_initial AS (SELECT history.email AS email,history.stack,history.created_at,vault.uuid,vault.aead_key FROM `sambla-group-compliance-db.compilance_database.gdpr_vault_rudolf` AS vault CROSS JOIN UNNEST(vault.history) AS history WHERE history.email IS NOT NULL AND history.email != ""), vault_emails_flattened AS ( SELECT email, stack, uuid, aead_key FROM vault_emails_flattened_initial QUALIFY ROW_NUMBER() OVER (PARTITION BY email ORDER BY created_at DESC) = 1 ) SELECT CASE WHEN raw.identifier IS NOT NULL  AND raw.identifier <> '' AND VAULT.uuid IS NOT NULL THEN TO_HEX(SAFE.DETERMINISTIC_ENCRYPT(VAULT.aead_key, CAST(raw.identifier AS STRING), VAULT.uuid)) ELSE CAST(raw.identifier AS STRING) END AS identifier, raw.* EXCEPT(identifier),CASE WHEN (raw.identifier IS NOT NULL AND raw.identifier <> "" AND raw.identifier <> "0" AND VAULT.uuid IS NOT NULL) OR LOWER(raw.identifier) =  "anonymized" THEN TRUE ELSE FALSE END AS is_anonymised  FROM`sambla-data-staging-compliance.sambla_legacy_integration_legacy.unsubscriptions_sambq_p` raw LEFT JOIN vault_emails_flattened vault ON raw.identifier = vault.email
